
TrustZone_LedControl_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  0c000000  0c000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004824  0c000238  0c000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0c004a5c  0c004a5c  00005a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0c004b2c  0c004b2c  00005b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0c004b30  0c004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  30000000  0c004b34  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .gnu.sgstubs  00000020  0c0fe000  0c0fe000  00007000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .bss          000000e4  3000000c  3000000c  0000800c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  300000f0  300000f0  0000800c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dd73  00000000  00000000  00007056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002258  00000000  00000000  00014dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000cb0  00000000  00000000  00017028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000099c  00000000  00000000  00017cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000330b0  00000000  00000000  00018674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010263  00000000  00000000  0004b724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fb73  00000000  00000000  0005b987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019b4fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003350  00000000  00000000  0019b540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  0019e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000238 <__do_global_dtors_aux>:
 c000238:	b510      	push	{r4, lr}
 c00023a:	4c05      	ldr	r4, [pc, #20]	@ (c000250 <__do_global_dtors_aux+0x18>)
 c00023c:	7823      	ldrb	r3, [r4, #0]
 c00023e:	b933      	cbnz	r3, c00024e <__do_global_dtors_aux+0x16>
 c000240:	4b04      	ldr	r3, [pc, #16]	@ (c000254 <__do_global_dtors_aux+0x1c>)
 c000242:	b113      	cbz	r3, c00024a <__do_global_dtors_aux+0x12>
 c000244:	4804      	ldr	r0, [pc, #16]	@ (c000258 <__do_global_dtors_aux+0x20>)
 c000246:	f3af 8000 	nop.w
 c00024a:	2301      	movs	r3, #1
 c00024c:	7023      	strb	r3, [r4, #0]
 c00024e:	bd10      	pop	{r4, pc}
 c000250:	3000000c 	.word	0x3000000c
 c000254:	00000000 	.word	0x00000000
 c000258:	0c004a44 	.word	0x0c004a44

0c00025c <frame_dummy>:
 c00025c:	b508      	push	{r3, lr}
 c00025e:	4b03      	ldr	r3, [pc, #12]	@ (c00026c <frame_dummy+0x10>)
 c000260:	b11b      	cbz	r3, c00026a <frame_dummy+0xe>
 c000262:	4903      	ldr	r1, [pc, #12]	@ (c000270 <frame_dummy+0x14>)
 c000264:	4803      	ldr	r0, [pc, #12]	@ (c000274 <frame_dummy+0x18>)
 c000266:	f3af 8000 	nop.w
 c00026a:	bd08      	pop	{r3, pc}
 c00026c:	00000000 	.word	0x00000000
 c000270:	30000010 	.word	0x30000010
 c000274:	0c004a44 	.word	0x0c004a44

0c000278 <__gnu_cmse_nonsecure_call>:
 c000278:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00027c:	4627      	mov	r7, r4
 c00027e:	46a0      	mov	r8, r4
 c000280:	46a1      	mov	r9, r4
 c000282:	46a2      	mov	sl, r4
 c000284:	46a3      	mov	fp, r4
 c000286:	46a4      	mov	ip, r4
 c000288:	ed2d 8b10 	vpush	{d8-d15}
 c00028c:	f04f 0500 	mov.w	r5, #0
 c000290:	ec45 5b18 	vmov	d8, r5, r5
 c000294:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000298:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00029c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c0002a0:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c0002a4:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c0002a8:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c0002ac:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c0002b0:	eef1 5a10 	vmrs	r5, fpscr
 c0002b4:	f64f 7660 	movw	r6, #65376	@ 0xff60
 c0002b8:	f6c0 76ff 	movt	r6, #4095	@ 0xfff
 c0002bc:	4035      	ands	r5, r6
 c0002be:	eee1 5a10 	vmsr	fpscr, r5
 c0002c2:	f384 8800 	msr	CPSR_f, r4
 c0002c6:	4625      	mov	r5, r4
 c0002c8:	4626      	mov	r6, r4
 c0002ca:	47a4      	blxns	r4
 c0002cc:	ecbd 8b10 	vpop	{d8-d15}
 c0002d0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c0002d4:	b580      	push	{r7, lr}
 c0002d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0002d8:	f000 ffee 	bl	c0012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 c0002dc:	f000 f8b8 	bl	c000450 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 c0002e0:	f000 f85a 	bl	c000398 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0002e4:	f000 f8c2 	bl	c00046c <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0002e8:	f000 fc20 	bl	c000b2c <MX_GPIO_Init>
  MX_ICACHE_Init();
 c0002ec:	f000 fb5a 	bl	c0009a4 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 c0002f0:	f000 fb6c 	bl	c0009cc <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 c0002f4:	f000 fbc2 	bl	c000a7c <MX_OCTOSPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 c0002f8:	2201      	movs	r2, #1
 c0002fa:	2180      	movs	r1, #128	@ 0x80
 c0002fc:	4803      	ldr	r0, [pc, #12]	@ (c00030c <main+0x38>)
 c0002fe:	f001 fc65 	bl	c001bcc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c000302:	f000 f805 	bl	c000310 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c000306:	bf00      	nop
 c000308:	e7fd      	b.n	c000306 <main+0x32>
 c00030a:	bf00      	nop
 c00030c:	52021c00 	.word	0x52021c00

0c000310 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000310:	b590      	push	{r4, r7, lr}
 c000312:	b083      	sub	sp, #12
 c000314:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c000316:	4b1e      	ldr	r3, [pc, #120]	@ (c000390 <NonSecure_Init+0x80>)
 c000318:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 c00031c:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c00031e:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 c000322:	681b      	ldr	r3, [r3, #0]
 c000324:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c000326:	683b      	ldr	r3, [r7, #0]
 c000328:	f383 8888 	msr	MSP_NS, r3
}
 c00032c:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c00032e:	4b19      	ldr	r3, [pc, #100]	@ (c000394 <NonSecure_Init+0x84>)
 c000330:	681b      	ldr	r3, [r3, #0]
 c000332:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000334:	687b      	ldr	r3, [r7, #4]
 c000336:	461c      	mov	r4, r3
 c000338:	0864      	lsrs	r4, r4, #1
 c00033a:	0064      	lsls	r4, r4, #1
 c00033c:	4620      	mov	r0, r4
 c00033e:	4621      	mov	r1, r4
 c000340:	4622      	mov	r2, r4
 c000342:	4623      	mov	r3, r4
 c000344:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c000348:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c00034c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000350:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000354:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c000358:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c00035c:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000360:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000364:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c000368:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c00036c:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000370:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000374:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c000378:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00037c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000380:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000384:	f7ff ff78 	bl	c000278 <__gnu_cmse_nonsecure_call>
}
 c000388:	bf00      	nop
 c00038a:	370c      	adds	r7, #12
 c00038c:	46bd      	mov	sp, r7
 c00038e:	bd90      	pop	{r4, r7, pc}
 c000390:	e002ed00 	.word	0xe002ed00
 c000394:	08100004 	.word	0x08100004

0c000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000398:	b580      	push	{r7, lr}
 c00039a:	b09e      	sub	sp, #120	@ 0x78
 c00039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c00039e:	f107 0318 	add.w	r3, r7, #24
 c0003a2:	2260      	movs	r2, #96	@ 0x60
 c0003a4:	2100      	movs	r1, #0
 c0003a6:	4618      	mov	r0, r3
 c0003a8:	f004 fb1f 	bl	c0049ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c0003ac:	463b      	mov	r3, r7
 c0003ae:	2200      	movs	r2, #0
 c0003b0:	601a      	str	r2, [r3, #0]
 c0003b2:	605a      	str	r2, [r3, #4]
 c0003b4:	609a      	str	r2, [r3, #8]
 c0003b6:	60da      	str	r2, [r3, #12]
 c0003b8:	611a      	str	r2, [r3, #16]
 c0003ba:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 c0003bc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 c0003c0:	f002 f8a8 	bl	c002514 <HAL_PWREx_ControlVoltageScaling>
 c0003c4:	4603      	mov	r3, r0
 c0003c6:	2b00      	cmp	r3, #0
 c0003c8:	d001      	beq.n	c0003ce <SystemClock_Config+0x36>
  {
    Error_Handler();
 c0003ca:	f000 fc01 	bl	c000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 c0003ce:	2310      	movs	r3, #16
 c0003d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c0003d2:	2301      	movs	r3, #1
 c0003d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0003d6:	2310      	movs	r3, #16
 c0003d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 c0003da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 c0003de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0003e0:	2302      	movs	r3, #2
 c0003e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0003e4:	2301      	movs	r3, #1
 c0003e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 c0003e8:	2300      	movs	r3, #0
 c0003ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 c0003ec:	2301      	movs	r3, #1
 c0003ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 c0003f0:	2350      	movs	r3, #80	@ 0x50
 c0003f2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 c0003f4:	2302      	movs	r3, #2
 c0003f6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 c0003f8:	2302      	movs	r3, #2
 c0003fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 c0003fc:	2302      	movs	r3, #2
 c0003fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 c000400:	2300      	movs	r3, #0
 c000402:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 c000404:	2300      	movs	r3, #0
 c000406:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c000408:	f107 0318 	add.w	r3, r7, #24
 c00040c:	4618      	mov	r0, r3
 c00040e:	f002 f96d 	bl	c0026ec <HAL_RCC_OscConfig>
 c000412:	4603      	mov	r3, r0
 c000414:	2b00      	cmp	r3, #0
 c000416:	d001      	beq.n	c00041c <SystemClock_Config+0x84>
  {
    Error_Handler();
 c000418:	f000 fbda 	bl	c000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c00041c:	231f      	movs	r3, #31
 c00041e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000420:	2303      	movs	r3, #3
 c000422:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c000424:	2300      	movs	r3, #0
 c000426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c000428:	2300      	movs	r3, #0
 c00042a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c00042c:	2300      	movs	r3, #0
 c00042e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 c000430:	2300      	movs	r3, #0
 c000432:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 c000434:	463b      	mov	r3, r7
 c000436:	2104      	movs	r1, #4
 c000438:	4618      	mov	r0, r3
 c00043a:	f003 f833 	bl	c0034a4 <HAL_RCC_ClockConfig>
 c00043e:	4603      	mov	r3, r0
 c000440:	2b00      	cmp	r3, #0
 c000442:	d001      	beq.n	c000448 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 c000444:	f000 fbc4 	bl	c000bd0 <Error_Handler>
  }
}
 c000448:	bf00      	nop
 c00044a:	3778      	adds	r7, #120	@ 0x78
 c00044c:	46bd      	mov	sp, r7
 c00044e:	bd80      	pop	{r7, pc}

0c000450 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 c000450:	b580      	push	{r7, lr}
 c000452:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 c000454:	f002 f93a 	bl	c0026cc <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 c000458:	2002      	movs	r0, #2
 c00045a:	f002 f8e7 	bl	c00262c <HAL_PWREx_ConfigSupply>
 c00045e:	4603      	mov	r3, r0
 c000460:	2b00      	cmp	r3, #0
 c000462:	d001      	beq.n	c000468 <SystemPower_Config+0x18>
  {
    Error_Handler();
 c000464:	f000 fbb4 	bl	c000bd0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 c000468:	bf00      	nop
 c00046a:	bd80      	pop	{r7, pc}

0c00046c <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c00046c:	b580      	push	{r7, lr}
 c00046e:	b0c4      	sub	sp, #272	@ 0x110
 c000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c000472:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000476:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00047a:	4618      	mov	r0, r3
 c00047c:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 c000480:	461a      	mov	r2, r3
 c000482:	2100      	movs	r1, #0
 c000484:	f004 fab1 	bl	c0049ea <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_SPI2, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000488:	f240 3101 	movw	r1, #769	@ 0x301
 c00048c:	2008      	movs	r0, #8
 c00048e:	f001 fbff 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000492:	4603      	mov	r3, r0
 c000494:	2b00      	cmp	r3, #0
 c000496:	d001      	beq.n	c00049c <MX_GTZC_S_Init+0x30>
  {
    Error_Handler();
 c000498:	f000 fb9a 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART2, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00049c:	f240 3101 	movw	r1, #769	@ 0x301
 c0004a0:	2009      	movs	r0, #9
 c0004a2:	f001 fbf5 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0004a6:	4603      	mov	r3, r0
 c0004a8:	2b00      	cmp	r3, #0
 c0004aa:	d001      	beq.n	c0004b0 <MX_GTZC_S_Init+0x44>
  {
    Error_Handler();
 c0004ac:	f000 fb90 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_UART4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0004b0:	f240 3101 	movw	r1, #769	@ 0x301
 c0004b4:	200b      	movs	r0, #11
 c0004b6:	f001 fbeb 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0004ba:	4603      	mov	r3, r0
 c0004bc:	2b00      	cmp	r3, #0
 c0004be:	d001      	beq.n	c0004c4 <MX_GTZC_S_Init+0x58>
  {
    Error_Handler();
 c0004c0:	f000 fb86 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_I2C1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0004c4:	f240 3101 	movw	r1, #769	@ 0x301
 c0004c8:	200d      	movs	r0, #13
 c0004ca:	f001 fbe1 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0004ce:	4603      	mov	r3, r0
 c0004d0:	2b00      	cmp	r3, #0
 c0004d2:	d001      	beq.n	c0004d8 <MX_GTZC_S_Init+0x6c>
  {
    Error_Handler();
 c0004d4:	f000 fb7c 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_I2C2, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0004d8:	f240 3101 	movw	r1, #769	@ 0x301
 c0004dc:	200e      	movs	r0, #14
 c0004de:	f001 fbd7 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0004e2:	4603      	mov	r3, r0
 c0004e4:	2b00      	cmp	r3, #0
 c0004e6:	d001      	beq.n	c0004ec <MX_GTZC_S_Init+0x80>
  {
    Error_Handler();
 c0004e8:	f000 fb72 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_UCPD1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0004ec:	f240 3101 	movw	r1, #769	@ 0x301
 c0004f0:	2013      	movs	r0, #19
 c0004f2:	f001 fbcd 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0004f6:	4603      	mov	r3, r0
 c0004f8:	2b00      	cmp	r3, #0
 c0004fa:	d001      	beq.n	c000500 <MX_GTZC_S_Init+0x94>
  {
    Error_Handler();
 c0004fc:	f000 fb68 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000500:	f240 3101 	movw	r1, #769	@ 0x301
 c000504:	482c      	ldr	r0, [pc, #176]	@ (c0005b8 <MX_GTZC_S_Init+0x14c>)
 c000506:	f001 fbc3 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00050a:	4603      	mov	r3, r0
 c00050c:	2b00      	cmp	r3, #0
 c00050e:	d001      	beq.n	c000514 <MX_GTZC_S_Init+0xa8>
  {
    Error_Handler();
 c000510:	f000 fb5e 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_MDF1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000514:	f240 3101 	movw	r1, #769	@ 0x301
 c000518:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 c00051c:	f001 fbb8 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000520:	4603      	mov	r3, r0
 c000522:	2b00      	cmp	r3, #0
 c000524:	d001      	beq.n	c00052a <MX_GTZC_S_Init+0xbe>
  {
    Error_Handler();
 c000526:	f000 fb53 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ADC12, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00052a:	f240 3101 	movw	r1, #769	@ 0x301
 c00052e:	4823      	ldr	r0, [pc, #140]	@ (c0005bc <MX_GTZC_S_Init+0x150>)
 c000530:	f001 fbae 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000534:	4603      	mov	r3, r0
 c000536:	2b00      	cmp	r3, #0
 c000538:	d001      	beq.n	c00053e <MX_GTZC_S_Init+0xd2>
  {
    Error_Handler();
 c00053a:	f000 fb49 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OTG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00053e:	f240 3101 	movw	r1, #769	@ 0x301
 c000542:	481f      	ldr	r0, [pc, #124]	@ (c0005c0 <MX_GTZC_S_Init+0x154>)
 c000544:	f001 fba4 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000548:	4603      	mov	r3, r0
 c00054a:	2b00      	cmp	r3, #0
 c00054c:	d001      	beq.n	c000552 <MX_GTZC_S_Init+0xe6>
  {
    Error_Handler();
 c00054e:	f000 fb3f 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OCTOSPIM, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000552:	f240 3101 	movw	r1, #769	@ 0x301
 c000556:	481b      	ldr	r0, [pc, #108]	@ (c0005c4 <MX_GTZC_S_Init+0x158>)
 c000558:	f001 fb9a 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00055c:	4603      	mov	r3, r0
 c00055e:	2b00      	cmp	r3, #0
 c000560:	d001      	beq.n	c000566 <MX_GTZC_S_Init+0xfa>
  {
    Error_Handler();
 c000562:	f000 fb35 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OCTOSPI1_REG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000566:	f240 3101 	movw	r1, #769	@ 0x301
 c00056a:	4817      	ldr	r0, [pc, #92]	@ (c0005c8 <MX_GTZC_S_Init+0x15c>)
 c00056c:	f001 fb90 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000570:	4603      	mov	r3, r0
 c000572:	2b00      	cmp	r3, #0
 c000574:	d001      	beq.n	c00057a <MX_GTZC_S_Init+0x10e>
  {
    Error_Handler();
 c000576:	f000 fb2b 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OCTOSPI2_REG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00057a:	f240 3101 	movw	r1, #769	@ 0x301
 c00057e:	4813      	ldr	r0, [pc, #76]	@ (c0005cc <MX_GTZC_S_Init+0x160>)
 c000580:	f001 fb86 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000584:	4603      	mov	r3, r0
 c000586:	2b00      	cmp	r3, #0
 c000588:	d001      	beq.n	c00058e <MX_GTZC_S_Init+0x122>
  {
    Error_Handler();
 c00058a:	f000 fb21 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ADC4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00058e:	f240 3101 	movw	r1, #769	@ 0x301
 c000592:	480f      	ldr	r0, [pc, #60]	@ (c0005d0 <MX_GTZC_S_Init+0x164>)
 c000594:	f001 fb7c 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000598:	4603      	mov	r3, r0
 c00059a:	2b00      	cmp	r3, #0
 c00059c:	d001      	beq.n	c0005a2 <MX_GTZC_S_Init+0x136>
  {
    Error_Handler();
 c00059e:	f000 fb17 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ADF1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0005a2:	f240 3101 	movw	r1, #769	@ 0x301
 c0005a6:	480b      	ldr	r0, [pc, #44]	@ (c0005d4 <MX_GTZC_S_Init+0x168>)
 c0005a8:	f001 fb72 	bl	c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0005ac:	4603      	mov	r3, r0
 c0005ae:	2b00      	cmp	r3, #0
 c0005b0:	d012      	beq.n	c0005d8 <MX_GTZC_S_Init+0x16c>
  {
    Error_Handler();
 c0005b2:	f000 fb0d 	bl	c000bd0 <Error_Handler>
 c0005b6:	e00f      	b.n	c0005d8 <MX_GTZC_S_Init+0x16c>
 c0005b8:	10000003 	.word	0x10000003
 c0005bc:	20000008 	.word	0x20000008
 c0005c0:	2000000a 	.word	0x2000000a
 c0005c4:	20000010 	.word	0x20000010
 c0005c8:	20000014 	.word	0x20000014
 c0005cc:	20000015 	.word	0x20000015
 c0005d0:	40000008 	.word	0x40000008
 c0005d4:	4000000c 	.word	0x4000000c
  }
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0005d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005e0:	2200      	movs	r2, #0
 c0005e2:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0005e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005ec:	2200      	movs	r2, #0
 c0005ee:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0005f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005f8:	2200      	movs	r2, #0
 c0005fa:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0005fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000600:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000604:	2200      	movs	r2, #0
 c000606:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000608:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00060c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000610:	2200      	movs	r2, #0
 c000612:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000614:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000618:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00061c:	2200      	movs	r2, #0
 c00061e:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000620:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000624:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000628:	2200      	movs	r2, #0
 c00062a:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c00062c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000630:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000634:	2200      	movs	r2, #0
 c000636:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000638:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00063c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000640:	2200      	movs	r2, #0
 c000642:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000648:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00064c:	2200      	movs	r2, #0
 c00064e:	625a      	str	r2, [r3, #36]	@ 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c000650:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000654:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000658:	2200      	movs	r2, #0
 c00065a:	629a      	str	r2, [r3, #40]	@ 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c00065c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000660:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000664:	2200      	movs	r2, #0
 c000666:	62da      	str	r2, [r3, #44]	@ 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c000668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00066c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000670:	2200      	movs	r2, #0
 c000672:	631a      	str	r2, [r3, #48]	@ 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c000674:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000678:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00067c:	2200      	movs	r2, #0
 c00067e:	635a      	str	r2, [r3, #52]	@ 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000684:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000688:	2200      	movs	r2, #0
 c00068a:	639a      	str	r2, [r3, #56]	@ 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c00068c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000690:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000694:	2200      	movs	r2, #0
 c000696:	63da      	str	r2, [r3, #60]	@ 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c000698:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00069c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006a0:	2200      	movs	r2, #0
 c0006a2:	641a      	str	r2, [r3, #64]	@ 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0006a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006ac:	2200      	movs	r2, #0
 c0006ae:	645a      	str	r2, [r3, #68]	@ 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0006b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006b8:	2200      	movs	r2, #0
 c0006ba:	649a      	str	r2, [r3, #72]	@ 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0006bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006c4:	2200      	movs	r2, #0
 c0006c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0006c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006d0:	2200      	movs	r2, #0
 c0006d2:	651a      	str	r2, [r3, #80]	@ 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0006d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006dc:	2200      	movs	r2, #0
 c0006de:	655a      	str	r2, [r3, #84]	@ 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0006e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006e8:	2200      	movs	r2, #0
 c0006ea:	659a      	str	r2, [r3, #88]	@ 0x58
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0006ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0006f4:	2200      	movs	r2, #0
 c0006f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0006f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0006fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000700:	2200      	movs	r2, #0
 c000702:	661a      	str	r2, [r3, #96]	@ 0x60
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c000704:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000708:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00070c:	2200      	movs	r2, #0
 c00070e:	665a      	str	r2, [r3, #100]	@ 0x64
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[24] =   0x00000000;
 c000710:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000714:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000718:	2200      	movs	r2, #0
 c00071a:	669a      	str	r2, [r3, #104]	@ 0x68
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[25] =   0x00000000;
 c00071c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000720:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000724:	2200      	movs	r2, #0
 c000726:	66da      	str	r2, [r3, #108]	@ 0x6c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[26] =   0x00000000;
 c000728:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00072c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000730:	2200      	movs	r2, #0
 c000732:	671a      	str	r2, [r3, #112]	@ 0x70
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[27] =   0x00000000;
 c000734:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000738:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00073c:	2200      	movs	r2, #0
 c00073e:	675a      	str	r2, [r3, #116]	@ 0x74
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[28] =   0x00000000;
 c000740:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000744:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000748:	2200      	movs	r2, #0
 c00074a:	679a      	str	r2, [r3, #120]	@ 0x78
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[29] =   0x00000000;
 c00074c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000750:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000754:	2200      	movs	r2, #0
 c000756:	67da      	str	r2, [r3, #124]	@ 0x7c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[30] =   0x00000000;
 c000758:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00075c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000760:	2200      	movs	r2, #0
 c000762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[31] =   0x00000000;
 c000766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00076a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00076e:	2200      	movs	r2, #0
 c000770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0xFFFFFFFF;
 c000774:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000778:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00077c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0xFFFFFFFF;
 c000784:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000788:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00078c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000790:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0xFFFFFFFF;
 c000794:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000798:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00079c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0007a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0xFFFFFFFF;
 c0007a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0007a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0007ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0007b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0xFFFFFFFF;
 c0007b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0007b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0007bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0007c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0xFFFFFFFF;
 c0007c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0007c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0007cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0007d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0xFFFFFFFF;
 c0007d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0007d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0007dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0007e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0xFFFFFFFF;
 c0007e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0007e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0007ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0007f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0xFFFFFFFF;
 c0007f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0007f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0007fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000800:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0xFFFFFFFF;
 c000804:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000808:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00080c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000810:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0xFFFFFFFF;
 c000814:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000818:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00081c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000820:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0xFFFFFFFF;
 c000824:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000828:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00082c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000830:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0xFFFFFFFF;
 c000834:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000838:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00083c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000840:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0xFFFFFFFF;
 c000844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000848:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00084c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000850:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0xFFFFFFFF;
 c000854:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000858:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00085c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000860:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0xFFFFFFFF;
 c000864:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000868:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00086c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000870:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0xFFFFFFFF;
 c000874:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000878:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00087c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000880:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0xFFFFFFFF;
 c000884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000888:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00088c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000890:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0xFFFFFFFF;
 c000894:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000898:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00089c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0008a0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0xFFFFFFFF;
 c0008a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0008b0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[20] =   0xFFFFFFFF;
 c0008b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0008c0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[21] =   0xFFFFFFFF;
 c0008c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0008d0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[22] =   0xFFFFFFFF;
 c0008d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0008e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[23] =   0xFFFFFFFF;
 c0008e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0008f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[24] =   0xFFFFFFFF;
 c0008f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000900:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[25] =   0xFFFFFFFF;
 c000904:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000908:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00090c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000910:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[26] =   0xFFFFFFFF;
 c000914:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000918:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00091c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000920:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[27] =   0xFFFFFFFF;
 c000924:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000928:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00092c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000930:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[28] =   0xFFFFFFFF;
 c000934:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000938:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00093c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000940:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[29] =   0xFFFFFFFF;
 c000944:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000948:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00094c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000950:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[30] =   0xFFFFFFFF;
 c000954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000958:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00095c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000960:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[31] =   0xFFFFFFFF;
 c000964:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000968:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00096c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000970:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000974:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000978:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00097c:	2200      	movs	r2, #0
 c00097e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c000982:	1d3b      	adds	r3, r7, #4
 c000984:	4619      	mov	r1, r3
 c000986:	4806      	ldr	r0, [pc, #24]	@ (c0009a0 <MX_GTZC_S_Init+0x534>)
 c000988:	f001 fae4 	bl	c001f54 <HAL_GTZC_MPCBB_ConfigMem>
 c00098c:	4603      	mov	r3, r0
 c00098e:	2b00      	cmp	r3, #0
 c000990:	d001      	beq.n	c000996 <MX_GTZC_S_Init+0x52a>
  {
    Error_Handler();
 c000992:	f000 f91d 	bl	c000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000996:	bf00      	nop
 c000998:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 c00099c:	46bd      	mov	sp, r7
 c00099e:	bd80      	pop	{r7, pc}
 c0009a0:	30040000 	.word	0x30040000

0c0009a4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c0009a4:	b580      	push	{r7, lr}
 c0009a6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c0009a8:	2000      	movs	r0, #0
 c0009aa:	f001 fbab 	bl	c002104 <HAL_ICACHE_ConfigAssociativityMode>
 c0009ae:	4603      	mov	r3, r0
 c0009b0:	2b00      	cmp	r3, #0
 c0009b2:	d001      	beq.n	c0009b8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c0009b4:	f000 f90c 	bl	c000bd0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c0009b8:	f001 fbc4 	bl	c002144 <HAL_ICACHE_Enable>
 c0009bc:	4603      	mov	r3, r0
 c0009be:	2b00      	cmp	r3, #0
 c0009c0:	d001      	beq.n	c0009c6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c0009c2:	f000 f905 	bl	c000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c0009c6:	bf00      	nop
 c0009c8:	bd80      	pop	{r7, pc}
	...

0c0009cc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 c0009cc:	b580      	push	{r7, lr}
 c0009ce:	b082      	sub	sp, #8
 c0009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 c0009d2:	463b      	mov	r3, r7
 c0009d4:	2200      	movs	r2, #0
 c0009d6:	601a      	str	r2, [r3, #0]
 c0009d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 c0009da:	4b26      	ldr	r3, [pc, #152]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c0009dc:	4a26      	ldr	r2, [pc, #152]	@ (c000a78 <MX_OCTOSPI1_Init+0xac>)
 c0009de:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 c0009e0:	4b24      	ldr	r3, [pc, #144]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c0009e2:	2201      	movs	r2, #1
 c0009e4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 c0009e6:	4b23      	ldr	r3, [pc, #140]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c0009e8:	2200      	movs	r2, #0
 c0009ea:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 c0009ec:	4b21      	ldr	r3, [pc, #132]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c0009ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 c0009f2:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 c0009f4:	4b1f      	ldr	r3, [pc, #124]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c0009f6:	2217      	movs	r2, #23
 c0009f8:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 c0009fa:	4b1e      	ldr	r3, [pc, #120]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c0009fc:	2201      	movs	r2, #1
 c0009fe:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 c000a00:	4b1c      	ldr	r3, [pc, #112]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a02:	2200      	movs	r2, #0
 c000a04:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 c000a06:	4b1b      	ldr	r3, [pc, #108]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a08:	2200      	movs	r2, #0
 c000a0a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 c000a0c:	4b19      	ldr	r3, [pc, #100]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a0e:	2200      	movs	r2, #0
 c000a10:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 c000a12:	4b18      	ldr	r3, [pc, #96]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a14:	2202      	movs	r2, #2
 c000a16:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 c000a18:	4b16      	ldr	r3, [pc, #88]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a1a:	2200      	movs	r2, #0
 c000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 c000a1e:	4b15      	ldr	r3, [pc, #84]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 c000a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 c000a26:	4b13      	ldr	r3, [pc, #76]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a28:	220a      	movs	r2, #10
 c000a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 c000a2c:	4b11      	ldr	r3, [pc, #68]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a2e:	2200      	movs	r2, #0
 c000a30:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 c000a32:	4b10      	ldr	r3, [pc, #64]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a34:	2200      	movs	r2, #0
 c000a36:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 100;
 c000a38:	4b0e      	ldr	r3, [pc, #56]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a3a:	2264      	movs	r2, #100	@ 0x64
 c000a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 c000a3e:	480d      	ldr	r0, [pc, #52]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a40:	f001 fba0 	bl	c002184 <HAL_OSPI_Init>
 c000a44:	4603      	mov	r3, r0
 c000a46:	2b00      	cmp	r3, #0
 c000a48:	d001      	beq.n	c000a4e <MX_OCTOSPI1_Init+0x82>
  {
    Error_Handler();
 c000a4a:	f000 f8c1 	bl	c000bd0 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 c000a4e:	2300      	movs	r3, #0
 c000a50:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 c000a52:	2300      	movs	r3, #0
 c000a54:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 c000a56:	463b      	mov	r3, r7
 c000a58:	4619      	mov	r1, r3
 c000a5a:	4806      	ldr	r0, [pc, #24]	@ (c000a74 <MX_OCTOSPI1_Init+0xa8>)
 c000a5c:	f001 fd12 	bl	c002484 <HAL_OSPI_DLYB_SetConfig>
 c000a60:	4603      	mov	r3, r0
 c000a62:	2b00      	cmp	r3, #0
 c000a64:	d001      	beq.n	c000a6a <MX_OCTOSPI1_Init+0x9e>
  {
    Error_Handler();
 c000a66:	f000 f8b3 	bl	c000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 c000a6a:	bf00      	nop
 c000a6c:	3708      	adds	r7, #8
 c000a6e:	46bd      	mov	sp, r7
 c000a70:	bd80      	pop	{r7, pc}
 c000a72:	bf00      	nop
 c000a74:	30000028 	.word	0x30000028
 c000a78:	520d1400 	.word	0x520d1400

0c000a7c <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 c000a7c:	b580      	push	{r7, lr}
 c000a7e:	b082      	sub	sp, #8
 c000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 c000a82:	463b      	mov	r3, r7
 c000a84:	2200      	movs	r2, #0
 c000a86:	601a      	str	r2, [r3, #0]
 c000a88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 c000a8a:	4b26      	ldr	r3, [pc, #152]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000a8c:	4a26      	ldr	r2, [pc, #152]	@ (c000b28 <MX_OCTOSPI2_Init+0xac>)
 c000a8e:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 c000a90:	4b24      	ldr	r3, [pc, #144]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000a92:	2204      	movs	r2, #4
 c000a94:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 c000a96:	4b23      	ldr	r3, [pc, #140]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000a98:	2200      	movs	r2, #0
 c000a9a:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 c000a9c:	4b21      	ldr	r3, [pc, #132]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000a9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 c000aa2:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 c000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000aa6:	221a      	movs	r2, #26
 c000aa8:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 c000aaa:	4b1e      	ldr	r3, [pc, #120]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000aac:	2202      	movs	r2, #2
 c000aae:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 c000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000ab2:	2200      	movs	r2, #0
 c000ab4:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 c000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000ab8:	2200      	movs	r2, #0
 c000aba:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 c000abc:	4b19      	ldr	r3, [pc, #100]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000abe:	2200      	movs	r2, #0
 c000ac0:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 c000ac2:	4b18      	ldr	r3, [pc, #96]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000ac4:	2204      	movs	r2, #4
 c000ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 c000ac8:	4b16      	ldr	r3, [pc, #88]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000aca:	2200      	movs	r2, #0
 c000acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 c000ace:	4b15      	ldr	r3, [pc, #84]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 c000ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 c000ad6:	4b13      	ldr	r3, [pc, #76]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000ad8:	2200      	movs	r2, #0
 c000ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 c000adc:	4b11      	ldr	r3, [pc, #68]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000ade:	2200      	movs	r2, #0
 c000ae0:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 c000ae2:	4b10      	ldr	r3, [pc, #64]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000ae4:	2200      	movs	r2, #0
 c000ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 c000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000aea:	2200      	movs	r2, #0
 c000aec:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 c000aee:	480d      	ldr	r0, [pc, #52]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000af0:	f001 fb48 	bl	c002184 <HAL_OSPI_Init>
 c000af4:	4603      	mov	r3, r0
 c000af6:	2b00      	cmp	r3, #0
 c000af8:	d001      	beq.n	c000afe <MX_OCTOSPI2_Init+0x82>
  {
    Error_Handler();
 c000afa:	f000 f869 	bl	c000bd0 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 c000afe:	2300      	movs	r3, #0
 c000b00:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 c000b02:	2300      	movs	r3, #0
 c000b04:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 c000b06:	463b      	mov	r3, r7
 c000b08:	4619      	mov	r1, r3
 c000b0a:	4806      	ldr	r0, [pc, #24]	@ (c000b24 <MX_OCTOSPI2_Init+0xa8>)
 c000b0c:	f001 fcba 	bl	c002484 <HAL_OSPI_DLYB_SetConfig>
 c000b10:	4603      	mov	r3, r0
 c000b12:	2b00      	cmp	r3, #0
 c000b14:	d001      	beq.n	c000b1a <MX_OCTOSPI2_Init+0x9e>
  {
    Error_Handler();
 c000b16:	f000 f85b 	bl	c000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 c000b1a:	bf00      	nop
 c000b1c:	3708      	adds	r7, #8
 c000b1e:	46bd      	mov	sp, r7
 c000b20:	bd80      	pop	{r7, pc}
 c000b22:	bf00      	nop
 c000b24:	30000084 	.word	0x30000084
 c000b28:	520d2400 	.word	0x520d2400

0c000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000b2c:	b580      	push	{r7, lr}
 c000b2e:	b088      	sub	sp, #32
 c000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000b32:	f107 030c 	add.w	r3, r7, #12
 c000b36:	2200      	movs	r2, #0
 c000b38:	601a      	str	r2, [r3, #0]
 c000b3a:	605a      	str	r2, [r3, #4]
 c000b3c:	609a      	str	r2, [r3, #8]
 c000b3e:	60da      	str	r2, [r3, #12]
 c000b40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000b42:	4b20      	ldr	r3, [pc, #128]	@ (c000bc4 <MX_GPIO_Init+0x98>)
 c000b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000b48:	4a1e      	ldr	r2, [pc, #120]	@ (c000bc4 <MX_GPIO_Init+0x98>)
 c000b4a:	f043 0304 	orr.w	r3, r3, #4
 c000b4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000b52:	4b1c      	ldr	r3, [pc, #112]	@ (c000bc4 <MX_GPIO_Init+0x98>)
 c000b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000b58:	f003 0304 	and.w	r3, r3, #4
 c000b5c:	60bb      	str	r3, [r7, #8]
 c000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c000b60:	4b18      	ldr	r3, [pc, #96]	@ (c000bc4 <MX_GPIO_Init+0x98>)
 c000b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000b66:	4a17      	ldr	r2, [pc, #92]	@ (c000bc4 <MX_GPIO_Init+0x98>)
 c000b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c000b6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000b70:	4b14      	ldr	r3, [pc, #80]	@ (c000bc4 <MX_GPIO_Init+0x98>)
 c000b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c000b7a:	607b      	str	r3, [r7, #4]
 c000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 c000b7e:	2200      	movs	r2, #0
 c000b80:	2180      	movs	r1, #128	@ 0x80
 c000b82:	4811      	ldr	r0, [pc, #68]	@ (c000bc8 <MX_GPIO_Init+0x9c>)
 c000b84:	f001 f822 	bl	c001bcc <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_13, GPIO_PIN_NSEC);
 c000b88:	2200      	movs	r2, #0
 c000b8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 c000b8e:	480f      	ldr	r0, [pc, #60]	@ (c000bcc <MX_GPIO_Init+0xa0>)
 c000b90:	f001 f834 	bl	c001bfc <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOH, GPIO_PIN_6, GPIO_PIN_NSEC);
 c000b94:	2200      	movs	r2, #0
 c000b96:	2140      	movs	r1, #64	@ 0x40
 c000b98:	480b      	ldr	r0, [pc, #44]	@ (c000bc8 <MX_GPIO_Init+0x9c>)
 c000b9a:	f001 f82f 	bl	c001bfc <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 c000b9e:	2380      	movs	r3, #128	@ 0x80
 c000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000ba2:	2301      	movs	r3, #1
 c000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000ba6:	2300      	movs	r3, #0
 c000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000baa:	2300      	movs	r3, #0
 c000bac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 c000bae:	f107 030c 	add.w	r3, r7, #12
 c000bb2:	4619      	mov	r1, r3
 c000bb4:	4804      	ldr	r0, [pc, #16]	@ (c000bc8 <MX_GPIO_Init+0x9c>)
 c000bb6:	f000 fe29 	bl	c00180c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 c000bba:	bf00      	nop
 c000bbc:	3720      	adds	r7, #32
 c000bbe:	46bd      	mov	sp, r7
 c000bc0:	bd80      	pop	{r7, pc}
 c000bc2:	bf00      	nop
 c000bc4:	56020c00 	.word	0x56020c00
 c000bc8:	52021c00 	.word	0x52021c00
 c000bcc:	52020800 	.word	0x52020800

0c000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000bd0:	b480      	push	{r7}
 c000bd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000bd4:	b672      	cpsid	i
}
 c000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000bd8:	bf00      	nop
 c000bda:	e7fd      	b.n	c000bd8 <Error_Handler+0x8>

0c000bdc <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000bdc:	b2c0      	uxtb	r0, r0
 c000bde:	b480      	push	{r7}
 c000be0:	b083      	sub	sp, #12
 c000be2:	af00      	add	r7, sp, #0
 c000be4:	4603      	mov	r3, r0
 c000be6:	6039      	str	r1, [r7, #0]
 c000be8:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000bea:	683b      	ldr	r3, [r7, #0]
 c000bec:	2b00      	cmp	r3, #0
 c000bee:	d00d      	beq.n	c000c0c <__acle_se_SECURE_RegisterCallback+0x30>
  {
    switch(CallbackId)
 c000bf0:	79fb      	ldrb	r3, [r7, #7]
 c000bf2:	2b00      	cmp	r3, #0
 c000bf4:	d002      	beq.n	c000bfc <__acle_se_SECURE_RegisterCallback+0x20>
 c000bf6:	2b01      	cmp	r3, #1
 c000bf8:	d004      	beq.n	c000c04 <__acle_se_SECURE_RegisterCallback+0x28>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000bfa:	e007      	b.n	c000c0c <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c000bfc:	4a20      	ldr	r2, [pc, #128]	@ (c000c80 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000bfe:	683b      	ldr	r3, [r7, #0]
 c000c00:	6013      	str	r3, [r2, #0]
        break;
 c000c02:	e003      	b.n	c000c0c <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c000c04:	4a1f      	ldr	r2, [pc, #124]	@ (c000c84 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c000c06:	683b      	ldr	r3, [r7, #0]
 c000c08:	6013      	str	r3, [r2, #0]
        break;
 c000c0a:	bf00      	nop
    }
  }
}
 c000c0c:	bf00      	nop
 c000c0e:	370c      	adds	r7, #12
 c000c10:	46bd      	mov	sp, r7
 c000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c16:	4670      	mov	r0, lr
 c000c18:	4671      	mov	r1, lr
 c000c1a:	4672      	mov	r2, lr
 c000c1c:	4673      	mov	r3, lr
 c000c1e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c000c22:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c000c26:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000c2a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000c2e:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c000c32:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c000c36:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000c3a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000c3e:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c000c42:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c000c46:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000c4a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000c4e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c000c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000c56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000c5a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000c5e:	f38e 8c00 	msr	CPSR_fs, lr
 c000c62:	b410      	push	{r4}
 c000c64:	eef1 ca10 	vmrs	ip, fpscr
 c000c68:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c000c6c:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c000c70:	ea0c 0c04 	and.w	ip, ip, r4
 c000c74:	eee1 ca10 	vmsr	fpscr, ip
 c000c78:	bc10      	pop	{r4}
 c000c7a:	46f4      	mov	ip, lr
 c000c7c:	4774      	bxns	lr
 c000c7e:	bf00      	nop
 c000c80:	300000e0 	.word	0x300000e0
 c000c84:	300000e4 	.word	0x300000e4

0c000c88 <__acle_se_Secure_led_control>:

CMSE_NS_ENTRY void Secure_led_control(void)
{
 c000c88:	b580      	push	{r7, lr}
 c000c8a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 c000c8c:	2201      	movs	r2, #1
 c000c8e:	2180      	movs	r1, #128	@ 0x80
 c000c90:	481d      	ldr	r0, [pc, #116]	@ (c000d08 <__acle_se_Secure_led_control+0x80>)
 c000c92:	f000 ff9b 	bl	c001bcc <HAL_GPIO_WritePin>
}
 c000c96:	bf00      	nop
 c000c98:	46bd      	mov	sp, r7
 c000c9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000c9e:	4670      	mov	r0, lr
 c000ca0:	4671      	mov	r1, lr
 c000ca2:	4672      	mov	r2, lr
 c000ca4:	4673      	mov	r3, lr
 c000ca6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c000caa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c000cae:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000cb2:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000cb6:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c000cba:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c000cbe:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000cc2:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000cc6:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c000cca:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c000cce:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000cd2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000cd6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c000cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000ce2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000ce6:	f38e 8c00 	msr	CPSR_fs, lr
 c000cea:	b410      	push	{r4}
 c000cec:	eef1 ca10 	vmrs	ip, fpscr
 c000cf0:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c000cf4:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c000cf8:	ea0c 0c04 	and.w	ip, ip, r4
 c000cfc:	eee1 ca10 	vmsr	fpscr, ip
 c000d00:	bc10      	pop	{r4}
 c000d02:	46f4      	mov	ip, lr
 c000d04:	4774      	bxns	lr
 c000d06:	bf00      	nop
 c000d08:	52021c00 	.word	0x52021c00

0c000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000d0c:	b480      	push	{r7}
 c000d0e:	b085      	sub	sp, #20
 c000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 c000d12:	4b19      	ldr	r3, [pc, #100]	@ (c000d78 <HAL_MspInit+0x6c>)
 c000d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c000d18:	4a17      	ldr	r2, [pc, #92]	@ (c000d78 <HAL_MspInit+0x6c>)
 c000d1a:	f043 0304 	orr.w	r3, r3, #4
 c000d1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c000d22:	4b15      	ldr	r3, [pc, #84]	@ (c000d78 <HAL_MspInit+0x6c>)
 c000d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c000d28:	f003 0304 	and.w	r3, r3, #4
 c000d2c:	60fb      	str	r3, [r7, #12]
 c000d2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GTZC1_CLK_ENABLE();
 c000d30:	4b11      	ldr	r3, [pc, #68]	@ (c000d78 <HAL_MspInit+0x6c>)
 c000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c000d36:	4a10      	ldr	r2, [pc, #64]	@ (c000d78 <HAL_MspInit+0x6c>)
 c000d38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 c000d40:	4b0d      	ldr	r3, [pc, #52]	@ (c000d78 <HAL_MspInit+0x6c>)
 c000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c000d46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 c000d4a:	60bb      	str	r3, [r7, #8]
 c000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC2_CLK_ENABLE();
 c000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (c000d78 <HAL_MspInit+0x6c>)
 c000d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c000d54:	4a08      	ldr	r2, [pc, #32]	@ (c000d78 <HAL_MspInit+0x6c>)
 c000d56:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 c000d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c000d5e:	4b06      	ldr	r3, [pc, #24]	@ (c000d78 <HAL_MspInit+0x6c>)
 c000d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c000d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 c000d68:	607b      	str	r3, [r7, #4]
 c000d6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000d6c:	bf00      	nop
 c000d6e:	3714      	adds	r7, #20
 c000d70:	46bd      	mov	sp, r7
 c000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d76:	4770      	bx	lr
 c000d78:	56020c00 	.word	0x56020c00

0c000d7c <HAL_OSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hospi: OSPI handle pointer
  * @retval None
  */
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 c000d7c:	b580      	push	{r7, lr}
 c000d7e:	b0b8      	sub	sp, #224	@ 0xe0
 c000d80:	af00      	add	r7, sp, #0
 c000d82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c000d84:	f107 0318 	add.w	r3, r7, #24
 c000d88:	22c8      	movs	r2, #200	@ 0xc8
 c000d8a:	2100      	movs	r1, #0
 c000d8c:	4618      	mov	r0, r3
 c000d8e:	f003 fe2c 	bl	c0049ea <memset>
  if(hospi->Instance==OCTOSPI1)
 c000d92:	687b      	ldr	r3, [r7, #4]
 c000d94:	681b      	ldr	r3, [r3, #0]
 c000d96:	4a40      	ldr	r2, [pc, #256]	@ (c000e98 <HAL_OSPI_MspInit+0x11c>)
 c000d98:	4293      	cmp	r3, r2
 c000d9a:	d13a      	bne.n	c000e12 <HAL_OSPI_MspInit+0x96>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 c000d9c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 c000da0:	f04f 0300 	mov.w	r3, #0
 c000da4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 c000da8:	2300      	movs	r3, #0
 c000daa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000dae:	f107 0318 	add.w	r3, r7, #24
 c000db2:	4618      	mov	r0, r3
 c000db4:	f002 ff0a 	bl	c003bcc <HAL_RCCEx_PeriphCLKConfig>
 c000db8:	4603      	mov	r3, r0
 c000dba:	2b00      	cmp	r3, #0
 c000dbc:	d001      	beq.n	c000dc2 <HAL_OSPI_MspInit+0x46>
    {
      Error_Handler();
 c000dbe:	f7ff ff07 	bl	c000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 c000dc2:	4b36      	ldr	r3, [pc, #216]	@ (c000e9c <HAL_OSPI_MspInit+0x120>)
 c000dc4:	681b      	ldr	r3, [r3, #0]
 c000dc6:	3301      	adds	r3, #1
 c000dc8:	4a34      	ldr	r2, [pc, #208]	@ (c000e9c <HAL_OSPI_MspInit+0x120>)
 c000dca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 c000dcc:	4b33      	ldr	r3, [pc, #204]	@ (c000e9c <HAL_OSPI_MspInit+0x120>)
 c000dce:	681b      	ldr	r3, [r3, #0]
 c000dd0:	2b01      	cmp	r3, #1
 c000dd2:	d10e      	bne.n	c000df2 <HAL_OSPI_MspInit+0x76>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 c000dd4:	4b32      	ldr	r3, [pc, #200]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000dda:	4a31      	ldr	r2, [pc, #196]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000ddc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 c000de0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000de4:	4b2e      	ldr	r3, [pc, #184]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c000dee:	617b      	str	r3, [r7, #20]
 c000df0:	697b      	ldr	r3, [r7, #20]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 c000df2:	4b2b      	ldr	r3, [pc, #172]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c000df8:	4a29      	ldr	r2, [pc, #164]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000dfa:	f043 0310 	orr.w	r3, r3, #16
 c000dfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 c000e02:	4b27      	ldr	r3, [pc, #156]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c000e08:	f003 0310 	and.w	r3, r3, #16
 c000e0c:	613b      	str	r3, [r7, #16]
 c000e0e:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

    /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 c000e10:	e03e      	b.n	c000e90 <HAL_OSPI_MspInit+0x114>
  else if(hospi->Instance==OCTOSPI2)
 c000e12:	687b      	ldr	r3, [r7, #4]
 c000e14:	681b      	ldr	r3, [r3, #0]
 c000e16:	4a23      	ldr	r2, [pc, #140]	@ (c000ea4 <HAL_OSPI_MspInit+0x128>)
 c000e18:	4293      	cmp	r3, r2
 c000e1a:	d139      	bne.n	c000e90 <HAL_OSPI_MspInit+0x114>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 c000e1c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 c000e20:	f04f 0300 	mov.w	r3, #0
 c000e24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 c000e28:	2300      	movs	r3, #0
 c000e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000e2e:	f107 0318 	add.w	r3, r7, #24
 c000e32:	4618      	mov	r0, r3
 c000e34:	f002 feca 	bl	c003bcc <HAL_RCCEx_PeriphCLKConfig>
 c000e38:	4603      	mov	r3, r0
 c000e3a:	2b00      	cmp	r3, #0
 c000e3c:	d001      	beq.n	c000e42 <HAL_OSPI_MspInit+0xc6>
      Error_Handler();
 c000e3e:	f7ff fec7 	bl	c000bd0 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 c000e42:	4b16      	ldr	r3, [pc, #88]	@ (c000e9c <HAL_OSPI_MspInit+0x120>)
 c000e44:	681b      	ldr	r3, [r3, #0]
 c000e46:	3301      	adds	r3, #1
 c000e48:	4a14      	ldr	r2, [pc, #80]	@ (c000e9c <HAL_OSPI_MspInit+0x120>)
 c000e4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 c000e4c:	4b13      	ldr	r3, [pc, #76]	@ (c000e9c <HAL_OSPI_MspInit+0x120>)
 c000e4e:	681b      	ldr	r3, [r3, #0]
 c000e50:	2b01      	cmp	r3, #1
 c000e52:	d10e      	bne.n	c000e72 <HAL_OSPI_MspInit+0xf6>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 c000e54:	4b12      	ldr	r3, [pc, #72]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000e5a:	4a11      	ldr	r2, [pc, #68]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000e5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 c000e60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000e64:	4b0e      	ldr	r3, [pc, #56]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c000e6e:	60fb      	str	r3, [r7, #12]
 c000e70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 c000e72:	4b0b      	ldr	r3, [pc, #44]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c000e78:	4a09      	ldr	r2, [pc, #36]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c000e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 c000e82:	4b07      	ldr	r3, [pc, #28]	@ (c000ea0 <HAL_OSPI_MspInit+0x124>)
 c000e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c000e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c000e8c:	60bb      	str	r3, [r7, #8]
 c000e8e:	68bb      	ldr	r3, [r7, #8]
}
 c000e90:	bf00      	nop
 c000e92:	37e0      	adds	r7, #224	@ 0xe0
 c000e94:	46bd      	mov	sp, r7
 c000e96:	bd80      	pop	{r7, pc}
 c000e98:	520d1400 	.word	0x520d1400
 c000e9c:	300000e8 	.word	0x300000e8
 c000ea0:	56020c00 	.word	0x56020c00
 c000ea4:	520d2400 	.word	0x520d2400

0c000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000ea8:	b480      	push	{r7}
 c000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c000eac:	bf00      	nop
 c000eae:	e7fd      	b.n	c000eac <NMI_Handler+0x4>

0c000eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000eb0:	b480      	push	{r7}
 c000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000eb4:	bf00      	nop
 c000eb6:	e7fd      	b.n	c000eb4 <HardFault_Handler+0x4>

0c000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000eb8:	b480      	push	{r7}
 c000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000ebc:	bf00      	nop
 c000ebe:	e7fd      	b.n	c000ebc <MemManage_Handler+0x4>

0c000ec0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c000ec0:	b480      	push	{r7}
 c000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000ec4:	bf00      	nop
 c000ec6:	e7fd      	b.n	c000ec4 <BusFault_Handler+0x4>

0c000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000ec8:	b480      	push	{r7}
 c000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000ecc:	bf00      	nop
 c000ece:	e7fd      	b.n	c000ecc <UsageFault_Handler+0x4>

0c000ed0 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000ed0:	b480      	push	{r7}
 c000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000ed4:	bf00      	nop
 c000ed6:	e7fd      	b.n	c000ed4 <SecureFault_Handler+0x4>

0c000ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000ed8:	b480      	push	{r7}
 c000eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000edc:	bf00      	nop
 c000ede:	46bd      	mov	sp, r7
 c000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ee4:	4770      	bx	lr

0c000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000ee6:	b480      	push	{r7}
 c000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000eea:	bf00      	nop
 c000eec:	46bd      	mov	sp, r7
 c000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ef2:	4770      	bx	lr

0c000ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000ef4:	b480      	push	{r7}
 c000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000ef8:	bf00      	nop
 c000efa:	46bd      	mov	sp, r7
 c000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f00:	4770      	bx	lr

0c000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000f02:	b580      	push	{r7, lr}
 c000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000f06:	f000 fa7d 	bl	c001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000f0a:	bf00      	nop
 c000f0c:	bd80      	pop	{r7, pc}
	...

0c000f10 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000f10:	b480      	push	{r7}
 c000f12:	af00      	add	r7, sp, #0
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000f14:	4b13      	ldr	r3, [pc, #76]	@ (c000f64 <TZ_SAU_Setup+0x54>)
 c000f16:	2202      	movs	r2, #2
 c000f18:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000f1a:	4b13      	ldr	r3, [pc, #76]	@ (c000f68 <TZ_SAU_Setup+0x58>)
 c000f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000f20:	4a11      	ldr	r2, [pc, #68]	@ (c000f68 <TZ_SAU_Setup+0x58>)
 c000f22:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 c000f26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f2a:	4b10      	ldr	r3, [pc, #64]	@ (c000f6c <TZ_SAU_Setup+0x5c>)
 c000f2c:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000f2e:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f32:	4a0e      	ldr	r2, [pc, #56]	@ (c000f6c <TZ_SAU_Setup+0x5c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f38:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (c000f70 <TZ_SAU_Setup+0x60>)
 c000f3c:	2200      	movs	r2, #0
 c000f3e:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000f42:	4b0b      	ldr	r3, [pc, #44]	@ (c000f70 <TZ_SAU_Setup+0x60>)
 c000f44:	2200      	movs	r2, #0
 c000f46:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000f4a:	4b09      	ldr	r3, [pc, #36]	@ (c000f70 <TZ_SAU_Setup+0x60>)
 c000f4c:	2200      	movs	r2, #0
 c000f4e:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000f52:	4b07      	ldr	r3, [pc, #28]	@ (c000f70 <TZ_SAU_Setup+0x60>)
 c000f54:	2200      	movs	r2, #0
 c000f56:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  #endif

}
 c000f5a:	bf00      	nop
 c000f5c:	46bd      	mov	sp, r7
 c000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f62:	4770      	bx	lr
 c000f64:	e000edd0 	.word	0xe000edd0
 c000f68:	e000ed00 	.word	0xe000ed00
 c000f6c:	e000ef30 	.word	0xe000ef30
 c000f70:	e000e100 	.word	0xe000e100

0c000f74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c000f74:	b580      	push	{r7, lr}
 c000f76:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000f78:	f7ff ffca 	bl	c000f10 <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c000f7c:	4b1a      	ldr	r3, [pc, #104]	@ (c000fe8 <SystemInit+0x74>)
 c000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c000f82:	4a19      	ldr	r2, [pc, #100]	@ (c000fe8 <SystemInit+0x74>)
 c000f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c000f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000f8c:	4b17      	ldr	r3, [pc, #92]	@ (c000fec <SystemInit+0x78>)
 c000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c000f92:	4a16      	ldr	r2, [pc, #88]	@ (c000fec <SystemInit+0x78>)
 c000f94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c000f98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 c000f9c:	4b14      	ldr	r3, [pc, #80]	@ (c000ff0 <SystemInit+0x7c>)
 c000f9e:	2201      	movs	r2, #1
 c000fa0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c000fa2:	4b13      	ldr	r3, [pc, #76]	@ (c000ff0 <SystemInit+0x7c>)
 c000fa4:	2200      	movs	r2, #0
 c000fa6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c000fa8:	4b11      	ldr	r3, [pc, #68]	@ (c000ff0 <SystemInit+0x7c>)
 c000faa:	2200      	movs	r2, #0
 c000fac:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 c000fae:	4b10      	ldr	r3, [pc, #64]	@ (c000ff0 <SystemInit+0x7c>)
 c000fb0:	2200      	movs	r2, #0
 c000fb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 c000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (c000ff0 <SystemInit+0x7c>)
 c000fb6:	681b      	ldr	r3, [r3, #0]
 c000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (c000ff0 <SystemInit+0x7c>)
 c000fba:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 c000fbe:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 c000fc2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 c000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (c000ff0 <SystemInit+0x7c>)
 c000fc6:	2200      	movs	r2, #0
 c000fc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c000fca:	4b09      	ldr	r3, [pc, #36]	@ (c000ff0 <SystemInit+0x7c>)
 c000fcc:	681b      	ldr	r3, [r3, #0]
 c000fce:	4a08      	ldr	r2, [pc, #32]	@ (c000ff0 <SystemInit+0x7c>)
 c000fd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c000fd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c000fd6:	4b06      	ldr	r3, [pc, #24]	@ (c000ff0 <SystemInit+0x7c>)
 c000fd8:	2200      	movs	r2, #0
 c000fda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c000fdc:	4b02      	ldr	r3, [pc, #8]	@ (c000fe8 <SystemInit+0x74>)
 c000fde:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 c000fe2:	609a      	str	r2, [r3, #8]
#endif
}
 c000fe4:	bf00      	nop
 c000fe6:	bd80      	pop	{r7, pc}
 c000fe8:	e000ed00 	.word	0xe000ed00
 c000fec:	e002ed00 	.word	0xe002ed00
 c000ff0:	56020c00 	.word	0x56020c00

0c000ff4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000ff4:	b480      	push	{r7}
 c000ff6:	b089      	sub	sp, #36	@ 0x24
 c000ff8:	af00      	add	r7, sp, #0
  uint32_t pllr, pllsource, pllm , tmp, pllfracen, msirange;
  float_t fracn1, pllvco;

  /* Get MSI Range frequency--------------------------------------------------*/
  if(READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c000ffa:	4b73      	ldr	r3, [pc, #460]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c000ffc:	689b      	ldr	r3, [r3, #8]
 c000ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c001002:	2b00      	cmp	r3, #0
 c001004:	d107      	bne.n	c001016 <SystemCoreClockUpdate+0x22>
  {
    /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c001006:	4b70      	ldr	r3, [pc, #448]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c001008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00100c:	0b1b      	lsrs	r3, r3, #12
 c00100e:	f003 030f 	and.w	r3, r3, #15
 c001012:	61fb      	str	r3, [r7, #28]
 c001014:	e005      	b.n	c001022 <SystemCoreClockUpdate+0x2e>
  }
  else
  {
    /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c001016:	4b6c      	ldr	r3, [pc, #432]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c001018:	689b      	ldr	r3, [r3, #8]
 c00101a:	0f1b      	lsrs	r3, r3, #28
 c00101c:	f003 030f 	and.w	r3, r3, #15
 c001020:	61fb      	str	r3, [r7, #28]
  }

  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c001022:	4a6a      	ldr	r2, [pc, #424]	@ (c0011cc <SystemCoreClockUpdate+0x1d8>)
 c001024:	69fb      	ldr	r3, [r7, #28]
 c001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00102a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c00102c:	4b66      	ldr	r3, [pc, #408]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c00102e:	69db      	ldr	r3, [r3, #28]
 c001030:	f003 030c 	and.w	r3, r3, #12
 c001034:	2b0c      	cmp	r3, #12
 c001036:	f200 80ae 	bhi.w	c001196 <SystemCoreClockUpdate+0x1a2>
 c00103a:	a201      	add	r2, pc, #4	@ (adr r2, c001040 <SystemCoreClockUpdate+0x4c>)
 c00103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001040:	0c001075 	.word	0x0c001075
 c001044:	0c001197 	.word	0x0c001197
 c001048:	0c001197 	.word	0x0c001197
 c00104c:	0c001197 	.word	0x0c001197
 c001050:	0c00107d 	.word	0x0c00107d
 c001054:	0c001197 	.word	0x0c001197
 c001058:	0c001197 	.word	0x0c001197
 c00105c:	0c001197 	.word	0x0c001197
 c001060:	0c001085 	.word	0x0c001085
 c001064:	0c001197 	.word	0x0c001197
 c001068:	0c001197 	.word	0x0c001197
 c00106c:	0c001197 	.word	0x0c001197
 c001070:	0c00108d 	.word	0x0c00108d
  {
  case 0x00:  /* MSI used as system clock source */
    SystemCoreClock = msirange;
 c001074:	4a56      	ldr	r2, [pc, #344]	@ (c0011d0 <SystemCoreClockUpdate+0x1dc>)
 c001076:	69fb      	ldr	r3, [r7, #28]
 c001078:	6013      	str	r3, [r2, #0]
    break;
 c00107a:	e090      	b.n	c00119e <SystemCoreClockUpdate+0x1aa>

  case 0x04:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 c00107c:	4b54      	ldr	r3, [pc, #336]	@ (c0011d0 <SystemCoreClockUpdate+0x1dc>)
 c00107e:	4a55      	ldr	r2, [pc, #340]	@ (c0011d4 <SystemCoreClockUpdate+0x1e0>)
 c001080:	601a      	str	r2, [r3, #0]
    break;
 c001082:	e08c      	b.n	c00119e <SystemCoreClockUpdate+0x1aa>

  case 0x08:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 c001084:	4b52      	ldr	r3, [pc, #328]	@ (c0011d0 <SystemCoreClockUpdate+0x1dc>)
 c001086:	4a53      	ldr	r2, [pc, #332]	@ (c0011d4 <SystemCoreClockUpdate+0x1e0>)
 c001088:	601a      	str	r2, [r3, #0]
    break;
 c00108a:	e088      	b.n	c00119e <SystemCoreClockUpdate+0x1aa>

  case 0x0C:  /* PLL used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c00108c:	4b4e      	ldr	r3, [pc, #312]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c00108e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001090:	f003 0303 	and.w	r3, r3, #3
 c001094:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c001096:	4b4c      	ldr	r3, [pc, #304]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c001098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00109a:	0a1b      	lsrs	r3, r3, #8
 c00109c:	f003 030f 	and.w	r3, r3, #15
 c0010a0:	3301      	adds	r3, #1
 c0010a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c0010a4:	4b48      	ldr	r3, [pc, #288]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c0010a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0010a8:	091b      	lsrs	r3, r3, #4
 c0010aa:	f003 0301 	and.w	r3, r3, #1
 c0010ae:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c0010b0:	4b45      	ldr	r3, [pc, #276]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c0010b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0010b4:	08db      	lsrs	r3, r3, #3
 c0010b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c0010ba:	68fa      	ldr	r2, [r7, #12]
 c0010bc:	fb02 f303 	mul.w	r3, r2, r3
 c0010c0:	ee07 3a90 	vmov	s15, r3
 c0010c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0010c8:	edc7 7a02 	vstr	s15, [r7, #8]

      switch (pllsource)
 c0010cc:	697b      	ldr	r3, [r7, #20]
 c0010ce:	2b03      	cmp	r3, #3
 c0010d0:	d019      	beq.n	c001106 <SystemCoreClockUpdate+0x112>
 c0010d2:	697b      	ldr	r3, [r7, #20]
 c0010d4:	2b03      	cmp	r3, #3
 c0010d6:	d822      	bhi.n	c00111e <SystemCoreClockUpdate+0x12a>
 c0010d8:	697b      	ldr	r3, [r7, #20]
 c0010da:	2b00      	cmp	r3, #0
 c0010dc:	d003      	beq.n	c0010e6 <SystemCoreClockUpdate+0xf2>
 c0010de:	697b      	ldr	r3, [r7, #20]
 c0010e0:	2b02      	cmp	r3, #2
 c0010e2:	d004      	beq.n	c0010ee <SystemCoreClockUpdate+0xfa>
 c0010e4:	e01b      	b.n	c00111e <SystemCoreClockUpdate+0x12a>
      {
      case 0x00:  /* No clock sent to PLL*/
        pllvco = (float_t)0U;
 c0010e6:	f04f 0300 	mov.w	r3, #0
 c0010ea:	61bb      	str	r3, [r7, #24]
        break;
 c0010ec:	e026      	b.n	c00113c <SystemCoreClockUpdate+0x148>

      case 0x02:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm);
 c0010ee:	693b      	ldr	r3, [r7, #16]
 c0010f0:	ee07 3a90 	vmov	s15, r3
 c0010f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0010f8:	eddf 6a37 	vldr	s13, [pc, #220]	@ c0011d8 <SystemCoreClockUpdate+0x1e4>
 c0010fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c001100:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c001104:	e01a      	b.n	c00113c <SystemCoreClockUpdate+0x148>

      case 0x03:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm);
 c001106:	693b      	ldr	r3, [r7, #16]
 c001108:	ee07 3a90 	vmov	s15, r3
 c00110c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c001110:	eddf 6a31 	vldr	s13, [pc, #196]	@ c0011d8 <SystemCoreClockUpdate+0x1e4>
 c001114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c001118:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c00111c:	e00e      	b.n	c00113c <SystemCoreClockUpdate+0x148>

      default:    /* MSI used as PLL clock source */
        pllvco = ((float_t)msirange / (float_t)pllm);
 c00111e:	69fb      	ldr	r3, [r7, #28]
 c001120:	ee07 3a90 	vmov	s15, r3
 c001124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c001128:	693b      	ldr	r3, [r7, #16]
 c00112a:	ee07 3a90 	vmov	s15, r3
 c00112e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c001132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c001136:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c00113a:	bf00      	nop
      }

      pllvco = pllvco * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + (fracn1/(float_t)0x2000) + (float_t)1U);
 c00113c:	4b22      	ldr	r3, [pc, #136]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c00113e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001144:	ee07 3a90 	vmov	s15, r3
 c001148:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c00114c:	edd7 6a02 	vldr	s13, [r7, #8]
 c001150:	ed9f 6a22 	vldr	s12, [pc, #136]	@ c0011dc <SystemCoreClockUpdate+0x1e8>
 c001154:	eec6 7a86 	vdiv.f32	s15, s13, s12
 c001158:	ee77 7a27 	vadd.f32	s15, s14, s15
 c00115c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c001160:	ee77 7a87 	vadd.f32	s15, s15, s14
 c001164:	ed97 7a06 	vldr	s14, [r7, #24]
 c001168:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00116c:	edc7 7a06 	vstr	s15, [r7, #24]
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U );
 c001170:	4b15      	ldr	r3, [pc, #84]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c001172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001174:	0e1b      	lsrs	r3, r3, #24
 c001176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00117a:	3301      	adds	r3, #1
 c00117c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (uint32_t)((uint32_t)pllvco/pllr);
 c00117e:	edd7 7a06 	vldr	s15, [r7, #24]
 c001182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c001186:	ee17 2a90 	vmov	r2, s15
 c00118a:	687b      	ldr	r3, [r7, #4]
 c00118c:	fbb2 f3f3 	udiv	r3, r2, r3
 c001190:	4a0f      	ldr	r2, [pc, #60]	@ (c0011d0 <SystemCoreClockUpdate+0x1dc>)
 c001192:	6013      	str	r3, [r2, #0]
      break;
 c001194:	e003      	b.n	c00119e <SystemCoreClockUpdate+0x1aa>

  default:
    SystemCoreClock = msirange;
 c001196:	4a0e      	ldr	r2, [pc, #56]	@ (c0011d0 <SystemCoreClockUpdate+0x1dc>)
 c001198:	69fb      	ldr	r3, [r7, #28]
 c00119a:	6013      	str	r3, [r2, #0]
    break;
 c00119c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c00119e:	4b0a      	ldr	r3, [pc, #40]	@ (c0011c8 <SystemCoreClockUpdate+0x1d4>)
 c0011a0:	6a1b      	ldr	r3, [r3, #32]
 c0011a2:	f003 030f 	and.w	r3, r3, #15
 c0011a6:	4a0e      	ldr	r2, [pc, #56]	@ (c0011e0 <SystemCoreClockUpdate+0x1ec>)
 c0011a8:	5cd3      	ldrb	r3, [r2, r3]
 c0011aa:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c0011ac:	4b08      	ldr	r3, [pc, #32]	@ (c0011d0 <SystemCoreClockUpdate+0x1dc>)
 c0011ae:	681a      	ldr	r2, [r3, #0]
 c0011b0:	683b      	ldr	r3, [r7, #0]
 c0011b2:	fa22 f303 	lsr.w	r3, r2, r3
 c0011b6:	4a06      	ldr	r2, [pc, #24]	@ (c0011d0 <SystemCoreClockUpdate+0x1dc>)
 c0011b8:	6013      	str	r3, [r2, #0]
}
 c0011ba:	bf00      	nop
 c0011bc:	3724      	adds	r7, #36	@ 0x24
 c0011be:	46bd      	mov	sp, r7
 c0011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011c4:	4770      	bx	lr
 c0011c6:	bf00      	nop
 c0011c8:	56020c00 	.word	0x56020c00
 c0011cc:	0c004a6c 	.word	0x0c004a6c
 c0011d0:	30000000 	.word	0x30000000
 c0011d4:	00f42400 	.word	0x00f42400
 c0011d8:	4b742400 	.word	0x4b742400
 c0011dc:	46000000 	.word	0x46000000
 c0011e0:	0c004a5c 	.word	0x0c004a5c

0c0011e4 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c0011e4:	b580      	push	{r7, lr}
 c0011e6:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c0011e8:	f7ff ff04 	bl	c000ff4 <SystemCoreClockUpdate>

  return SystemCoreClock;
 c0011ec:	4b1c      	ldr	r3, [pc, #112]	@ (c001260 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0011ee:	681b      	ldr	r3, [r3, #0]
}
 c0011f0:	4618      	mov	r0, r3
 c0011f2:	46bd      	mov	sp, r7
 c0011f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0011f8:	4671      	mov	r1, lr
 c0011fa:	4672      	mov	r2, lr
 c0011fc:	4673      	mov	r3, lr
 c0011fe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001202:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001206:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c00120a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c00120e:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001212:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001216:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c00121a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c00121e:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001222:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c001226:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c00122a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c00122e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001236:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00123a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c00123e:	f38e 8c00 	msr	CPSR_fs, lr
 c001242:	b410      	push	{r4}
 c001244:	eef1 ca10 	vmrs	ip, fpscr
 c001248:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c00124c:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c001250:	ea0c 0c04 	and.w	ip, ip, r4
 c001254:	eee1 ca10 	vmsr	fpscr, ip
 c001258:	bc10      	pop	{r4}
 c00125a:	46f4      	mov	ip, lr
 c00125c:	4774      	bxns	lr
 c00125e:	bf00      	nop
 c001260:	30000000 	.word	0x30000000

0c001264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001264:	f8df d034 	ldr.w	sp, [pc, #52]	@ c00129c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 c001268:	f7ff fe84 	bl	c000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c00126c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00126e:	e003      	b.n	c001278 <LoopCopyDataInit>

0c001270 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001270:	4b0b      	ldr	r3, [pc, #44]	@ (c0012a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c001272:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001274:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c001276:	3104      	adds	r1, #4

0c001278 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001278:	480a      	ldr	r0, [pc, #40]	@ (c0012a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 c00127a:	4b0b      	ldr	r3, [pc, #44]	@ (c0012a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 c00127c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c00127e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001280:	d3f6      	bcc.n	c001270 <CopyDataInit>
	ldr	r2, =_sbss
 c001282:	4a0a      	ldr	r2, [pc, #40]	@ (c0012ac <LoopForever+0x12>)
	b	LoopFillZerobss
 c001284:	e002      	b.n	c00128c <LoopFillZerobss>

0c001286 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c001286:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001288:	f842 3b04 	str.w	r3, [r2], #4

0c00128c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c00128c:	4b08      	ldr	r3, [pc, #32]	@ (c0012b0 <LoopForever+0x16>)
	cmp	r2, r3
 c00128e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001290:	d3f9      	bcc.n	c001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 c001292:	f003 fbb3 	bl	c0049fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001296:	f7ff f81d 	bl	c0002d4 <main>

0c00129a <LoopForever>:

LoopForever:
    b LoopForever
 c00129a:	e7fe      	b.n	c00129a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c00129c:	30040000 	.word	0x30040000
	ldr	r3, =_sidata
 c0012a0:	0c004b34 	.word	0x0c004b34
	ldr	r0, =_sdata
 c0012a4:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c0012a8:	30000009 	.word	0x30000009
	ldr	r2, =_sbss
 c0012ac:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c0012b0:	300000f0 	.word	0x300000f0

0c0012b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0012b4:	e7fe      	b.n	c0012b4 <ADC1_IRQHandler>
	...

0c0012b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0012b8:	b580      	push	{r7, lr}
 c0012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 c0012bc:	4b12      	ldr	r3, [pc, #72]	@ (c001308 <HAL_Init+0x50>)
 c0012be:	681b      	ldr	r3, [r3, #0]
 c0012c0:	4a11      	ldr	r2, [pc, #68]	@ (c001308 <HAL_Init+0x50>)
 c0012c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c0012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c0012c8:	2003      	movs	r0, #3
 c0012ca:	f000 f94a 	bl	c001562 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c0012ce:	f002 fadb 	bl	c003888 <HAL_RCC_GetSysClockFreq>
 c0012d2:	4602      	mov	r2, r0
 c0012d4:	4b0d      	ldr	r3, [pc, #52]	@ (c00130c <HAL_Init+0x54>)
 c0012d6:	6a1b      	ldr	r3, [r3, #32]
 c0012d8:	f003 030f 	and.w	r3, r3, #15
 c0012dc:	490c      	ldr	r1, [pc, #48]	@ (c001310 <HAL_Init+0x58>)
 c0012de:	5ccb      	ldrb	r3, [r1, r3]
 c0012e0:	fa22 f303 	lsr.w	r3, r2, r3
 c0012e4:	4a0b      	ldr	r2, [pc, #44]	@ (c001314 <HAL_Init+0x5c>)
 c0012e6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 c0012e8:	2004      	movs	r0, #4
 c0012ea:	f000 f981 	bl	c0015f0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0012ee:	2000      	movs	r0, #0
 c0012f0:	f000 f812 	bl	c001318 <HAL_InitTick>
 c0012f4:	4603      	mov	r3, r0
 c0012f6:	2b00      	cmp	r3, #0
 c0012f8:	d001      	beq.n	c0012fe <HAL_Init+0x46>
  {
    return HAL_ERROR;
 c0012fa:	2301      	movs	r3, #1
 c0012fc:	e002      	b.n	c001304 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c0012fe:	f7ff fd05 	bl	c000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c001302:	2300      	movs	r3, #0
}
 c001304:	4618      	mov	r0, r3
 c001306:	bd80      	pop	{r7, pc}
 c001308:	50022000 	.word	0x50022000
 c00130c:	56020c00 	.word	0x56020c00
 c001310:	0c004a5c 	.word	0x0c004a5c
 c001314:	30000000 	.word	0x30000000

0c001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001318:	b580      	push	{r7, lr}
 c00131a:	b084      	sub	sp, #16
 c00131c:	af00      	add	r7, sp, #0
 c00131e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 c001320:	2300      	movs	r3, #0
 c001322:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c001324:	4b33      	ldr	r3, [pc, #204]	@ (c0013f4 <HAL_InitTick+0xdc>)
 c001326:	781b      	ldrb	r3, [r3, #0]
 c001328:	2b00      	cmp	r3, #0
 c00132a:	d101      	bne.n	c001330 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 c00132c:	2301      	movs	r3, #1
 c00132e:	e05c      	b.n	c0013ea <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 c001330:	4b31      	ldr	r3, [pc, #196]	@ (c0013f8 <HAL_InitTick+0xe0>)
 c001332:	681b      	ldr	r3, [r3, #0]
 c001334:	f003 0304 	and.w	r3, r3, #4
 c001338:	2b04      	cmp	r3, #4
 c00133a:	d10c      	bne.n	c001356 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 c00133c:	4b2f      	ldr	r3, [pc, #188]	@ (c0013fc <HAL_InitTick+0xe4>)
 c00133e:	681a      	ldr	r2, [r3, #0]
 c001340:	4b2c      	ldr	r3, [pc, #176]	@ (c0013f4 <HAL_InitTick+0xdc>)
 c001342:	781b      	ldrb	r3, [r3, #0]
 c001344:	4619      	mov	r1, r3
 c001346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c00134a:	fbb3 f3f1 	udiv	r3, r3, r1
 c00134e:	fbb2 f3f3 	udiv	r3, r2, r3
 c001352:	60fb      	str	r3, [r7, #12]
 c001354:	e037      	b.n	c0013c6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 c001356:	f000 f9a3 	bl	c0016a0 <HAL_SYSTICK_GetCLKSourceConfig>
 c00135a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 c00135c:	68bb      	ldr	r3, [r7, #8]
 c00135e:	2b02      	cmp	r3, #2
 c001360:	d023      	beq.n	c0013aa <HAL_InitTick+0x92>
 c001362:	68bb      	ldr	r3, [r7, #8]
 c001364:	2b02      	cmp	r3, #2
 c001366:	d82d      	bhi.n	c0013c4 <HAL_InitTick+0xac>
 c001368:	68bb      	ldr	r3, [r7, #8]
 c00136a:	2b00      	cmp	r3, #0
 c00136c:	d003      	beq.n	c001376 <HAL_InitTick+0x5e>
 c00136e:	68bb      	ldr	r3, [r7, #8]
 c001370:	2b01      	cmp	r3, #1
 c001372:	d00d      	beq.n	c001390 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 c001374:	e026      	b.n	c0013c4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 c001376:	4b21      	ldr	r3, [pc, #132]	@ (c0013fc <HAL_InitTick+0xe4>)
 c001378:	681a      	ldr	r2, [r3, #0]
 c00137a:	4b1e      	ldr	r3, [pc, #120]	@ (c0013f4 <HAL_InitTick+0xdc>)
 c00137c:	781b      	ldrb	r3, [r3, #0]
 c00137e:	4619      	mov	r1, r3
 c001380:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 c001384:	fbb3 f3f1 	udiv	r3, r3, r1
 c001388:	fbb2 f3f3 	udiv	r3, r2, r3
 c00138c:	60fb      	str	r3, [r7, #12]
        break;
 c00138e:	e01a      	b.n	c0013c6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c001390:	4b18      	ldr	r3, [pc, #96]	@ (c0013f4 <HAL_InitTick+0xdc>)
 c001392:	781b      	ldrb	r3, [r3, #0]
 c001394:	461a      	mov	r2, r3
 c001396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c00139a:	fbb3 f3f2 	udiv	r3, r3, r2
 c00139e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 c0013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0013a6:	60fb      	str	r3, [r7, #12]
        break;
 c0013a8:	e00d      	b.n	c0013c6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c0013aa:	4b12      	ldr	r3, [pc, #72]	@ (c0013f4 <HAL_InitTick+0xdc>)
 c0013ac:	781b      	ldrb	r3, [r3, #0]
 c0013ae:	461a      	mov	r2, r3
 c0013b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c0013b4:	fbb3 f3f2 	udiv	r3, r3, r2
 c0013b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 c0013bc:	fbb2 f3f3 	udiv	r3, r2, r3
 c0013c0:	60fb      	str	r3, [r7, #12]
        break;
 c0013c2:	e000      	b.n	c0013c6 <HAL_InitTick+0xae>
        break;
 c0013c4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 c0013c6:	68f8      	ldr	r0, [r7, #12]
 c0013c8:	f000 f8f0 	bl	c0015ac <HAL_SYSTICK_Config>
 c0013cc:	4603      	mov	r3, r0
 c0013ce:	2b00      	cmp	r3, #0
 c0013d0:	d001      	beq.n	c0013d6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 c0013d2:	2301      	movs	r3, #1
 c0013d4:	e009      	b.n	c0013ea <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c0013d6:	2200      	movs	r2, #0
 c0013d8:	6879      	ldr	r1, [r7, #4]
 c0013da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c0013de:	f000 f8cb 	bl	c001578 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 c0013e2:	4a07      	ldr	r2, [pc, #28]	@ (c001400 <HAL_InitTick+0xe8>)
 c0013e4:	687b      	ldr	r3, [r7, #4]
 c0013e6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 c0013e8:	2300      	movs	r3, #0
}
 c0013ea:	4618      	mov	r0, r3
 c0013ec:	3710      	adds	r7, #16
 c0013ee:	46bd      	mov	sp, r7
 c0013f0:	bd80      	pop	{r7, pc}
 c0013f2:	bf00      	nop
 c0013f4:	30000008 	.word	0x30000008
 c0013f8:	e000e010 	.word	0xe000e010
 c0013fc:	30000000 	.word	0x30000000
 c001400:	30000004 	.word	0x30000004

0c001404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001404:	b480      	push	{r7}
 c001406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c001408:	4b06      	ldr	r3, [pc, #24]	@ (c001424 <HAL_IncTick+0x20>)
 c00140a:	781b      	ldrb	r3, [r3, #0]
 c00140c:	461a      	mov	r2, r3
 c00140e:	4b06      	ldr	r3, [pc, #24]	@ (c001428 <HAL_IncTick+0x24>)
 c001410:	681b      	ldr	r3, [r3, #0]
 c001412:	4413      	add	r3, r2
 c001414:	4a04      	ldr	r2, [pc, #16]	@ (c001428 <HAL_IncTick+0x24>)
 c001416:	6013      	str	r3, [r2, #0]
}
 c001418:	bf00      	nop
 c00141a:	46bd      	mov	sp, r7
 c00141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001420:	4770      	bx	lr
 c001422:	bf00      	nop
 c001424:	30000008 	.word	0x30000008
 c001428:	300000ec 	.word	0x300000ec

0c00142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c00142c:	b480      	push	{r7}
 c00142e:	af00      	add	r7, sp, #0
  return uwTick;
 c001430:	4b03      	ldr	r3, [pc, #12]	@ (c001440 <HAL_GetTick+0x14>)
 c001432:	681b      	ldr	r3, [r3, #0]
}
 c001434:	4618      	mov	r0, r3
 c001436:	46bd      	mov	sp, r7
 c001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00143c:	4770      	bx	lr
 c00143e:	bf00      	nop
 c001440:	300000ec 	.word	0x300000ec

0c001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001444:	b480      	push	{r7}
 c001446:	b085      	sub	sp, #20
 c001448:	af00      	add	r7, sp, #0
 c00144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c00144c:	687b      	ldr	r3, [r7, #4]
 c00144e:	f003 0307 	and.w	r3, r3, #7
 c001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001454:	4b0c      	ldr	r3, [pc, #48]	@ (c001488 <__NVIC_SetPriorityGrouping+0x44>)
 c001456:	68db      	ldr	r3, [r3, #12]
 c001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c00145a:	68ba      	ldr	r2, [r7, #8]
 c00145c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 c001460:	4013      	ands	r3, r2
 c001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001464:	68fb      	ldr	r3, [r7, #12]
 c001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001468:	68bb      	ldr	r3, [r7, #8]
 c00146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c00146c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 c001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c001476:	4a04      	ldr	r2, [pc, #16]	@ (c001488 <__NVIC_SetPriorityGrouping+0x44>)
 c001478:	68bb      	ldr	r3, [r7, #8]
 c00147a:	60d3      	str	r3, [r2, #12]
}
 c00147c:	bf00      	nop
 c00147e:	3714      	adds	r7, #20
 c001480:	46bd      	mov	sp, r7
 c001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001486:	4770      	bx	lr
 c001488:	e000ed00 	.word	0xe000ed00

0c00148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c00148c:	b480      	push	{r7}
 c00148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001490:	4b04      	ldr	r3, [pc, #16]	@ (c0014a4 <__NVIC_GetPriorityGrouping+0x18>)
 c001492:	68db      	ldr	r3, [r3, #12]
 c001494:	0a1b      	lsrs	r3, r3, #8
 c001496:	f003 0307 	and.w	r3, r3, #7
}
 c00149a:	4618      	mov	r0, r3
 c00149c:	46bd      	mov	sp, r7
 c00149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014a2:	4770      	bx	lr
 c0014a4:	e000ed00 	.word	0xe000ed00

0c0014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c0014a8:	b480      	push	{r7}
 c0014aa:	b083      	sub	sp, #12
 c0014ac:	af00      	add	r7, sp, #0
 c0014ae:	4603      	mov	r3, r0
 c0014b0:	6039      	str	r1, [r7, #0]
 c0014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0014b8:	2b00      	cmp	r3, #0
 c0014ba:	db0a      	blt.n	c0014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0014bc:	683b      	ldr	r3, [r7, #0]
 c0014be:	b2da      	uxtb	r2, r3
 c0014c0:	490c      	ldr	r1, [pc, #48]	@ (c0014f4 <__NVIC_SetPriority+0x4c>)
 c0014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0014c6:	0112      	lsls	r2, r2, #4
 c0014c8:	b2d2      	uxtb	r2, r2
 c0014ca:	440b      	add	r3, r1
 c0014cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0014d0:	e00a      	b.n	c0014e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0014d2:	683b      	ldr	r3, [r7, #0]
 c0014d4:	b2da      	uxtb	r2, r3
 c0014d6:	4908      	ldr	r1, [pc, #32]	@ (c0014f8 <__NVIC_SetPriority+0x50>)
 c0014d8:	79fb      	ldrb	r3, [r7, #7]
 c0014da:	f003 030f 	and.w	r3, r3, #15
 c0014de:	3b04      	subs	r3, #4
 c0014e0:	0112      	lsls	r2, r2, #4
 c0014e2:	b2d2      	uxtb	r2, r2
 c0014e4:	440b      	add	r3, r1
 c0014e6:	761a      	strb	r2, [r3, #24]
}
 c0014e8:	bf00      	nop
 c0014ea:	370c      	adds	r7, #12
 c0014ec:	46bd      	mov	sp, r7
 c0014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014f2:	4770      	bx	lr
 c0014f4:	e000e100 	.word	0xe000e100
 c0014f8:	e000ed00 	.word	0xe000ed00

0c0014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0014fc:	b480      	push	{r7}
 c0014fe:	b089      	sub	sp, #36	@ 0x24
 c001500:	af00      	add	r7, sp, #0
 c001502:	60f8      	str	r0, [r7, #12]
 c001504:	60b9      	str	r1, [r7, #8]
 c001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001508:	68fb      	ldr	r3, [r7, #12]
 c00150a:	f003 0307 	and.w	r3, r3, #7
 c00150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001510:	69fb      	ldr	r3, [r7, #28]
 c001512:	f1c3 0307 	rsb	r3, r3, #7
 c001516:	2b04      	cmp	r3, #4
 c001518:	bf28      	it	cs
 c00151a:	2304      	movcs	r3, #4
 c00151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c00151e:	69fb      	ldr	r3, [r7, #28]
 c001520:	3304      	adds	r3, #4
 c001522:	2b06      	cmp	r3, #6
 c001524:	d902      	bls.n	c00152c <NVIC_EncodePriority+0x30>
 c001526:	69fb      	ldr	r3, [r7, #28]
 c001528:	3b03      	subs	r3, #3
 c00152a:	e000      	b.n	c00152e <NVIC_EncodePriority+0x32>
 c00152c:	2300      	movs	r3, #0
 c00152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c001534:	69bb      	ldr	r3, [r7, #24]
 c001536:	fa02 f303 	lsl.w	r3, r2, r3
 c00153a:	43da      	mvns	r2, r3
 c00153c:	68bb      	ldr	r3, [r7, #8]
 c00153e:	401a      	ands	r2, r3
 c001540:	697b      	ldr	r3, [r7, #20]
 c001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001544:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 c001548:	697b      	ldr	r3, [r7, #20]
 c00154a:	fa01 f303 	lsl.w	r3, r1, r3
 c00154e:	43d9      	mvns	r1, r3
 c001550:	687b      	ldr	r3, [r7, #4]
 c001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001554:	4313      	orrs	r3, r2
         );
}
 c001556:	4618      	mov	r0, r3
 c001558:	3724      	adds	r7, #36	@ 0x24
 c00155a:	46bd      	mov	sp, r7
 c00155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001560:	4770      	bx	lr

0c001562 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001562:	b580      	push	{r7, lr}
 c001564:	b082      	sub	sp, #8
 c001566:	af00      	add	r7, sp, #0
 c001568:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c00156a:	6878      	ldr	r0, [r7, #4]
 c00156c:	f7ff ff6a 	bl	c001444 <__NVIC_SetPriorityGrouping>
}
 c001570:	bf00      	nop
 c001572:	3708      	adds	r7, #8
 c001574:	46bd      	mov	sp, r7
 c001576:	bd80      	pop	{r7, pc}

0c001578 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001578:	b580      	push	{r7, lr}
 c00157a:	b086      	sub	sp, #24
 c00157c:	af00      	add	r7, sp, #0
 c00157e:	4603      	mov	r3, r0
 c001580:	60b9      	str	r1, [r7, #8]
 c001582:	607a      	str	r2, [r7, #4]
 c001584:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001586:	f7ff ff81 	bl	c00148c <__NVIC_GetPriorityGrouping>
 c00158a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00158c:	687a      	ldr	r2, [r7, #4]
 c00158e:	68b9      	ldr	r1, [r7, #8]
 c001590:	6978      	ldr	r0, [r7, #20]
 c001592:	f7ff ffb3 	bl	c0014fc <NVIC_EncodePriority>
 c001596:	4602      	mov	r2, r0
 c001598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00159c:	4611      	mov	r1, r2
 c00159e:	4618      	mov	r0, r3
 c0015a0:	f7ff ff82 	bl	c0014a8 <__NVIC_SetPriority>
}
 c0015a4:	bf00      	nop
 c0015a6:	3718      	adds	r7, #24
 c0015a8:	46bd      	mov	sp, r7
 c0015aa:	bd80      	pop	{r7, pc}

0c0015ac <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0015ac:	b480      	push	{r7}
 c0015ae:	b083      	sub	sp, #12
 c0015b0:	af00      	add	r7, sp, #0
 c0015b2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0015b4:	687b      	ldr	r3, [r7, #4]
 c0015b6:	3b01      	subs	r3, #1
 c0015b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c0015bc:	d301      	bcc.n	c0015c2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 c0015be:	2301      	movs	r3, #1
 c0015c0:	e00d      	b.n	c0015de <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 c0015c2:	4a0a      	ldr	r2, [pc, #40]	@ (c0015ec <HAL_SYSTICK_Config+0x40>)
 c0015c4:	687b      	ldr	r3, [r7, #4]
 c0015c6:	3b01      	subs	r3, #1
 c0015c8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 c0015ca:	4b08      	ldr	r3, [pc, #32]	@ (c0015ec <HAL_SYSTICK_Config+0x40>)
 c0015cc:	2200      	movs	r2, #0
 c0015ce:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 c0015d0:	4b06      	ldr	r3, [pc, #24]	@ (c0015ec <HAL_SYSTICK_Config+0x40>)
 c0015d2:	681b      	ldr	r3, [r3, #0]
 c0015d4:	4a05      	ldr	r2, [pc, #20]	@ (c0015ec <HAL_SYSTICK_Config+0x40>)
 c0015d6:	f043 0303 	orr.w	r3, r3, #3
 c0015da:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 c0015dc:	2300      	movs	r3, #0
}
 c0015de:	4618      	mov	r0, r3
 c0015e0:	370c      	adds	r7, #12
 c0015e2:	46bd      	mov	sp, r7
 c0015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015e8:	4770      	bx	lr
 c0015ea:	bf00      	nop
 c0015ec:	e000e010 	.word	0xe000e010

0c0015f0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 c0015f0:	b480      	push	{r7}
 c0015f2:	b083      	sub	sp, #12
 c0015f4:	af00      	add	r7, sp, #0
 c0015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 c0015f8:	687b      	ldr	r3, [r7, #4]
 c0015fa:	2b04      	cmp	r3, #4
 c0015fc:	d844      	bhi.n	c001688 <HAL_SYSTICK_CLKSourceConfig+0x98>
 c0015fe:	a201      	add	r2, pc, #4	@ (adr r2, c001604 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 c001600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001604:	0c001627 	.word	0x0c001627
 c001608:	0c001645 	.word	0x0c001645
 c00160c:	0c001667 	.word	0x0c001667
 c001610:	0c001689 	.word	0x0c001689
 c001614:	0c001619 	.word	0x0c001619
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c001618:	4b1f      	ldr	r3, [pc, #124]	@ (c001698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00161a:	681b      	ldr	r3, [r3, #0]
 c00161c:	4a1e      	ldr	r2, [pc, #120]	@ (c001698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00161e:	f043 0304 	orr.w	r3, r3, #4
 c001622:	6013      	str	r3, [r2, #0]
      break;
 c001624:	e031      	b.n	c00168a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c001626:	4b1c      	ldr	r3, [pc, #112]	@ (c001698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001628:	681b      	ldr	r3, [r3, #0]
 c00162a:	4a1b      	ldr	r2, [pc, #108]	@ (c001698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00162c:	f023 0304 	bic.w	r3, r3, #4
 c001630:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 c001632:	4b1a      	ldr	r3, [pc, #104]	@ (c00169c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c001638:	4a18      	ldr	r2, [pc, #96]	@ (c00169c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00163a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c00163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c001642:	e022      	b.n	c00168a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c001644:	4b14      	ldr	r3, [pc, #80]	@ (c001698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001646:	681b      	ldr	r3, [r3, #0]
 c001648:	4a13      	ldr	r2, [pc, #76]	@ (c001698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00164a:	f023 0304 	bic.w	r3, r3, #4
 c00164e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 c001650:	4b12      	ldr	r3, [pc, #72]	@ (c00169c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c001656:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c00165a:	4a10      	ldr	r2, [pc, #64]	@ (c00169c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00165c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 c001660:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c001664:	e011      	b.n	c00168a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c001666:	4b0c      	ldr	r3, [pc, #48]	@ (c001698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001668:	681b      	ldr	r3, [r3, #0]
 c00166a:	4a0b      	ldr	r2, [pc, #44]	@ (c001698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00166c:	f023 0304 	bic.w	r3, r3, #4
 c001670:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 c001672:	4b0a      	ldr	r3, [pc, #40]	@ (c00169c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c001678:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c00167c:	4a07      	ldr	r2, [pc, #28]	@ (c00169c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00167e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c001682:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c001686:	e000      	b.n	c00168a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 c001688:	bf00      	nop
  }
}
 c00168a:	bf00      	nop
 c00168c:	370c      	adds	r7, #12
 c00168e:	46bd      	mov	sp, r7
 c001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001694:	4770      	bx	lr
 c001696:	bf00      	nop
 c001698:	e000e010 	.word	0xe000e010
 c00169c:	56020c00 	.word	0x56020c00

0c0016a0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 c0016a0:	b480      	push	{r7}
 c0016a2:	b083      	sub	sp, #12
 c0016a4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 c0016a6:	4b19      	ldr	r3, [pc, #100]	@ (c00170c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 c0016a8:	681b      	ldr	r3, [r3, #0]
 c0016aa:	f003 0304 	and.w	r3, r3, #4
 c0016ae:	2b00      	cmp	r3, #0
 c0016b0:	d002      	beq.n	c0016b8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 c0016b2:	2304      	movs	r3, #4
 c0016b4:	607b      	str	r3, [r7, #4]
 c0016b6:	e021      	b.n	c0016fc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 c0016b8:	4b15      	ldr	r3, [pc, #84]	@ (c001710 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 c0016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0016be:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 c0016c2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 c0016c4:	683b      	ldr	r3, [r7, #0]
 c0016c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c0016ca:	d011      	beq.n	c0016f0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 c0016cc:	683b      	ldr	r3, [r7, #0]
 c0016ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c0016d2:	d810      	bhi.n	c0016f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 c0016d4:	683b      	ldr	r3, [r7, #0]
 c0016d6:	2b00      	cmp	r3, #0
 c0016d8:	d004      	beq.n	c0016e4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 c0016da:	683b      	ldr	r3, [r7, #0]
 c0016dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 c0016e0:	d003      	beq.n	c0016ea <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 c0016e2:	e008      	b.n	c0016f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c0016e4:	2300      	movs	r3, #0
 c0016e6:	607b      	str	r3, [r7, #4]
        break;
 c0016e8:	e008      	b.n	c0016fc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 c0016ea:	2301      	movs	r3, #1
 c0016ec:	607b      	str	r3, [r7, #4]
        break;
 c0016ee:	e005      	b.n	c0016fc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 c0016f0:	2302      	movs	r3, #2
 c0016f2:	607b      	str	r3, [r7, #4]
        break;
 c0016f4:	e002      	b.n	c0016fc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c0016f6:	2300      	movs	r3, #0
 c0016f8:	607b      	str	r3, [r7, #4]
        break;
 c0016fa:	bf00      	nop
    }
  }
  return systick_source;
 c0016fc:	687b      	ldr	r3, [r7, #4]
}
 c0016fe:	4618      	mov	r0, r3
 c001700:	370c      	adds	r7, #12
 c001702:	46bd      	mov	sp, r7
 c001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001708:	4770      	bx	lr
 c00170a:	bf00      	nop
 c00170c:	e000e010 	.word	0xe000e010
 c001710:	56020c00 	.word	0x56020c00

0c001714 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 c001714:	b580      	push	{r7, lr}
 c001716:	b084      	sub	sp, #16
 c001718:	af00      	add	r7, sp, #0
 c00171a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 c00171c:	f7ff fe86 	bl	c00142c <HAL_GetTick>
 c001720:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 c001722:	687b      	ldr	r3, [r7, #4]
 c001724:	2b00      	cmp	r3, #0
 c001726:	d101      	bne.n	c00172c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 c001728:	2301      	movs	r3, #1
 c00172a:	e06b      	b.n	c001804 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 c00172c:	687b      	ldr	r3, [r7, #4]
 c00172e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 c001732:	b2db      	uxtb	r3, r3
 c001734:	2b02      	cmp	r3, #2
 c001736:	d008      	beq.n	c00174a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 c001738:	687b      	ldr	r3, [r7, #4]
 c00173a:	2220      	movs	r2, #32
 c00173c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c00173e:	687b      	ldr	r3, [r7, #4]
 c001740:	2200      	movs	r2, #0
 c001742:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 c001746:	2301      	movs	r3, #1
 c001748:	e05c      	b.n	c001804 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 c00174a:	687b      	ldr	r3, [r7, #4]
 c00174c:	681b      	ldr	r3, [r3, #0]
 c00174e:	695a      	ldr	r2, [r3, #20]
 c001750:	687b      	ldr	r3, [r7, #4]
 c001752:	681b      	ldr	r3, [r3, #0]
 c001754:	f042 0204 	orr.w	r2, r2, #4
 c001758:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 c00175a:	687b      	ldr	r3, [r7, #4]
 c00175c:	2205      	movs	r2, #5
 c00175e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 c001762:	e020      	b.n	c0017a6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 c001764:	f7ff fe62 	bl	c00142c <HAL_GetTick>
 c001768:	4602      	mov	r2, r0
 c00176a:	68fb      	ldr	r3, [r7, #12]
 c00176c:	1ad3      	subs	r3, r2, r3
 c00176e:	2b05      	cmp	r3, #5
 c001770:	d919      	bls.n	c0017a6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 c001772:	687b      	ldr	r3, [r7, #4]
 c001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c001776:	f043 0210 	orr.w	r2, r3, #16
 c00177a:	687b      	ldr	r3, [r7, #4]
 c00177c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 c00177e:	687b      	ldr	r3, [r7, #4]
 c001780:	2203      	movs	r2, #3
 c001782:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 c001786:	687b      	ldr	r3, [r7, #4]
 c001788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c00178a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c00178e:	2b00      	cmp	r3, #0
 c001790:	d003      	beq.n	c00179a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 c001792:	687b      	ldr	r3, [r7, #4]
 c001794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c001796:	2201      	movs	r2, #1
 c001798:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 c00179a:	687b      	ldr	r3, [r7, #4]
 c00179c:	2200      	movs	r2, #0
 c00179e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 c0017a2:	2301      	movs	r3, #1
 c0017a4:	e02e      	b.n	c001804 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 c0017a6:	687b      	ldr	r3, [r7, #4]
 c0017a8:	681b      	ldr	r3, [r3, #0]
 c0017aa:	691b      	ldr	r3, [r3, #16]
 c0017ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c0017b0:	2b00      	cmp	r3, #0
 c0017b2:	d0d7      	beq.n	c001764 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 c0017b4:	687b      	ldr	r3, [r7, #4]
 c0017b6:	681b      	ldr	r3, [r3, #0]
 c0017b8:	695a      	ldr	r2, [r3, #20]
 c0017ba:	687b      	ldr	r3, [r7, #4]
 c0017bc:	681b      	ldr	r3, [r3, #0]
 c0017be:	f042 0202 	orr.w	r2, r2, #2
 c0017c2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 c0017c4:	687b      	ldr	r3, [r7, #4]
 c0017c6:	2204      	movs	r2, #4
 c0017c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 c0017cc:	687b      	ldr	r3, [r7, #4]
 c0017ce:	681b      	ldr	r3, [r3, #0]
 c0017d0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 c0017d4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 c0017d6:	687b      	ldr	r3, [r7, #4]
 c0017d8:	2201      	movs	r2, #1
 c0017da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 c0017de:	687b      	ldr	r3, [r7, #4]
 c0017e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c0017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c0017e6:	2b00      	cmp	r3, #0
 c0017e8:	d007      	beq.n	c0017fa <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 c0017ea:	687b      	ldr	r3, [r7, #4]
 c0017ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c0017ee:	2201      	movs	r2, #1
 c0017f0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 c0017f2:	687b      	ldr	r3, [r7, #4]
 c0017f4:	681b      	ldr	r3, [r3, #0]
 c0017f6:	2200      	movs	r2, #0
 c0017f8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c0017fa:	687b      	ldr	r3, [r7, #4]
 c0017fc:	2200      	movs	r2, #0
 c0017fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 c001802:	2300      	movs	r3, #0
}
 c001804:	4618      	mov	r0, r3
 c001806:	3710      	adds	r7, #16
 c001808:	46bd      	mov	sp, r7
 c00180a:	bd80      	pop	{r7, pc}

0c00180c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c00180c:	b480      	push	{r7}
 c00180e:	b089      	sub	sp, #36	@ 0x24
 c001810:	af00      	add	r7, sp, #0
 c001812:	6078      	str	r0, [r7, #4]
 c001814:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 c001816:	2300      	movs	r3, #0
 c001818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 c00181a:	687b      	ldr	r3, [r7, #4]
 c00181c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c00181e:	e1c2      	b.n	c001ba6 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c001820:	683b      	ldr	r3, [r7, #0]
 c001822:	681a      	ldr	r2, [r3, #0]
 c001824:	2101      	movs	r1, #1
 c001826:	697b      	ldr	r3, [r7, #20]
 c001828:	fa01 f303 	lsl.w	r3, r1, r3
 c00182c:	4013      	ands	r3, r2
 c00182e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 c001830:	697b      	ldr	r3, [r7, #20]
 c001832:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 c001834:	68fb      	ldr	r3, [r7, #12]
 c001836:	2b00      	cmp	r3, #0
 c001838:	f000 81b2 	beq.w	c001ba0 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 c00183c:	687b      	ldr	r3, [r7, #4]
 c00183e:	4a55      	ldr	r2, [pc, #340]	@ (c001994 <HAL_GPIO_Init+0x188>)
 c001840:	4293      	cmp	r3, r2
 c001842:	d15d      	bne.n	c001900 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 c001844:	687b      	ldr	r3, [r7, #4]
 c001846:	681b      	ldr	r3, [r3, #0]
 c001848:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 c00184a:	2201      	movs	r2, #1
 c00184c:	697b      	ldr	r3, [r7, #20]
 c00184e:	fa02 f303 	lsl.w	r3, r2, r3
 c001852:	43db      	mvns	r3, r3
 c001854:	69fa      	ldr	r2, [r7, #28]
 c001856:	4013      	ands	r3, r2
 c001858:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 c00185a:	683b      	ldr	r3, [r7, #0]
 c00185c:	685b      	ldr	r3, [r3, #4]
 c00185e:	f003 0201 	and.w	r2, r3, #1
 c001862:	697b      	ldr	r3, [r7, #20]
 c001864:	fa02 f303 	lsl.w	r3, r2, r3
 c001868:	69fa      	ldr	r2, [r7, #28]
 c00186a:	4313      	orrs	r3, r2
 c00186c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 c00186e:	687b      	ldr	r3, [r7, #4]
 c001870:	69fa      	ldr	r2, [r7, #28]
 c001872:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 c001874:	4a48      	ldr	r2, [pc, #288]	@ (c001998 <HAL_GPIO_Init+0x18c>)
 c001876:	697b      	ldr	r3, [r7, #20]
 c001878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 c00187c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 c00187e:	4a46      	ldr	r2, [pc, #280]	@ (c001998 <HAL_GPIO_Init+0x18c>)
 c001880:	697b      	ldr	r3, [r7, #20]
 c001882:	00db      	lsls	r3, r3, #3
 c001884:	4413      	add	r3, r2
 c001886:	685b      	ldr	r3, [r3, #4]
 c001888:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 c00188a:	69bb      	ldr	r3, [r7, #24]
 c00188c:	08da      	lsrs	r2, r3, #3
 c00188e:	693b      	ldr	r3, [r7, #16]
 c001890:	3208      	adds	r2, #8
 c001892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001896:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 c001898:	69bb      	ldr	r3, [r7, #24]
 c00189a:	f003 0307 	and.w	r3, r3, #7
 c00189e:	009b      	lsls	r3, r3, #2
 c0018a0:	220f      	movs	r2, #15
 c0018a2:	fa02 f303 	lsl.w	r3, r2, r3
 c0018a6:	43db      	mvns	r3, r3
 c0018a8:	69fa      	ldr	r2, [r7, #28]
 c0018aa:	4013      	ands	r3, r2
 c0018ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 c0018ae:	69bb      	ldr	r3, [r7, #24]
 c0018b0:	f003 0307 	and.w	r3, r3, #7
 c0018b4:	009b      	lsls	r3, r3, #2
 c0018b6:	220b      	movs	r2, #11
 c0018b8:	fa02 f303 	lsl.w	r3, r2, r3
 c0018bc:	69fa      	ldr	r2, [r7, #28]
 c0018be:	4313      	orrs	r3, r2
 c0018c0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 c0018c2:	69bb      	ldr	r3, [r7, #24]
 c0018c4:	08da      	lsrs	r2, r3, #3
 c0018c6:	693b      	ldr	r3, [r7, #16]
 c0018c8:	3208      	adds	r2, #8
 c0018ca:	69f9      	ldr	r1, [r7, #28]
 c0018cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c0018d0:	693b      	ldr	r3, [r7, #16]
 c0018d2:	681b      	ldr	r3, [r3, #0]
 c0018d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c0018d6:	69bb      	ldr	r3, [r7, #24]
 c0018d8:	005b      	lsls	r3, r3, #1
 c0018da:	2203      	movs	r2, #3
 c0018dc:	fa02 f303 	lsl.w	r3, r2, r3
 c0018e0:	43db      	mvns	r3, r3
 c0018e2:	69fa      	ldr	r2, [r7, #28]
 c0018e4:	4013      	ands	r3, r2
 c0018e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 c0018e8:	69bb      	ldr	r3, [r7, #24]
 c0018ea:	005b      	lsls	r3, r3, #1
 c0018ec:	2202      	movs	r2, #2
 c0018ee:	fa02 f303 	lsl.w	r3, r2, r3
 c0018f2:	69fa      	ldr	r2, [r7, #28]
 c0018f4:	4313      	orrs	r3, r2
 c0018f6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c0018f8:	693b      	ldr	r3, [r7, #16]
 c0018fa:	69fa      	ldr	r2, [r7, #28]
 c0018fc:	601a      	str	r2, [r3, #0]
 c0018fe:	e067      	b.n	c0019d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001900:	683b      	ldr	r3, [r7, #0]
 c001902:	685b      	ldr	r3, [r3, #4]
 c001904:	2b02      	cmp	r3, #2
 c001906:	d003      	beq.n	c001910 <HAL_GPIO_Init+0x104>
 c001908:	683b      	ldr	r3, [r7, #0]
 c00190a:	685b      	ldr	r3, [r3, #4]
 c00190c:	2b12      	cmp	r3, #18
 c00190e:	d145      	bne.n	c00199c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c001910:	697b      	ldr	r3, [r7, #20]
 c001912:	08da      	lsrs	r2, r3, #3
 c001914:	687b      	ldr	r3, [r7, #4]
 c001916:	3208      	adds	r2, #8
 c001918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00191c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c00191e:	697b      	ldr	r3, [r7, #20]
 c001920:	f003 0307 	and.w	r3, r3, #7
 c001924:	009b      	lsls	r3, r3, #2
 c001926:	220f      	movs	r2, #15
 c001928:	fa02 f303 	lsl.w	r3, r2, r3
 c00192c:	43db      	mvns	r3, r3
 c00192e:	69fa      	ldr	r2, [r7, #28]
 c001930:	4013      	ands	r3, r2
 c001932:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c001934:	683b      	ldr	r3, [r7, #0]
 c001936:	691b      	ldr	r3, [r3, #16]
 c001938:	f003 020f 	and.w	r2, r3, #15
 c00193c:	697b      	ldr	r3, [r7, #20]
 c00193e:	f003 0307 	and.w	r3, r3, #7
 c001942:	009b      	lsls	r3, r3, #2
 c001944:	fa02 f303 	lsl.w	r3, r2, r3
 c001948:	69fa      	ldr	r2, [r7, #28]
 c00194a:	4313      	orrs	r3, r2
 c00194c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 c00194e:	697b      	ldr	r3, [r7, #20]
 c001950:	08da      	lsrs	r2, r3, #3
 c001952:	687b      	ldr	r3, [r7, #4]
 c001954:	3208      	adds	r2, #8
 c001956:	69f9      	ldr	r1, [r7, #28]
 c001958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c00195c:	693b      	ldr	r3, [r7, #16]
 c00195e:	681b      	ldr	r3, [r3, #0]
 c001960:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c001962:	69bb      	ldr	r3, [r7, #24]
 c001964:	005b      	lsls	r3, r3, #1
 c001966:	2203      	movs	r2, #3
 c001968:	fa02 f303 	lsl.w	r3, r2, r3
 c00196c:	43db      	mvns	r3, r3
 c00196e:	69fa      	ldr	r2, [r7, #28]
 c001970:	4013      	ands	r3, r2
 c001972:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c001974:	683b      	ldr	r3, [r7, #0]
 c001976:	685b      	ldr	r3, [r3, #4]
 c001978:	f003 0203 	and.w	r2, r3, #3
 c00197c:	69bb      	ldr	r3, [r7, #24]
 c00197e:	005b      	lsls	r3, r3, #1
 c001980:	fa02 f303 	lsl.w	r3, r2, r3
 c001984:	69fa      	ldr	r2, [r7, #28]
 c001986:	4313      	orrs	r3, r2
 c001988:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c00198a:	693b      	ldr	r3, [r7, #16]
 c00198c:	69fa      	ldr	r2, [r7, #28]
 c00198e:	601a      	str	r2, [r3, #0]
 c001990:	e01e      	b.n	c0019d0 <HAL_GPIO_Init+0x1c4>
 c001992:	bf00      	nop
 c001994:	56020000 	.word	0x56020000
 c001998:	0c004aac 	.word	0x0c004aac
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 c00199c:	693b      	ldr	r3, [r7, #16]
 c00199e:	681b      	ldr	r3, [r3, #0]
 c0019a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c0019a2:	69bb      	ldr	r3, [r7, #24]
 c0019a4:	005b      	lsls	r3, r3, #1
 c0019a6:	2203      	movs	r2, #3
 c0019a8:	fa02 f303 	lsl.w	r3, r2, r3
 c0019ac:	43db      	mvns	r3, r3
 c0019ae:	69fa      	ldr	r2, [r7, #28]
 c0019b0:	4013      	ands	r3, r2
 c0019b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c0019b4:	683b      	ldr	r3, [r7, #0]
 c0019b6:	685b      	ldr	r3, [r3, #4]
 c0019b8:	f003 0203 	and.w	r2, r3, #3
 c0019bc:	69bb      	ldr	r3, [r7, #24]
 c0019be:	005b      	lsls	r3, r3, #1
 c0019c0:	fa02 f303 	lsl.w	r3, r2, r3
 c0019c4:	69fa      	ldr	r2, [r7, #28]
 c0019c6:	4313      	orrs	r3, r2
 c0019c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c0019ca:	693b      	ldr	r3, [r7, #16]
 c0019cc:	69fa      	ldr	r2, [r7, #28]
 c0019ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0019d0:	683b      	ldr	r3, [r7, #0]
 c0019d2:	685b      	ldr	r3, [r3, #4]
 c0019d4:	2b01      	cmp	r3, #1
 c0019d6:	d00b      	beq.n	c0019f0 <HAL_GPIO_Init+0x1e4>
 c0019d8:	683b      	ldr	r3, [r7, #0]
 c0019da:	685b      	ldr	r3, [r3, #4]
 c0019dc:	2b02      	cmp	r3, #2
 c0019de:	d007      	beq.n	c0019f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0019e0:	683b      	ldr	r3, [r7, #0]
 c0019e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0019e4:	2b11      	cmp	r3, #17
 c0019e6:	d003      	beq.n	c0019f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0019e8:	683b      	ldr	r3, [r7, #0]
 c0019ea:	685b      	ldr	r3, [r3, #4]
 c0019ec:	2b12      	cmp	r3, #18
 c0019ee:	d130      	bne.n	c001a52 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 c0019f0:	693b      	ldr	r3, [r7, #16]
 c0019f2:	689b      	ldr	r3, [r3, #8]
 c0019f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c0019f6:	69bb      	ldr	r3, [r7, #24]
 c0019f8:	005b      	lsls	r3, r3, #1
 c0019fa:	2203      	movs	r2, #3
 c0019fc:	fa02 f303 	lsl.w	r3, r2, r3
 c001a00:	43db      	mvns	r3, r3
 c001a02:	69fa      	ldr	r2, [r7, #28]
 c001a04:	4013      	ands	r3, r2
 c001a06:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c001a08:	683b      	ldr	r3, [r7, #0]
 c001a0a:	68da      	ldr	r2, [r3, #12]
 c001a0c:	69bb      	ldr	r3, [r7, #24]
 c001a0e:	005b      	lsls	r3, r3, #1
 c001a10:	fa02 f303 	lsl.w	r3, r2, r3
 c001a14:	69fa      	ldr	r2, [r7, #28]
 c001a16:	4313      	orrs	r3, r2
 c001a18:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 c001a1a:	693b      	ldr	r3, [r7, #16]
 c001a1c:	69fa      	ldr	r2, [r7, #28]
 c001a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 c001a20:	693b      	ldr	r3, [r7, #16]
 c001a22:	685b      	ldr	r3, [r3, #4]
 c001a24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 c001a26:	2201      	movs	r2, #1
 c001a28:	69bb      	ldr	r3, [r7, #24]
 c001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 c001a2e:	43db      	mvns	r3, r3
 c001a30:	69fa      	ldr	r2, [r7, #28]
 c001a32:	4013      	ands	r3, r2
 c001a34:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 c001a36:	683b      	ldr	r3, [r7, #0]
 c001a38:	685b      	ldr	r3, [r3, #4]
 c001a3a:	091b      	lsrs	r3, r3, #4
 c001a3c:	f003 0201 	and.w	r2, r3, #1
 c001a40:	69bb      	ldr	r3, [r7, #24]
 c001a42:	fa02 f303 	lsl.w	r3, r2, r3
 c001a46:	69fa      	ldr	r2, [r7, #28]
 c001a48:	4313      	orrs	r3, r2
 c001a4a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 c001a4c:	693b      	ldr	r3, [r7, #16]
 c001a4e:	69fa      	ldr	r2, [r7, #28]
 c001a50:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 c001a52:	683b      	ldr	r3, [r7, #0]
 c001a54:	685b      	ldr	r3, [r3, #4]
 c001a56:	2b03      	cmp	r3, #3
 c001a58:	d107      	bne.n	c001a6a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 c001a5a:	683b      	ldr	r3, [r7, #0]
 c001a5c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 c001a5e:	2b03      	cmp	r3, #3
 c001a60:	d11b      	bne.n	c001a9a <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 c001a62:	683b      	ldr	r3, [r7, #0]
 c001a64:	689b      	ldr	r3, [r3, #8]
 c001a66:	2b01      	cmp	r3, #1
 c001a68:	d017      	beq.n	c001a9a <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 c001a6a:	693b      	ldr	r3, [r7, #16]
 c001a6c:	68db      	ldr	r3, [r3, #12]
 c001a6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c001a70:	69bb      	ldr	r3, [r7, #24]
 c001a72:	005b      	lsls	r3, r3, #1
 c001a74:	2203      	movs	r2, #3
 c001a76:	fa02 f303 	lsl.w	r3, r2, r3
 c001a7a:	43db      	mvns	r3, r3
 c001a7c:	69fa      	ldr	r2, [r7, #28]
 c001a7e:	4013      	ands	r3, r2
 c001a80:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c001a82:	683b      	ldr	r3, [r7, #0]
 c001a84:	689a      	ldr	r2, [r3, #8]
 c001a86:	69bb      	ldr	r3, [r7, #24]
 c001a88:	005b      	lsls	r3, r3, #1
 c001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 c001a8e:	69fa      	ldr	r2, [r7, #28]
 c001a90:	4313      	orrs	r3, r2
 c001a92:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 c001a94:	693b      	ldr	r3, [r7, #16]
 c001a96:	69fa      	ldr	r2, [r7, #28]
 c001a98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c001a9a:	683b      	ldr	r3, [r7, #0]
 c001a9c:	685b      	ldr	r3, [r3, #4]
 c001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c001aa2:	2b00      	cmp	r3, #0
 c001aa4:	d07c      	beq.n	c001ba0 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c001aa6:	4a47      	ldr	r2, [pc, #284]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001aa8:	697b      	ldr	r3, [r7, #20]
 c001aaa:	089b      	lsrs	r3, r3, #2
 c001aac:	3318      	adds	r3, #24
 c001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001ab2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c001ab4:	697b      	ldr	r3, [r7, #20]
 c001ab6:	f003 0303 	and.w	r3, r3, #3
 c001aba:	00db      	lsls	r3, r3, #3
 c001abc:	220f      	movs	r2, #15
 c001abe:	fa02 f303 	lsl.w	r3, r2, r3
 c001ac2:	43db      	mvns	r3, r3
 c001ac4:	69fa      	ldr	r2, [r7, #28]
 c001ac6:	4013      	ands	r3, r2
 c001ac8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c001aca:	687b      	ldr	r3, [r7, #4]
 c001acc:	0a9a      	lsrs	r2, r3, #10
 c001ace:	4b3e      	ldr	r3, [pc, #248]	@ (c001bc8 <HAL_GPIO_Init+0x3bc>)
 c001ad0:	4013      	ands	r3, r2
 c001ad2:	697a      	ldr	r2, [r7, #20]
 c001ad4:	f002 0203 	and.w	r2, r2, #3
 c001ad8:	00d2      	lsls	r2, r2, #3
 c001ada:	4093      	lsls	r3, r2
 c001adc:	69fa      	ldr	r2, [r7, #28]
 c001ade:	4313      	orrs	r3, r2
 c001ae0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 c001ae2:	4938      	ldr	r1, [pc, #224]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001ae4:	697b      	ldr	r3, [r7, #20]
 c001ae6:	089b      	lsrs	r3, r3, #2
 c001ae8:	3318      	adds	r3, #24
 c001aea:	69fa      	ldr	r2, [r7, #28]
 c001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c001af0:	4b34      	ldr	r3, [pc, #208]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001af2:	681b      	ldr	r3, [r3, #0]
 c001af4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001af6:	68fb      	ldr	r3, [r7, #12]
 c001af8:	43db      	mvns	r3, r3
 c001afa:	69fa      	ldr	r2, [r7, #28]
 c001afc:	4013      	ands	r3, r2
 c001afe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c001b00:	683b      	ldr	r3, [r7, #0]
 c001b02:	685b      	ldr	r3, [r3, #4]
 c001b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 c001b08:	2b00      	cmp	r3, #0
 c001b0a:	d003      	beq.n	c001b14 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 c001b0c:	69fa      	ldr	r2, [r7, #28]
 c001b0e:	68fb      	ldr	r3, [r7, #12]
 c001b10:	4313      	orrs	r3, r2
 c001b12:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 c001b14:	4a2b      	ldr	r2, [pc, #172]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001b16:	69fb      	ldr	r3, [r7, #28]
 c001b18:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c001b1a:	4b2a      	ldr	r3, [pc, #168]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001b1c:	685b      	ldr	r3, [r3, #4]
 c001b1e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001b20:	68fb      	ldr	r3, [r7, #12]
 c001b22:	43db      	mvns	r3, r3
 c001b24:	69fa      	ldr	r2, [r7, #28]
 c001b26:	4013      	ands	r3, r2
 c001b28:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c001b2a:	683b      	ldr	r3, [r7, #0]
 c001b2c:	685b      	ldr	r3, [r3, #4]
 c001b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c001b32:	2b00      	cmp	r3, #0
 c001b34:	d003      	beq.n	c001b3e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 c001b36:	69fa      	ldr	r2, [r7, #28]
 c001b38:	68fb      	ldr	r3, [r7, #12]
 c001b3a:	4313      	orrs	r3, r2
 c001b3c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 c001b3e:	4a21      	ldr	r2, [pc, #132]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001b40:	69fb      	ldr	r3, [r7, #28]
 c001b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c001b44:	4b1f      	ldr	r3, [pc, #124]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c001b4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001b4c:	68fb      	ldr	r3, [r7, #12]
 c001b4e:	43db      	mvns	r3, r3
 c001b50:	69fa      	ldr	r2, [r7, #28]
 c001b52:	4013      	ands	r3, r2
 c001b54:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001b56:	683b      	ldr	r3, [r7, #0]
 c001b58:	685b      	ldr	r3, [r3, #4]
 c001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c001b5e:	2b00      	cmp	r3, #0
 c001b60:	d003      	beq.n	c001b6a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 c001b62:	69fa      	ldr	r2, [r7, #28]
 c001b64:	68fb      	ldr	r3, [r7, #12]
 c001b66:	4313      	orrs	r3, r2
 c001b68:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 c001b6a:	4a16      	ldr	r2, [pc, #88]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001b6c:	69fb      	ldr	r3, [r7, #28]
 c001b6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 c001b72:	4b14      	ldr	r3, [pc, #80]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c001b78:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001b7a:	68fb      	ldr	r3, [r7, #12]
 c001b7c:	43db      	mvns	r3, r3
 c001b7e:	69fa      	ldr	r2, [r7, #28]
 c001b80:	4013      	ands	r3, r2
 c001b82:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001b84:	683b      	ldr	r3, [r7, #0]
 c001b86:	685b      	ldr	r3, [r3, #4]
 c001b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c001b8c:	2b00      	cmp	r3, #0
 c001b8e:	d003      	beq.n	c001b98 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 c001b90:	69fa      	ldr	r2, [r7, #28]
 c001b92:	68fb      	ldr	r3, [r7, #12]
 c001b94:	4313      	orrs	r3, r2
 c001b96:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 c001b98:	4a0a      	ldr	r2, [pc, #40]	@ (c001bc4 <HAL_GPIO_Init+0x3b8>)
 c001b9a:	69fb      	ldr	r3, [r7, #28]
 c001b9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 c001ba0:	697b      	ldr	r3, [r7, #20]
 c001ba2:	3301      	adds	r3, #1
 c001ba4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c001ba6:	683b      	ldr	r3, [r7, #0]
 c001ba8:	681a      	ldr	r2, [r3, #0]
 c001baa:	697b      	ldr	r3, [r7, #20]
 c001bac:	fa22 f303 	lsr.w	r3, r2, r3
 c001bb0:	2b00      	cmp	r3, #0
 c001bb2:	f47f ae35 	bne.w	c001820 <HAL_GPIO_Init+0x14>
  }
}
 c001bb6:	bf00      	nop
 c001bb8:	bf00      	nop
 c001bba:	3724      	adds	r7, #36	@ 0x24
 c001bbc:	46bd      	mov	sp, r7
 c001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001bc2:	4770      	bx	lr
 c001bc4:	56022000 	.word	0x56022000
 c001bc8:	002b7f7f 	.word	0x002b7f7f

0c001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001bcc:	b480      	push	{r7}
 c001bce:	b083      	sub	sp, #12
 c001bd0:	af00      	add	r7, sp, #0
 c001bd2:	6078      	str	r0, [r7, #4]
 c001bd4:	460b      	mov	r3, r1
 c001bd6:	807b      	strh	r3, [r7, #2]
 c001bd8:	4613      	mov	r3, r2
 c001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001bdc:	787b      	ldrb	r3, [r7, #1]
 c001bde:	2b00      	cmp	r3, #0
 c001be0:	d003      	beq.n	c001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001be2:	887a      	ldrh	r2, [r7, #2]
 c001be4:	687b      	ldr	r3, [r7, #4]
 c001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 c001be8:	e002      	b.n	c001bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 c001bea:	887a      	ldrh	r2, [r7, #2]
 c001bec:	687b      	ldr	r3, [r7, #4]
 c001bee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 c001bf0:	bf00      	nop
 c001bf2:	370c      	adds	r7, #12
 c001bf4:	46bd      	mov	sp, r7
 c001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001bfa:	4770      	bx	lr

0c001bfc <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin: specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes: specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001bfc:	b480      	push	{r7}
 c001bfe:	b089      	sub	sp, #36	@ 0x24
 c001c00:	af00      	add	r7, sp, #0
 c001c02:	60f8      	str	r0, [r7, #12]
 c001c04:	460b      	mov	r3, r1
 c001c06:	607a      	str	r2, [r7, #4]
 c001c08:	817b      	strh	r3, [r7, #10]
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 c001c0a:	2300      	movs	r3, #0
 c001c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 c001c0e:	68fb      	ldr	r3, [r7, #12]
 c001c10:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001c12:	e02c      	b.n	c001c6e <HAL_GPIO_ConfigPinAttributes+0x72>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c001c14:	897a      	ldrh	r2, [r7, #10]
 c001c16:	2101      	movs	r1, #1
 c001c18:	69bb      	ldr	r3, [r7, #24]
 c001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 c001c1e:	4013      	ands	r3, r2
 c001c20:	613b      	str	r3, [r7, #16]

    /* Save pin position */
    pin_position = position;
 c001c22:	69bb      	ldr	r3, [r7, #24]
 c001c24:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 c001c26:	693b      	ldr	r3, [r7, #16]
 c001c28:	2b00      	cmp	r3, #0
 c001c2a:	d01d      	beq.n	c001c68 <HAL_GPIO_ConfigPinAttributes+0x6c>
    {
      /* In case of LPGPIO Port */
      if (GPIOx == LPGPIO1)
 c001c2c:	68fb      	ldr	r3, [r7, #12]
 c001c2e:	4a16      	ldr	r2, [pc, #88]	@ (c001c88 <HAL_GPIO_ConfigPinAttributes+0x8c>)
 c001c30:	4293      	cmp	r3, r2
 c001c32:	d10a      	bne.n	c001c4a <HAL_GPIO_ConfigPinAttributes+0x4e>
      {
        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 c001c34:	4a15      	ldr	r2, [pc, #84]	@ (c001c8c <HAL_GPIO_ConfigPinAttributes+0x90>)
 c001c36:	69bb      	ldr	r3, [r7, #24]
 c001c38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 c001c3c:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 c001c3e:	4a13      	ldr	r2, [pc, #76]	@ (c001c8c <HAL_GPIO_ConfigPinAttributes+0x90>)
 c001c40:	69bb      	ldr	r3, [r7, #24]
 c001c42:	00db      	lsls	r3, r3, #3
 c001c44:	4413      	add	r3, r2
 c001c46:	685b      	ldr	r3, [r3, #4]
 c001c48:	61fb      	str	r3, [r7, #28]
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
      }

      /* Configure the IO secure attribute */
      MODIFY_REG(p_gpio->SECCFGR, (GPIO_SECCFGR_SEC0 << pin_position), (PinAttributes << pin_position));
 c001c4a:	697b      	ldr	r3, [r7, #20]
 c001c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c001c4e:	2101      	movs	r1, #1
 c001c50:	69fb      	ldr	r3, [r7, #28]
 c001c52:	fa01 f303 	lsl.w	r3, r1, r3
 c001c56:	43db      	mvns	r3, r3
 c001c58:	401a      	ands	r2, r3
 c001c5a:	6879      	ldr	r1, [r7, #4]
 c001c5c:	69fb      	ldr	r3, [r7, #28]
 c001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 c001c62:	431a      	orrs	r2, r3
 c001c64:	697b      	ldr	r3, [r7, #20]
 c001c66:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    position++;
 c001c68:	69bb      	ldr	r3, [r7, #24]
 c001c6a:	3301      	adds	r3, #1
 c001c6c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 c001c6e:	897a      	ldrh	r2, [r7, #10]
 c001c70:	69bb      	ldr	r3, [r7, #24]
 c001c72:	fa42 f303 	asr.w	r3, r2, r3
 c001c76:	2b00      	cmp	r3, #0
 c001c78:	d1cc      	bne.n	c001c14 <HAL_GPIO_ConfigPinAttributes+0x18>
  }
}
 c001c7a:	bf00      	nop
 c001c7c:	bf00      	nop
 c001c7e:	3724      	adds	r7, #36	@ 0x24
 c001c80:	46bd      	mov	sp, r7
 c001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001c86:	4770      	bx	lr
 c001c88:	56020000 	.word	0x56020000
 c001c8c:	0c004aac 	.word	0x0c004aac

0c001c90 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c001c90:	b480      	push	{r7}
 c001c92:	b085      	sub	sp, #20
 c001c94:	af00      	add	r7, sp, #0
 c001c96:	6078      	str	r0, [r7, #4]
 c001c98:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001c9a:	683b      	ldr	r3, [r7, #0]
 c001c9c:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 c001ca0:	d234      	bcs.n	c001d0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c001ca2:	687b      	ldr	r3, [r7, #4]
 c001ca4:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001ca6:	2b03      	cmp	r3, #3
 c001ca8:	d809      	bhi.n	c001cbe <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2e>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c001caa:	687b      	ldr	r3, [r7, #4]
 c001cac:	0f1b      	lsrs	r3, r3, #28
 c001cae:	015a      	lsls	r2, r3, #5
 c001cb0:	687b      	ldr	r3, [r7, #4]
 c001cb2:	f003 031f 	and.w	r3, r3, #31
 c001cb6:	4413      	add	r3, r2
 c001cb8:	2b6c      	cmp	r3, #108	@ 0x6c
 c001cba:	d827      	bhi.n	c001d0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c001cbc:	e009      	b.n	c001cd2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x42>
 c001cbe:	687b      	ldr	r3, [r7, #4]
 c001cc0:	0f1b      	lsrs	r3, r3, #28
 c001cc2:	3b01      	subs	r3, #1
 c001cc4:	015a      	lsls	r2, r3, #5
 c001cc6:	687b      	ldr	r3, [r7, #4]
 c001cc8:	f003 031f 	and.w	r3, r3, #31
 c001ccc:	4413      	add	r3, r2
 c001cce:	2b6c      	cmp	r3, #108	@ 0x6c
 c001cd0:	d81c      	bhi.n	c001d0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001cd2:	687b      	ldr	r3, [r7, #4]
 c001cd4:	f003 0320 	and.w	r3, r3, #32
 c001cd8:	2b00      	cmp	r3, #0
 c001cda:	d019      	beq.n	c001d10 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001cdc:	687b      	ldr	r3, [r7, #4]
 c001cde:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001ce0:	2b03      	cmp	r3, #3
 c001ce2:	d809      	bhi.n	c001cf8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x68>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001ce4:	687b      	ldr	r3, [r7, #4]
 c001ce6:	0f1b      	lsrs	r3, r3, #28
 c001ce8:	015a      	lsls	r2, r3, #5
 c001cea:	687b      	ldr	r3, [r7, #4]
 c001cec:	f003 031f 	and.w	r3, r3, #31
 c001cf0:	4413      	add	r3, r2
 c001cf2:	2b00      	cmp	r3, #0
 c001cf4:	d10a      	bne.n	c001d0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c001cf6:	e00b      	b.n	c001d10 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
 c001cf8:	687b      	ldr	r3, [r7, #4]
 c001cfa:	0f1b      	lsrs	r3, r3, #28
 c001cfc:	3b01      	subs	r3, #1
 c001cfe:	015a      	lsls	r2, r3, #5
 c001d00:	687b      	ldr	r3, [r7, #4]
 c001d02:	f003 031f 	and.w	r3, r3, #31
 c001d06:	4413      	add	r3, r2
 c001d08:	2b00      	cmp	r3, #0
 c001d0a:	d001      	beq.n	c001d10 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
  {
    return HAL_ERROR;
 c001d0c:	2301      	movs	r3, #1
 c001d0e:	e116      	b.n	c001f3e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ae>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001d10:	687b      	ldr	r3, [r7, #4]
 c001d12:	f003 0320 	and.w	r3, r3, #32
 c001d16:	2b00      	cmp	r3, #0
 c001d18:	f000 8096 	beq.w	c001e48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1b8>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001d1c:	683a      	ldr	r2, [r7, #0]
 c001d1e:	f240 1301 	movw	r3, #257	@ 0x101
 c001d22:	4013      	ands	r3, r2
 c001d24:	f240 1201 	movw	r2, #257	@ 0x101
 c001d28:	4293      	cmp	r3, r2
 c001d2a:	d120      	bne.n	c001d6e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xde>
    {
      SET_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001d2c:	4b87      	ldr	r3, [pc, #540]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d2e:	691b      	ldr	r3, [r3, #16]
 c001d30:	4a86      	ldr	r2, [pc, #536]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d32:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c001d36:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c001d3a:	6113      	str	r3, [r2, #16]
      SET_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c001d3c:	4b83      	ldr	r3, [pc, #524]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d3e:	695b      	ldr	r3, [r3, #20]
 c001d40:	4a82      	ldr	r2, [pc, #520]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d42:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c001d46:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c001d4a:	6153      	str	r3, [r2, #20]
      SET_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c001d4c:	4b7f      	ldr	r3, [pc, #508]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d4e:	699b      	ldr	r3, [r3, #24]
 c001d50:	4a7e      	ldr	r2, [pc, #504]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d52:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c001d56:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c001d5a:	6193      	str	r3, [r2, #24]
      SET_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c001d5c:	4b7c      	ldr	r3, [pc, #496]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001d5e:	691b      	ldr	r3, [r3, #16]
 c001d60:	4a7b      	ldr	r2, [pc, #492]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001d62:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c001d66:	f043 031f 	orr.w	r3, r3, #31
 c001d6a:	6113      	str	r3, [r2, #16]
 c001d6c:	e020      	b.n	c001db0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001d6e:	683b      	ldr	r3, [r7, #0]
 c001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c001d74:	2b00      	cmp	r3, #0
 c001d76:	d01b      	beq.n	c001db0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    {
      CLEAR_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001d78:	4b74      	ldr	r3, [pc, #464]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d7a:	691b      	ldr	r3, [r3, #16]
 c001d7c:	4a73      	ldr	r2, [pc, #460]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d7e:	0d1b      	lsrs	r3, r3, #20
 c001d80:	051b      	lsls	r3, r3, #20
 c001d82:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c001d84:	4b71      	ldr	r3, [pc, #452]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d86:	695b      	ldr	r3, [r3, #20]
 c001d88:	4a70      	ldr	r2, [pc, #448]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d8a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c001d8e:	f023 0301 	bic.w	r3, r3, #1
 c001d92:	6153      	str	r3, [r2, #20]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c001d94:	4b6d      	ldr	r3, [pc, #436]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d96:	699b      	ldr	r3, [r3, #24]
 c001d98:	4a6c      	ldr	r2, [pc, #432]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001d9a:	0ddb      	lsrs	r3, r3, #23
 c001d9c:	05db      	lsls	r3, r3, #23
 c001d9e:	6193      	str	r3, [r2, #24]
      CLEAR_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c001da0:	4b6b      	ldr	r3, [pc, #428]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001da2:	691b      	ldr	r3, [r3, #16]
 c001da4:	4a6a      	ldr	r2, [pc, #424]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001da6:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c001daa:	f023 031f 	bic.w	r3, r3, #31
 c001dae:	6113      	str	r3, [r2, #16]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001db0:	683a      	ldr	r2, [r7, #0]
 c001db2:	f240 2302 	movw	r3, #514	@ 0x202
 c001db6:	4013      	ands	r3, r2
 c001db8:	f240 2202 	movw	r2, #514	@ 0x202
 c001dbc:	4293      	cmp	r3, r2
 c001dbe:	d120      	bne.n	c001e02 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c001dc0:	4b62      	ldr	r3, [pc, #392]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001dc2:	6a1b      	ldr	r3, [r3, #32]
 c001dc4:	4a61      	ldr	r2, [pc, #388]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001dc6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c001dca:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c001dce:	6213      	str	r3, [r2, #32]
      SET_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c001dd0:	4b5e      	ldr	r3, [pc, #376]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c001dd4:	4a5d      	ldr	r2, [pc, #372]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001dd6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c001dda:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c001dde:	6253      	str	r3, [r2, #36]	@ 0x24
      SET_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c001de0:	4b5a      	ldr	r3, [pc, #360]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001de4:	4a59      	ldr	r2, [pc, #356]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001de6:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c001dea:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c001dee:	6293      	str	r3, [r2, #40]	@ 0x28
      SET_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c001df0:	4b57      	ldr	r3, [pc, #348]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001df2:	6a1b      	ldr	r3, [r3, #32]
 c001df4:	4a56      	ldr	r2, [pc, #344]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001df6:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c001dfa:	f043 031f 	orr.w	r3, r3, #31
 c001dfe:	6213      	str	r3, [r2, #32]
 c001e00:	e09c      	b.n	c001f3c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001e02:	683b      	ldr	r3, [r7, #0]
 c001e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c001e08:	2b00      	cmp	r3, #0
 c001e0a:	f000 8097 	beq.w	c001f3c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c001e0e:	4b4f      	ldr	r3, [pc, #316]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001e10:	6a1b      	ldr	r3, [r3, #32]
 c001e12:	4a4e      	ldr	r2, [pc, #312]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001e14:	0d1b      	lsrs	r3, r3, #20
 c001e16:	051b      	lsls	r3, r3, #20
 c001e18:	6213      	str	r3, [r2, #32]
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c001e1a:	4b4c      	ldr	r3, [pc, #304]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c001e1e:	4a4b      	ldr	r2, [pc, #300]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001e20:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c001e24:	f023 0301 	bic.w	r3, r3, #1
 c001e28:	6253      	str	r3, [r2, #36]	@ 0x24
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c001e2a:	4b48      	ldr	r3, [pc, #288]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001e2e:	4a47      	ldr	r2, [pc, #284]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001e30:	0ddb      	lsrs	r3, r3, #23
 c001e32:	05db      	lsls	r3, r3, #23
 c001e34:	6293      	str	r3, [r2, #40]	@ 0x28
      CLEAR_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c001e36:	4b46      	ldr	r3, [pc, #280]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001e38:	6a1b      	ldr	r3, [r3, #32]
 c001e3a:	4a45      	ldr	r2, [pc, #276]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001e3c:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c001e40:	f023 031f 	bic.w	r3, r3, #31
 c001e44:	6213      	str	r3, [r2, #32]
 c001e46:	e079      	b.n	c001f3c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c001e48:	687b      	ldr	r3, [r7, #4]
 c001e4a:	0f1b      	lsrs	r3, r3, #28
 c001e4c:	2b03      	cmp	r3, #3
 c001e4e:	d801      	bhi.n	c001e54 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c4>
 c001e50:	4b3e      	ldr	r3, [pc, #248]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001e52:	e000      	b.n	c001e56 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c6>
 c001e54:	4b3e      	ldr	r3, [pc, #248]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001e56:	3310      	adds	r3, #16
 c001e58:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c001e5a:	687b      	ldr	r3, [r7, #4]
 c001e5c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c001e60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c001e64:	d803      	bhi.n	c001e6e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1de>
 c001e66:	687b      	ldr	r3, [r7, #4]
 c001e68:	0f1b      	lsrs	r3, r3, #28
 c001e6a:	009b      	lsls	r3, r3, #2
 c001e6c:	e003      	b.n	c001e76 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e6>
 c001e6e:	687b      	ldr	r3, [r7, #4]
 c001e70:	0f1b      	lsrs	r3, r3, #28
 c001e72:	3b04      	subs	r3, #4
 c001e74:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c001e76:	4413      	add	r3, r2
 c001e78:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001e7a:	683a      	ldr	r2, [r7, #0]
 c001e7c:	f240 1301 	movw	r3, #257	@ 0x101
 c001e80:	4013      	ands	r3, r2
 c001e82:	f240 1201 	movw	r2, #257	@ 0x101
 c001e86:	4293      	cmp	r3, r2
 c001e88:	d10a      	bne.n	c001ea0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x210>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001e8a:	68fb      	ldr	r3, [r7, #12]
 c001e8c:	6819      	ldr	r1, [r3, #0]
 c001e8e:	687b      	ldr	r3, [r7, #4]
 c001e90:	f003 031f 	and.w	r3, r3, #31
 c001e94:	2201      	movs	r2, #1
 c001e96:	409a      	lsls	r2, r3
 c001e98:	68fb      	ldr	r3, [r7, #12]
 c001e9a:	430a      	orrs	r2, r1
 c001e9c:	601a      	str	r2, [r3, #0]
 c001e9e:	e010      	b.n	c001ec2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001ea0:	683b      	ldr	r3, [r7, #0]
 c001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c001ea6:	2b00      	cmp	r3, #0
 c001ea8:	d00b      	beq.n	c001ec2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001eaa:	68fb      	ldr	r3, [r7, #12]
 c001eac:	6819      	ldr	r1, [r3, #0]
 c001eae:	687b      	ldr	r3, [r7, #4]
 c001eb0:	f003 031f 	and.w	r3, r3, #31
 c001eb4:	2201      	movs	r2, #1
 c001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 c001eba:	43da      	mvns	r2, r3
 c001ebc:	68fb      	ldr	r3, [r7, #12]
 c001ebe:	400a      	ands	r2, r1
 c001ec0:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c001ec2:	687b      	ldr	r3, [r7, #4]
 c001ec4:	0f1b      	lsrs	r3, r3, #28
 c001ec6:	2b03      	cmp	r3, #3
 c001ec8:	d801      	bhi.n	c001ece <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x23e>
 c001eca:	4b20      	ldr	r3, [pc, #128]	@ (c001f4c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001ecc:	e000      	b.n	c001ed0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x240>
 c001ece:	4b20      	ldr	r3, [pc, #128]	@ (c001f50 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001ed0:	3320      	adds	r3, #32
 c001ed2:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c001ed4:	687b      	ldr	r3, [r7, #4]
 c001ed6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c001eda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c001ede:	d803      	bhi.n	c001ee8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x258>
 c001ee0:	687b      	ldr	r3, [r7, #4]
 c001ee2:	0f1b      	lsrs	r3, r3, #28
 c001ee4:	009b      	lsls	r3, r3, #2
 c001ee6:	e003      	b.n	c001ef0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x260>
 c001ee8:	687b      	ldr	r3, [r7, #4]
 c001eea:	0f1b      	lsrs	r3, r3, #28
 c001eec:	3b04      	subs	r3, #4
 c001eee:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c001ef0:	4413      	add	r3, r2
 c001ef2:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001ef4:	683a      	ldr	r2, [r7, #0]
 c001ef6:	f240 2302 	movw	r3, #514	@ 0x202
 c001efa:	4013      	ands	r3, r2
 c001efc:	f240 2202 	movw	r2, #514	@ 0x202
 c001f00:	4293      	cmp	r3, r2
 c001f02:	d10a      	bne.n	c001f1a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x28a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001f04:	68fb      	ldr	r3, [r7, #12]
 c001f06:	6819      	ldr	r1, [r3, #0]
 c001f08:	687b      	ldr	r3, [r7, #4]
 c001f0a:	f003 031f 	and.w	r3, r3, #31
 c001f0e:	2201      	movs	r2, #1
 c001f10:	409a      	lsls	r2, r3
 c001f12:	68fb      	ldr	r3, [r7, #12]
 c001f14:	430a      	orrs	r2, r1
 c001f16:	601a      	str	r2, [r3, #0]
 c001f18:	e010      	b.n	c001f3c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001f1a:	683b      	ldr	r3, [r7, #0]
 c001f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c001f20:	2b00      	cmp	r3, #0
 c001f22:	d00b      	beq.n	c001f3c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001f24:	68fb      	ldr	r3, [r7, #12]
 c001f26:	6819      	ldr	r1, [r3, #0]
 c001f28:	687b      	ldr	r3, [r7, #4]
 c001f2a:	f003 031f 	and.w	r3, r3, #31
 c001f2e:	2201      	movs	r2, #1
 c001f30:	fa02 f303 	lsl.w	r3, r2, r3
 c001f34:	43da      	mvns	r2, r3
 c001f36:	68fb      	ldr	r3, [r7, #12]
 c001f38:	400a      	ands	r2, r1
 c001f3a:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c001f3c:	2300      	movs	r3, #0
}
 c001f3e:	4618      	mov	r0, r3
 c001f40:	3714      	adds	r7, #20
 c001f42:	46bd      	mov	sp, r7
 c001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f48:	4770      	bx	lr
 c001f4a:	bf00      	nop
 c001f4c:	50032400 	.word	0x50032400
 c001f50:	56023000 	.word	0x56023000

0c001f54 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001f54:	b480      	push	{r7}
 c001f56:	b089      	sub	sp, #36	@ 0x24
 c001f58:	af00      	add	r7, sp, #0
 c001f5a:	6078      	str	r0, [r7, #4]
 c001f5c:	6039      	str	r1, [r7, #0]
  uint32_t mem_size;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001f5e:	687b      	ldr	r3, [r7, #4]
 c001f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c001f64:	d01b      	beq.n	c001f9e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c001f66:	687b      	ldr	r3, [r7, #4]
 c001f68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c001f6c:	d017      	beq.n	c001f9e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001f6e:	687b      	ldr	r3, [r7, #4]
 c001f70:	4a5c      	ldr	r2, [pc, #368]	@ (c0020e4 <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c001f72:	4293      	cmp	r3, r2
 c001f74:	d013      	beq.n	c001f9e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c001f76:	687b      	ldr	r3, [r7, #4]
 c001f78:	4a5b      	ldr	r2, [pc, #364]	@ (c0020e8 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c001f7a:	4293      	cmp	r3, r2
 c001f7c:	d00f      	beq.n	c001f9e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#if defined (SRAM3_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c001f7e:	687b      	ldr	r3, [r7, #4]
 c001f80:	4a5a      	ldr	r2, [pc, #360]	@ (c0020ec <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c001f82:	4293      	cmp	r3, r2
 c001f84:	d00b      	beq.n	c001f9e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c001f86:	687b      	ldr	r3, [r7, #4]
 c001f88:	4a59      	ldr	r2, [pc, #356]	@ (c0020f0 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c001f8a:	4293      	cmp	r3, r2
 c001f8c:	d007      	beq.n	c001f9e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#endif /* SRAM3_BASE */
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c001f8e:	687b      	ldr	r3, [r7, #4]
 c001f90:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c001f94:	d003      	beq.n	c001f9e <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c001f96:	687b      	ldr	r3, [r7, #4]
 c001f98:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c001f9c:	d111      	bne.n	c001fc2 <HAL_GTZC_MPCBB_ConfigMem+0x6e>
#endif /* SRAM5_BASE */
#if defined (SRAM6_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM6, MemBaseAddress))
#endif /* SRAM6_BASE */
      )
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c001f9e:	683b      	ldr	r3, [r7, #0]
 c001fa0:	681b      	ldr	r3, [r3, #0]
 c001fa2:	2b00      	cmp	r3, #0
 c001fa4:	d004      	beq.n	c001fb0 <HAL_GTZC_MPCBB_ConfigMem+0x5c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001fa6:	683b      	ldr	r3, [r7, #0]
 c001fa8:	681b      	ldr	r3, [r3, #0]
 c001faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c001fae:	d108      	bne.n	c001fc2 <HAL_GTZC_MPCBB_ConfigMem+0x6e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001fb0:	683b      	ldr	r3, [r7, #0]
 c001fb2:	685b      	ldr	r3, [r3, #4]
 c001fb4:	2b00      	cmp	r3, #0
 c001fb6:	d006      	beq.n	c001fc6 <HAL_GTZC_MPCBB_ConfigMem+0x72>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001fb8:	683b      	ldr	r3, [r7, #0]
 c001fba:	685b      	ldr	r3, [r3, #4]
 c001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c001fc0:	d001      	beq.n	c001fc6 <HAL_GTZC_MPCBB_ConfigMem+0x72>
  {
    return HAL_ERROR;
 c001fc2:	2301      	movs	r3, #1
 c001fc4:	e088      	b.n	c0020d8 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001fc6:	687b      	ldr	r3, [r7, #4]
 c001fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c001fcc:	d003      	beq.n	c001fd6 <HAL_GTZC_MPCBB_ConfigMem+0x82>
 c001fce:	687b      	ldr	r3, [r7, #4]
 c001fd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c001fd4:	d105      	bne.n	c001fe2 <HAL_GTZC_MPCBB_ConfigMem+0x8e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c001fd6:	4b47      	ldr	r3, [pc, #284]	@ (c0020f4 <HAL_GTZC_MPCBB_ConfigMem+0x1a0>)
 c001fd8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001fda:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 c001fde:	61bb      	str	r3, [r7, #24]
 c001fe0:	e02b      	b.n	c00203a <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c001fe2:	687b      	ldr	r3, [r7, #4]
 c001fe4:	4a3f      	ldr	r2, [pc, #252]	@ (c0020e4 <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c001fe6:	4293      	cmp	r3, r2
 c001fe8:	d003      	beq.n	c001ff2 <HAL_GTZC_MPCBB_ConfigMem+0x9e>
 c001fea:	687b      	ldr	r3, [r7, #4]
 c001fec:	4a3e      	ldr	r2, [pc, #248]	@ (c0020e8 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c001fee:	4293      	cmp	r3, r2
 c001ff0:	d105      	bne.n	c001ffe <HAL_GTZC_MPCBB_ConfigMem+0xaa>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c001ff2:	4b41      	ldr	r3, [pc, #260]	@ (c0020f8 <HAL_GTZC_MPCBB_ConfigMem+0x1a4>)
 c001ff4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001ff6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 c001ffa:	61bb      	str	r3, [r7, #24]
 c001ffc:	e01d      	b.n	c00203a <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#if defined (SRAM3_BASE)
  else if (IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c001ffe:	687b      	ldr	r3, [r7, #4]
 c002000:	4a3a      	ldr	r2, [pc, #232]	@ (c0020ec <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c002002:	4293      	cmp	r3, r2
 c002004:	d003      	beq.n	c00200e <HAL_GTZC_MPCBB_ConfigMem+0xba>
 c002006:	687b      	ldr	r3, [r7, #4]
 c002008:	4a39      	ldr	r2, [pc, #228]	@ (c0020f0 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c00200a:	4293      	cmp	r3, r2
 c00200c:	d105      	bne.n	c00201a <HAL_GTZC_MPCBB_ConfigMem+0xc6>
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c00200e:	4b3b      	ldr	r3, [pc, #236]	@ (c0020fc <HAL_GTZC_MPCBB_ConfigMem+0x1a8>)
 c002010:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c002012:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 c002016:	61bb      	str	r3, [r7, #24]
 c002018:	e00f      	b.n	c00203a <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#endif /* SRAM3_BASE */
  else if (IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c00201a:	687b      	ldr	r3, [r7, #4]
 c00201c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c002020:	d003      	beq.n	c00202a <HAL_GTZC_MPCBB_ConfigMem+0xd6>
 c002022:	687b      	ldr	r3, [r7, #4]
 c002024:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c002028:	d105      	bne.n	c002036 <HAL_GTZC_MPCBB_ConfigMem+0xe2>
  {
    mpcbb_ptr = GTZC_MPCBB4;
 c00202a:	4b35      	ldr	r3, [pc, #212]	@ (c002100 <HAL_GTZC_MPCBB_ConfigMem+0x1ac>)
 c00202c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM4);
 c00202e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 c002032:	61bb      	str	r3, [r7, #24]
 c002034:	e001      	b.n	c00203a <HAL_GTZC_MPCBB_ConfigMem+0xe6>
    mem_size = GTZC_MEM_SIZE(SRAM6);
  }
#endif /* SRAM6_BASE */
  else
  {
    return HAL_ERROR;
 c002036:	2301      	movs	r3, #1
 c002038:	e04e      	b.n	c0020d8 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c00203a:	69bb      	ldr	r3, [r7, #24]
 c00203c:	0b9b      	lsrs	r3, r3, #14
 c00203e:	613b      	str	r3, [r7, #16]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c002040:	2300      	movs	r3, #0
 c002042:	617b      	str	r3, [r7, #20]
 c002044:	e00c      	b.n	c002060 <HAL_GTZC_MPCBB_ConfigMem+0x10c>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c002046:	683b      	ldr	r3, [r7, #0]
 c002048:	697a      	ldr	r2, [r7, #20]
 c00204a:	3222      	adds	r2, #34	@ 0x22
 c00204c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c002050:	69fb      	ldr	r3, [r7, #28]
 c002052:	697a      	ldr	r2, [r7, #20]
 c002054:	3280      	adds	r2, #128	@ 0x80
 c002056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c00205a:	697b      	ldr	r3, [r7, #20]
 c00205c:	3301      	adds	r3, #1
 c00205e:	617b      	str	r3, [r7, #20]
 c002060:	697a      	ldr	r2, [r7, #20]
 c002062:	693b      	ldr	r3, [r7, #16]
 c002064:	429a      	cmp	r2, r3
 c002066:	d3ee      	bcc.n	c002046 <HAL_GTZC_MPCBB_ConfigMem+0xf2>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c002068:	2300      	movs	r3, #0
 c00206a:	617b      	str	r3, [r7, #20]
 c00206c:	e00c      	b.n	c002088 <HAL_GTZC_MPCBB_ConfigMem+0x134>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c00206e:	683b      	ldr	r3, [r7, #0]
 c002070:	697a      	ldr	r2, [r7, #20]
 c002072:	3202      	adds	r2, #2
 c002074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c002078:	69fb      	ldr	r3, [r7, #28]
 c00207a:	697a      	ldr	r2, [r7, #20]
 c00207c:	3240      	adds	r2, #64	@ 0x40
 c00207e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c002082:	697b      	ldr	r3, [r7, #20]
 c002084:	3301      	adds	r3, #1
 c002086:	617b      	str	r3, [r7, #20]
 c002088:	697a      	ldr	r2, [r7, #20]
 c00208a:	693b      	ldr	r3, [r7, #16]
 c00208c:	429a      	cmp	r2, r3
 c00208e:	d3ee      	bcc.n	c00206e <HAL_GTZC_MPCBB_ConfigMem+0x11a>
    MODIFY_REG(mpcbb_ptr->CFGLOCKR2, 0x000FFFFFUL, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[1]);
  }
  else
#endif /* GTZC_MPCBB_CFGLOCKR2_SPLCK32_Msk */
  {
    size_mask = (1UL << (size_in_superblocks & 0x1FU)) - 1U;
 c002090:	693b      	ldr	r3, [r7, #16]
 c002092:	f003 031f 	and.w	r3, r3, #31
 c002096:	2201      	movs	r2, #1
 c002098:	fa02 f303 	lsl.w	r3, r2, r3
 c00209c:	3b01      	subs	r3, #1
 c00209e:	60fb      	str	r3, [r7, #12]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0020a0:	69fb      	ldr	r3, [r7, #28]
 c0020a2:	691a      	ldr	r2, [r3, #16]
 c0020a4:	68fb      	ldr	r3, [r7, #12]
 c0020a6:	43db      	mvns	r3, r3
 c0020a8:	401a      	ands	r2, r3
 c0020aa:	683b      	ldr	r3, [r7, #0]
 c0020ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 c0020b0:	431a      	orrs	r2, r3
 c0020b2:	69fb      	ldr	r3, [r7, #28]
 c0020b4:	611a      	str	r2, [r3, #16]

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c0020b6:	683b      	ldr	r3, [r7, #0]
 c0020b8:	685b      	ldr	r3, [r3, #4]
 c0020ba:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c0020bc:	683b      	ldr	r3, [r7, #0]
 c0020be:	681b      	ldr	r3, [r3, #0]
 c0020c0:	68ba      	ldr	r2, [r7, #8]
 c0020c2:	4313      	orrs	r3, r2
 c0020c4:	60bb      	str	r3, [r7, #8]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0020c6:	69fb      	ldr	r3, [r7, #28]
 c0020c8:	681b      	ldr	r3, [r3, #0]
 c0020ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 c0020ce:	68bb      	ldr	r3, [r7, #8]
 c0020d0:	431a      	orrs	r2, r3
 c0020d2:	69fb      	ldr	r3, [r7, #28]
 c0020d4:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c0020d6:	2300      	movs	r3, #0
}
 c0020d8:	4618      	mov	r0, r3
 c0020da:	3724      	adds	r7, #36	@ 0x24
 c0020dc:	46bd      	mov	sp, r7
 c0020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0020e2:	4770      	bx	lr
 c0020e4:	20030000 	.word	0x20030000
 c0020e8:	30030000 	.word	0x30030000
 c0020ec:	20040000 	.word	0x20040000
 c0020f0:	30040000 	.word	0x30040000
 c0020f4:	50032c00 	.word	0x50032c00
 c0020f8:	50033000 	.word	0x50033000
 c0020fc:	50033400 	.word	0x50033400
 c002100:	56023800 	.word	0x56023800

0c002104 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c002104:	b480      	push	{r7}
 c002106:	b085      	sub	sp, #20
 c002108:	af00      	add	r7, sp, #0
 c00210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c00210c:	2300      	movs	r3, #0
 c00210e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c002110:	4b0b      	ldr	r3, [pc, #44]	@ (c002140 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002112:	681b      	ldr	r3, [r3, #0]
 c002114:	f003 0301 	and.w	r3, r3, #1
 c002118:	2b00      	cmp	r3, #0
 c00211a:	d002      	beq.n	c002122 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c00211c:	2301      	movs	r3, #1
 c00211e:	73fb      	strb	r3, [r7, #15]
 c002120:	e007      	b.n	c002132 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c002122:	4b07      	ldr	r3, [pc, #28]	@ (c002140 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002124:	681b      	ldr	r3, [r3, #0]
 c002126:	f023 0204 	bic.w	r2, r3, #4
 c00212a:	4905      	ldr	r1, [pc, #20]	@ (c002140 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c00212c:	687b      	ldr	r3, [r7, #4]
 c00212e:	4313      	orrs	r3, r2
 c002130:	600b      	str	r3, [r1, #0]
  }

  return status;
 c002132:	7bfb      	ldrb	r3, [r7, #15]
}
 c002134:	4618      	mov	r0, r3
 c002136:	3714      	adds	r7, #20
 c002138:	46bd      	mov	sp, r7
 c00213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00213e:	4770      	bx	lr
 c002140:	50030400 	.word	0x50030400

0c002144 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c002144:	b480      	push	{r7}
 c002146:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c002148:	4b05      	ldr	r3, [pc, #20]	@ (c002160 <HAL_ICACHE_Enable+0x1c>)
 c00214a:	681b      	ldr	r3, [r3, #0]
 c00214c:	4a04      	ldr	r2, [pc, #16]	@ (c002160 <HAL_ICACHE_Enable+0x1c>)
 c00214e:	f043 0301 	orr.w	r3, r3, #1
 c002152:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c002154:	2300      	movs	r3, #0
}
 c002156:	4618      	mov	r0, r3
 c002158:	46bd      	mov	sp, r7
 c00215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00215e:	4770      	bx	lr
 c002160:	50030400 	.word	0x50030400

0c002164 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 c002164:	b480      	push	{r7}
 c002166:	b083      	sub	sp, #12
 c002168:	af00      	add	r7, sp, #0
 c00216a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 c00216c:	687b      	ldr	r3, [r7, #4]
 c00216e:	681b      	ldr	r3, [r3, #0]
 c002170:	f043 0201 	orr.w	r2, r3, #1
 c002174:	687b      	ldr	r3, [r7, #4]
 c002176:	601a      	str	r2, [r3, #0]
}
 c002178:	bf00      	nop
 c00217a:	370c      	adds	r7, #12
 c00217c:	46bd      	mov	sp, r7
 c00217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002182:	4770      	bx	lr

0c002184 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 c002184:	b580      	push	{r7, lr}
 c002186:	b086      	sub	sp, #24
 c002188:	af02      	add	r7, sp, #8
 c00218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c00218c:	2300      	movs	r3, #0
 c00218e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 c002190:	f7ff f94c 	bl	c00142c <HAL_GetTick>
 c002194:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 c002196:	687b      	ldr	r3, [r7, #4]
 c002198:	2b00      	cmp	r3, #0
 c00219a:	d102      	bne.n	c0021a2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 c00219c:	2301      	movs	r3, #1
 c00219e:	73fb      	strb	r3, [r7, #15]
 c0021a0:	e0a5      	b.n	c0022ee <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 c0021a2:	687b      	ldr	r3, [r7, #4]
 c0021a4:	2200      	movs	r2, #0
 c0021a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 c0021a8:	687b      	ldr	r3, [r7, #4]
 c0021aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c0021ac:	2b00      	cmp	r3, #0
 c0021ae:	f040 809e 	bne.w	c0022ee <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 c0021b2:	6878      	ldr	r0, [r7, #4]
 c0021b4:	f7fe fde2 	bl	c000d7c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 c0021b8:	f241 3188 	movw	r1, #5000	@ 0x1388
 c0021bc:	6878      	ldr	r0, [r7, #4]
 c0021be:	f000 f912 	bl	c0023e6 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 c0021c2:	687b      	ldr	r3, [r7, #4]
 c0021c4:	681b      	ldr	r3, [r3, #0]
 c0021c6:	689a      	ldr	r2, [r3, #8]
 c0021c8:	4b4b      	ldr	r3, [pc, #300]	@ (c0022f8 <HAL_OSPI_Init+0x174>)
 c0021ca:	4013      	ands	r3, r2
 c0021cc:	687a      	ldr	r2, [r7, #4]
 c0021ce:	68d1      	ldr	r1, [r2, #12]
 c0021d0:	687a      	ldr	r2, [r7, #4]
 c0021d2:	6912      	ldr	r2, [r2, #16]
 c0021d4:	3a01      	subs	r2, #1
 c0021d6:	0412      	lsls	r2, r2, #16
 c0021d8:	4311      	orrs	r1, r2
 c0021da:	687a      	ldr	r2, [r7, #4]
 c0021dc:	6952      	ldr	r2, [r2, #20]
 c0021de:	3a01      	subs	r2, #1
 c0021e0:	0212      	lsls	r2, r2, #8
 c0021e2:	4311      	orrs	r1, r2
 c0021e4:	687a      	ldr	r2, [r7, #4]
 c0021e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 c0021e8:	4311      	orrs	r1, r2
 c0021ea:	687a      	ldr	r2, [r7, #4]
 c0021ec:	69d2      	ldr	r2, [r2, #28]
 c0021ee:	4311      	orrs	r1, r2
 c0021f0:	687a      	ldr	r2, [r7, #4]
 c0021f2:	6812      	ldr	r2, [r2, #0]
 c0021f4:	430b      	orrs	r3, r1
 c0021f6:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 c0021f8:	687b      	ldr	r3, [r7, #4]
 c0021fa:	681b      	ldr	r3, [r3, #0]
 c0021fc:	68db      	ldr	r3, [r3, #12]
 c0021fe:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 c002202:	687b      	ldr	r3, [r7, #4]
 c002204:	6a1a      	ldr	r2, [r3, #32]
 c002206:	687b      	ldr	r3, [r7, #4]
 c002208:	681b      	ldr	r3, [r3, #0]
 c00220a:	430a      	orrs	r2, r1
 c00220c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 c00220e:	687b      	ldr	r3, [r7, #4]
 c002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c002212:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 c002214:	687b      	ldr	r3, [r7, #4]
 c002216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 c002218:	687b      	ldr	r3, [r7, #4]
 c00221a:	681b      	ldr	r3, [r3, #0]
 c00221c:	430a      	orrs	r2, r1
 c00221e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 c002220:	687b      	ldr	r3, [r7, #4]
 c002222:	681b      	ldr	r3, [r3, #0]
 c002224:	687a      	ldr	r2, [r7, #4]
 c002226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 c002228:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 c00222a:	687b      	ldr	r3, [r7, #4]
 c00222c:	681b      	ldr	r3, [r3, #0]
 c00222e:	681b      	ldr	r3, [r3, #0]
 c002230:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 c002234:	687b      	ldr	r3, [r7, #4]
 c002236:	685b      	ldr	r3, [r3, #4]
 c002238:	3b01      	subs	r3, #1
 c00223a:	021a      	lsls	r2, r3, #8
 c00223c:	687b      	ldr	r3, [r7, #4]
 c00223e:	681b      	ldr	r3, [r3, #0]
 c002240:	430a      	orrs	r2, r1
 c002242:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 c002244:	687b      	ldr	r3, [r7, #4]
 c002246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c002248:	9300      	str	r3, [sp, #0]
 c00224a:	68bb      	ldr	r3, [r7, #8]
 c00224c:	2200      	movs	r2, #0
 c00224e:	2120      	movs	r1, #32
 c002250:	6878      	ldr	r0, [r7, #4]
 c002252:	f000 f8d7 	bl	c002404 <OSPI_WaitFlagStateUntilTimeout>
 c002256:	4603      	mov	r3, r0
 c002258:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 c00225a:	7bfb      	ldrb	r3, [r7, #15]
 c00225c:	2b00      	cmp	r3, #0
 c00225e:	d146      	bne.n	c0022ee <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 c002260:	687b      	ldr	r3, [r7, #4]
 c002262:	681b      	ldr	r3, [r3, #0]
 c002264:	68db      	ldr	r3, [r3, #12]
 c002266:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 c00226a:	687b      	ldr	r3, [r7, #4]
 c00226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00226e:	1e5a      	subs	r2, r3, #1
 c002270:	687b      	ldr	r3, [r7, #4]
 c002272:	681b      	ldr	r3, [r3, #0]
 c002274:	430a      	orrs	r2, r1
 c002276:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 c002278:	687b      	ldr	r3, [r7, #4]
 c00227a:	681b      	ldr	r3, [r3, #0]
 c00227c:	681b      	ldr	r3, [r3, #0]
 c00227e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 c002282:	687b      	ldr	r3, [r7, #4]
 c002284:	689a      	ldr	r2, [r3, #8]
 c002286:	687b      	ldr	r3, [r7, #4]
 c002288:	681b      	ldr	r3, [r3, #0]
 c00228a:	430a      	orrs	r2, r1
 c00228c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 c00228e:	687b      	ldr	r3, [r7, #4]
 c002290:	681b      	ldr	r3, [r3, #0]
 c002292:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 c002296:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 c00229a:	687b      	ldr	r3, [r7, #4]
 c00229c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 c00229e:	687b      	ldr	r3, [r7, #4]
 c0022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0022a2:	431a      	orrs	r2, r3
 c0022a4:	687b      	ldr	r3, [r7, #4]
 c0022a6:	681b      	ldr	r3, [r3, #0]
 c0022a8:	430a      	orrs	r2, r1
 c0022aa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 c0022ae:	687b      	ldr	r3, [r7, #4]
 c0022b0:	681b      	ldr	r3, [r3, #0]
 c0022b2:	681a      	ldr	r2, [r3, #0]
 c0022b4:	687b      	ldr	r3, [r7, #4]
 c0022b6:	681b      	ldr	r3, [r3, #0]
 c0022b8:	f042 0201 	orr.w	r2, r2, #1
 c0022bc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 c0022be:	687b      	ldr	r3, [r7, #4]
 c0022c0:	699b      	ldr	r3, [r3, #24]
 c0022c2:	2b02      	cmp	r3, #2
 c0022c4:	d107      	bne.n	c0022d6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 c0022c6:	687b      	ldr	r3, [r7, #4]
 c0022c8:	681b      	ldr	r3, [r3, #0]
 c0022ca:	689a      	ldr	r2, [r3, #8]
 c0022cc:	687b      	ldr	r3, [r7, #4]
 c0022ce:	681b      	ldr	r3, [r3, #0]
 c0022d0:	f042 0202 	orr.w	r2, r2, #2
 c0022d4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 c0022d6:	687b      	ldr	r3, [r7, #4]
 c0022d8:	68db      	ldr	r3, [r3, #12]
 c0022da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c0022de:	d103      	bne.n	c0022e8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 c0022e0:	687b      	ldr	r3, [r7, #4]
 c0022e2:	2201      	movs	r2, #1
 c0022e4:	651a      	str	r2, [r3, #80]	@ 0x50
 c0022e6:	e002      	b.n	c0022ee <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 c0022e8:	687b      	ldr	r3, [r7, #4]
 c0022ea:	2202      	movs	r2, #2
 c0022ec:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 c0022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 c0022f0:	4618      	mov	r0, r3
 c0022f2:	3710      	adds	r7, #16
 c0022f4:	46bd      	mov	sp, r7
 c0022f6:	bd80      	pop	{r7, pc}
 c0022f8:	f8e0c0f4 	.word	0xf8e0c0f4

0c0022fc <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 c0022fc:	b580      	push	{r7, lr}
 c0022fe:	b088      	sub	sp, #32
 c002300:	af02      	add	r7, sp, #8
 c002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c002304:	2300      	movs	r3, #0
 c002306:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 c002308:	f7ff f890 	bl	c00142c <HAL_GetTick>
 c00230c:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 c00230e:	687b      	ldr	r3, [r7, #4]
 c002310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c002312:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 c002314:	68fb      	ldr	r3, [r7, #12]
 c002316:	f003 0308 	and.w	r3, r3, #8
 c00231a:	2b00      	cmp	r3, #0
 c00231c:	d104      	bne.n	c002328 <HAL_OSPI_Abort+0x2c>
 c00231e:	68fb      	ldr	r3, [r7, #12]
 c002320:	f003 0304 	and.w	r3, r3, #4
 c002324:	2b00      	cmp	r3, #0
 c002326:	d052      	beq.n	c0023ce <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 c002328:	687b      	ldr	r3, [r7, #4]
 c00232a:	681b      	ldr	r3, [r3, #0]
 c00232c:	681b      	ldr	r3, [r3, #0]
 c00232e:	f003 0304 	and.w	r3, r3, #4
 c002332:	2b00      	cmp	r3, #0
 c002334:	d014      	beq.n	c002360 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 c002336:	687b      	ldr	r3, [r7, #4]
 c002338:	681b      	ldr	r3, [r3, #0]
 c00233a:	681a      	ldr	r2, [r3, #0]
 c00233c:	687b      	ldr	r3, [r7, #4]
 c00233e:	681b      	ldr	r3, [r3, #0]
 c002340:	f022 0204 	bic.w	r2, r2, #4
 c002344:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 c002346:	687b      	ldr	r3, [r7, #4]
 c002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c00234a:	4618      	mov	r0, r3
 c00234c:	f7ff f9e2 	bl	c001714 <HAL_DMA_Abort>
 c002350:	4603      	mov	r3, r0
 c002352:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 c002354:	7dfb      	ldrb	r3, [r7, #23]
 c002356:	2b00      	cmp	r3, #0
 c002358:	d002      	beq.n	c002360 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 c00235a:	687b      	ldr	r3, [r7, #4]
 c00235c:	2204      	movs	r2, #4
 c00235e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 c002360:	687b      	ldr	r3, [r7, #4]
 c002362:	681b      	ldr	r3, [r3, #0]
 c002364:	6a1b      	ldr	r3, [r3, #32]
 c002366:	f003 0320 	and.w	r3, r3, #32
 c00236a:	2b00      	cmp	r3, #0
 c00236c:	d02b      	beq.n	c0023c6 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 c00236e:	687b      	ldr	r3, [r7, #4]
 c002370:	681b      	ldr	r3, [r3, #0]
 c002372:	681a      	ldr	r2, [r3, #0]
 c002374:	687b      	ldr	r3, [r7, #4]
 c002376:	681b      	ldr	r3, [r3, #0]
 c002378:	f042 0202 	orr.w	r2, r2, #2
 c00237c:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 c00237e:	687b      	ldr	r3, [r7, #4]
 c002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c002382:	9300      	str	r3, [sp, #0]
 c002384:	693b      	ldr	r3, [r7, #16]
 c002386:	2201      	movs	r2, #1
 c002388:	2102      	movs	r1, #2
 c00238a:	6878      	ldr	r0, [r7, #4]
 c00238c:	f000 f83a 	bl	c002404 <OSPI_WaitFlagStateUntilTimeout>
 c002390:	4603      	mov	r3, r0
 c002392:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 c002394:	7dfb      	ldrb	r3, [r7, #23]
 c002396:	2b00      	cmp	r3, #0
 c002398:	d11f      	bne.n	c0023da <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 c00239a:	687b      	ldr	r3, [r7, #4]
 c00239c:	681b      	ldr	r3, [r3, #0]
 c00239e:	2202      	movs	r2, #2
 c0023a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 c0023a2:	687b      	ldr	r3, [r7, #4]
 c0023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c0023a6:	9300      	str	r3, [sp, #0]
 c0023a8:	693b      	ldr	r3, [r7, #16]
 c0023aa:	2200      	movs	r2, #0
 c0023ac:	2120      	movs	r1, #32
 c0023ae:	6878      	ldr	r0, [r7, #4]
 c0023b0:	f000 f828 	bl	c002404 <OSPI_WaitFlagStateUntilTimeout>
 c0023b4:	4603      	mov	r3, r0
 c0023b6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 c0023b8:	7dfb      	ldrb	r3, [r7, #23]
 c0023ba:	2b00      	cmp	r3, #0
 c0023bc:	d10d      	bne.n	c0023da <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 c0023be:	687b      	ldr	r3, [r7, #4]
 c0023c0:	2202      	movs	r2, #2
 c0023c2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 c0023c4:	e009      	b.n	c0023da <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 c0023c6:	687b      	ldr	r3, [r7, #4]
 c0023c8:	2202      	movs	r2, #2
 c0023ca:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 c0023cc:	e005      	b.n	c0023da <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 c0023ce:	2301      	movs	r3, #1
 c0023d0:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 c0023d2:	687b      	ldr	r3, [r7, #4]
 c0023d4:	2210      	movs	r2, #16
 c0023d6:	655a      	str	r2, [r3, #84]	@ 0x54
 c0023d8:	e000      	b.n	c0023dc <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 c0023da:	bf00      	nop
  }

  /* Return function status */
  return status;
 c0023dc:	7dfb      	ldrb	r3, [r7, #23]
}
 c0023de:	4618      	mov	r0, r3
 c0023e0:	3718      	adds	r7, #24
 c0023e2:	46bd      	mov	sp, r7
 c0023e4:	bd80      	pop	{r7, pc}

0c0023e6 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 c0023e6:	b480      	push	{r7}
 c0023e8:	b083      	sub	sp, #12
 c0023ea:	af00      	add	r7, sp, #0
 c0023ec:	6078      	str	r0, [r7, #4]
 c0023ee:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 c0023f0:	687b      	ldr	r3, [r7, #4]
 c0023f2:	683a      	ldr	r2, [r7, #0]
 c0023f4:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 c0023f6:	2300      	movs	r3, #0
}
 c0023f8:	4618      	mov	r0, r3
 c0023fa:	370c      	adds	r7, #12
 c0023fc:	46bd      	mov	sp, r7
 c0023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002402:	4770      	bx	lr

0c002404 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 c002404:	b580      	push	{r7, lr}
 c002406:	b084      	sub	sp, #16
 c002408:	af00      	add	r7, sp, #0
 c00240a:	60f8      	str	r0, [r7, #12]
 c00240c:	60b9      	str	r1, [r7, #8]
 c00240e:	603b      	str	r3, [r7, #0]
 c002410:	4613      	mov	r3, r2
 c002412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 c002414:	e022      	b.n	c00245c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c002416:	69bb      	ldr	r3, [r7, #24]
 c002418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 c00241c:	d01e      	beq.n	c00245c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c00241e:	f7ff f805 	bl	c00142c <HAL_GetTick>
 c002422:	4602      	mov	r2, r0
 c002424:	683b      	ldr	r3, [r7, #0]
 c002426:	1ad3      	subs	r3, r2, r3
 c002428:	69ba      	ldr	r2, [r7, #24]
 c00242a:	429a      	cmp	r2, r3
 c00242c:	d302      	bcc.n	c002434 <OSPI_WaitFlagStateUntilTimeout+0x30>
 c00242e:	69bb      	ldr	r3, [r7, #24]
 c002430:	2b00      	cmp	r3, #0
 c002432:	d113      	bne.n	c00245c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 c002434:	68fb      	ldr	r3, [r7, #12]
 c002436:	681b      	ldr	r3, [r3, #0]
 c002438:	6a1a      	ldr	r2, [r3, #32]
 c00243a:	68bb      	ldr	r3, [r7, #8]
 c00243c:	401a      	ands	r2, r3
 c00243e:	79fb      	ldrb	r3, [r7, #7]
 c002440:	429a      	cmp	r2, r3
 c002442:	d00b      	beq.n	c00245c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 c002444:	68fb      	ldr	r3, [r7, #12]
 c002446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 c00244a:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 c00244c:	68fb      	ldr	r3, [r7, #12]
 c00244e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c002450:	f043 0201 	orr.w	r2, r3, #1
 c002454:	68fb      	ldr	r3, [r7, #12]
 c002456:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 c002458:	2301      	movs	r3, #1
 c00245a:	e00e      	b.n	c00247a <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 c00245c:	68fb      	ldr	r3, [r7, #12]
 c00245e:	681b      	ldr	r3, [r3, #0]
 c002460:	6a1a      	ldr	r2, [r3, #32]
 c002462:	68bb      	ldr	r3, [r7, #8]
 c002464:	4013      	ands	r3, r2
 c002466:	2b00      	cmp	r3, #0
 c002468:	bf14      	ite	ne
 c00246a:	2301      	movne	r3, #1
 c00246c:	2300      	moveq	r3, #0
 c00246e:	b2db      	uxtb	r3, r3
 c002470:	461a      	mov	r2, r3
 c002472:	79fb      	ldrb	r3, [r7, #7]
 c002474:	429a      	cmp	r2, r3
 c002476:	d1ce      	bne.n	c002416 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c002478:	2300      	movs	r3, #0
}
 c00247a:	4618      	mov	r0, r3
 c00247c:	3710      	adds	r7, #16
 c00247e:	46bd      	mov	sp, r7
 c002480:	bd80      	pop	{r7, pc}
	...

0c002484 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 c002484:	b580      	push	{r7, lr}
 c002486:	b084      	sub	sp, #16
 c002488:	af00      	add	r7, sp, #0
 c00248a:	6078      	str	r0, [r7, #4]
 c00248c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 c00248e:	2301      	movs	r3, #1
 c002490:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 c002492:	687b      	ldr	r3, [r7, #4]
 c002494:	681b      	ldr	r3, [r3, #0]
 c002496:	689a      	ldr	r2, [r3, #8]
 c002498:	687b      	ldr	r3, [r7, #4]
 c00249a:	681b      	ldr	r3, [r3, #0]
 c00249c:	f042 0202 	orr.w	r2, r2, #2
 c0024a0:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 c0024a2:	687b      	ldr	r3, [r7, #4]
 c0024a4:	2208      	movs	r2, #8
 c0024a6:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 c0024a8:	687b      	ldr	r3, [r7, #4]
 c0024aa:	681b      	ldr	r3, [r3, #0]
 c0024ac:	4a15      	ldr	r2, [pc, #84]	@ (c002504 <HAL_OSPI_DLYB_SetConfig+0x80>)
 c0024ae:	4293      	cmp	r3, r2
 c0024b0:	d109      	bne.n	c0024c6 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 c0024b2:	4815      	ldr	r0, [pc, #84]	@ (c002508 <HAL_OSPI_DLYB_SetConfig+0x84>)
 c0024b4:	f7ff fe56 	bl	c002164 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 c0024b8:	6839      	ldr	r1, [r7, #0]
 c0024ba:	4813      	ldr	r0, [pc, #76]	@ (c002508 <HAL_OSPI_DLYB_SetConfig+0x84>)
 c0024bc:	f002 fa76 	bl	c0049ac <LL_DLYB_SetDelay>
    status = HAL_OK;
 c0024c0:	2300      	movs	r3, #0
 c0024c2:	73fb      	strb	r3, [r7, #15]
 c0024c4:	e00d      	b.n	c0024e2 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 c0024c6:	687b      	ldr	r3, [r7, #4]
 c0024c8:	681b      	ldr	r3, [r3, #0]
 c0024ca:	4a10      	ldr	r2, [pc, #64]	@ (c00250c <HAL_OSPI_DLYB_SetConfig+0x88>)
 c0024cc:	4293      	cmp	r3, r2
 c0024ce:	d108      	bne.n	c0024e2 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 c0024d0:	480f      	ldr	r0, [pc, #60]	@ (c002510 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 c0024d2:	f7ff fe47 	bl	c002164 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 c0024d6:	6839      	ldr	r1, [r7, #0]
 c0024d8:	480d      	ldr	r0, [pc, #52]	@ (c002510 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 c0024da:	f002 fa67 	bl	c0049ac <LL_DLYB_SetDelay>
    status = HAL_OK;
 c0024de:	2300      	movs	r3, #0
 c0024e0:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 c0024e2:	6878      	ldr	r0, [r7, #4]
 c0024e4:	f7ff ff0a 	bl	c0022fc <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 c0024e8:	687b      	ldr	r3, [r7, #4]
 c0024ea:	681b      	ldr	r3, [r3, #0]
 c0024ec:	689a      	ldr	r2, [r3, #8]
 c0024ee:	687b      	ldr	r3, [r7, #4]
 c0024f0:	681b      	ldr	r3, [r3, #0]
 c0024f2:	f022 0202 	bic.w	r2, r2, #2
 c0024f6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 c0024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 c0024fa:	4618      	mov	r0, r3
 c0024fc:	3710      	adds	r7, #16
 c0024fe:	46bd      	mov	sp, r7
 c002500:	bd80      	pop	{r7, pc}
 c002502:	bf00      	nop
 c002504:	520d1400 	.word	0x520d1400
 c002508:	520cf000 	.word	0x520cf000
 c00250c:	520d2400 	.word	0x520d2400
 c002510:	520cf400 	.word	0x520cf400

0c002514 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c002514:	b480      	push	{r7}
 c002516:	b085      	sub	sp, #20
 c002518:	af00      	add	r7, sp, #0
 c00251a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 c00251c:	4b39      	ldr	r3, [pc, #228]	@ (c002604 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c00251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c002520:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 c002524:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c002526:	68ba      	ldr	r2, [r7, #8]
 c002528:	687b      	ldr	r3, [r7, #4]
 c00252a:	429a      	cmp	r2, r3
 c00252c:	d10b      	bne.n	c002546 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 c00252e:	687b      	ldr	r3, [r7, #4]
 c002530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c002534:	d905      	bls.n	c002542 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c002536:	4b33      	ldr	r3, [pc, #204]	@ (c002604 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002538:	68db      	ldr	r3, [r3, #12]
 c00253a:	4a32      	ldr	r2, [pc, #200]	@ (c002604 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c00253c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c002540:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 c002542:	2300      	movs	r3, #0
 c002544:	e057      	b.n	c0025f6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 c002546:	687b      	ldr	r3, [r7, #4]
 c002548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00254c:	d90a      	bls.n	c002564 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 c00254e:	4b2d      	ldr	r3, [pc, #180]	@ (c002604 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002550:	68db      	ldr	r3, [r3, #12]
 c002552:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c002556:	687b      	ldr	r3, [r7, #4]
 c002558:	4313      	orrs	r3, r2
 c00255a:	4a2a      	ldr	r2, [pc, #168]	@ (c002604 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c00255c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c002560:	60d3      	str	r3, [r2, #12]
 c002562:	e007      	b.n	c002574 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 c002564:	4b27      	ldr	r3, [pc, #156]	@ (c002604 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002566:	68db      	ldr	r3, [r3, #12]
 c002568:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c00256c:	4925      	ldr	r1, [pc, #148]	@ (c002604 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c00256e:	687b      	ldr	r3, [r7, #4]
 c002570:	4313      	orrs	r3, r2
 c002572:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c002574:	4b24      	ldr	r3, [pc, #144]	@ (c002608 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 c002576:	681b      	ldr	r3, [r3, #0]
 c002578:	4a24      	ldr	r2, [pc, #144]	@ (c00260c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c00257a:	fba2 2303 	umull	r2, r3, r2, r3
 c00257e:	099b      	lsrs	r3, r3, #6
 c002580:	2232      	movs	r2, #50	@ 0x32
 c002582:	fb02 f303 	mul.w	r3, r2, r3
 c002586:	4a21      	ldr	r2, [pc, #132]	@ (c00260c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c002588:	fba2 2303 	umull	r2, r3, r2, r3
 c00258c:	099b      	lsrs	r3, r3, #6
 c00258e:	3301      	adds	r3, #1
 c002590:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 c002592:	e002      	b.n	c00259a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 c002594:	68fb      	ldr	r3, [r7, #12]
 c002596:	3b01      	subs	r3, #1
 c002598:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 c00259a:	4b1a      	ldr	r3, [pc, #104]	@ (c002604 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c00259c:	68db      	ldr	r3, [r3, #12]
 c00259e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c0025a2:	2b00      	cmp	r3, #0
 c0025a4:	d102      	bne.n	c0025ac <HAL_PWREx_ControlVoltageScaling+0x98>
 c0025a6:	68fb      	ldr	r3, [r7, #12]
 c0025a8:	2b00      	cmp	r3, #0
 c0025aa:	d1f3      	bne.n	c002594 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 c0025ac:	68fb      	ldr	r3, [r7, #12]
 c0025ae:	2b00      	cmp	r3, #0
 c0025b0:	d01b      	beq.n	c0025ea <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c0025b2:	4b15      	ldr	r3, [pc, #84]	@ (c002608 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 c0025b4:	681b      	ldr	r3, [r3, #0]
 c0025b6:	4a15      	ldr	r2, [pc, #84]	@ (c00260c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c0025b8:	fba2 2303 	umull	r2, r3, r2, r3
 c0025bc:	099b      	lsrs	r3, r3, #6
 c0025be:	2232      	movs	r2, #50	@ 0x32
 c0025c0:	fb02 f303 	mul.w	r3, r2, r3
 c0025c4:	4a11      	ldr	r2, [pc, #68]	@ (c00260c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c0025c6:	fba2 2303 	umull	r2, r3, r2, r3
 c0025ca:	099b      	lsrs	r3, r3, #6
 c0025cc:	3301      	adds	r3, #1
 c0025ce:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 c0025d0:	e002      	b.n	c0025d8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 c0025d2:	68fb      	ldr	r3, [r7, #12]
 c0025d4:	3b01      	subs	r3, #1
 c0025d6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 c0025d8:	4b0a      	ldr	r3, [pc, #40]	@ (c002604 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c0025da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0025dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c0025e0:	2b00      	cmp	r3, #0
 c0025e2:	d102      	bne.n	c0025ea <HAL_PWREx_ControlVoltageScaling+0xd6>
 c0025e4:	68fb      	ldr	r3, [r7, #12]
 c0025e6:	2b00      	cmp	r3, #0
 c0025e8:	d1f3      	bne.n	c0025d2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c0025ea:	68fb      	ldr	r3, [r7, #12]
 c0025ec:	2b00      	cmp	r3, #0
 c0025ee:	d101      	bne.n	c0025f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 c0025f0:	2303      	movs	r3, #3
 c0025f2:	e000      	b.n	c0025f6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 c0025f4:	2300      	movs	r3, #0
}
 c0025f6:	4618      	mov	r0, r3
 c0025f8:	3714      	adds	r7, #20
 c0025fa:	46bd      	mov	sp, r7
 c0025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002600:	4770      	bx	lr
 c002602:	bf00      	nop
 c002604:	56020800 	.word	0x56020800
 c002608:	30000000 	.word	0x30000000
 c00260c:	10624dd3 	.word	0x10624dd3

0c002610 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c002610:	b480      	push	{r7}
 c002612:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 c002614:	4b04      	ldr	r3, [pc, #16]	@ (c002628 <HAL_PWREx_GetVoltageRange+0x18>)
 c002616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c002618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 c00261c:	4618      	mov	r0, r3
 c00261e:	46bd      	mov	sp, r7
 c002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002624:	4770      	bx	lr
 c002626:	bf00      	nop
 c002628:	56020800 	.word	0x56020800

0c00262c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 c00262c:	b480      	push	{r7}
 c00262e:	b085      	sub	sp, #20
 c002630:	af00      	add	r7, sp, #0
 c002632:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c002634:	4b22      	ldr	r3, [pc, #136]	@ (c0026c0 <HAL_PWREx_ConfigSupply+0x94>)
 c002636:	681b      	ldr	r3, [r3, #0]
 c002638:	4a22      	ldr	r2, [pc, #136]	@ (c0026c4 <HAL_PWREx_ConfigSupply+0x98>)
 c00263a:	fba2 2303 	umull	r2, r3, r2, r3
 c00263e:	099b      	lsrs	r3, r3, #6
 c002640:	2232      	movs	r2, #50	@ 0x32
 c002642:	fb02 f303 	mul.w	r3, r2, r3
 c002646:	4a1f      	ldr	r2, [pc, #124]	@ (c0026c4 <HAL_PWREx_ConfigSupply+0x98>)
 c002648:	fba2 2303 	umull	r2, r3, r2, r3
 c00264c:	099b      	lsrs	r3, r3, #6
 c00264e:	3301      	adds	r3, #1
 c002650:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 c002652:	687b      	ldr	r3, [r7, #4]
 c002654:	2b00      	cmp	r3, #0
 c002656:	d113      	bne.n	c002680 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c002658:	4b1b      	ldr	r3, [pc, #108]	@ (c0026c8 <HAL_PWREx_ConfigSupply+0x9c>)
 c00265a:	689b      	ldr	r3, [r3, #8]
 c00265c:	4a1a      	ldr	r2, [pc, #104]	@ (c0026c8 <HAL_PWREx_ConfigSupply+0x9c>)
 c00265e:	f023 0302 	bic.w	r3, r3, #2
 c002662:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c002664:	e002      	b.n	c00266c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 c002666:	68fb      	ldr	r3, [r7, #12]
 c002668:	3b01      	subs	r3, #1
 c00266a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c00266c:	4b16      	ldr	r3, [pc, #88]	@ (c0026c8 <HAL_PWREx_ConfigSupply+0x9c>)
 c00266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c002670:	f003 0302 	and.w	r3, r3, #2
 c002674:	2b02      	cmp	r3, #2
 c002676:	d116      	bne.n	c0026a6 <HAL_PWREx_ConfigSupply+0x7a>
 c002678:	68fb      	ldr	r3, [r7, #12]
 c00267a:	2b00      	cmp	r3, #0
 c00267c:	d1f3      	bne.n	c002666 <HAL_PWREx_ConfigSupply+0x3a>
 c00267e:	e012      	b.n	c0026a6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c002680:	4b11      	ldr	r3, [pc, #68]	@ (c0026c8 <HAL_PWREx_ConfigSupply+0x9c>)
 c002682:	689b      	ldr	r3, [r3, #8]
 c002684:	4a10      	ldr	r2, [pc, #64]	@ (c0026c8 <HAL_PWREx_ConfigSupply+0x9c>)
 c002686:	f043 0302 	orr.w	r3, r3, #2
 c00268a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c00268c:	e002      	b.n	c002694 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 c00268e:	68fb      	ldr	r3, [r7, #12]
 c002690:	3b01      	subs	r3, #1
 c002692:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c002694:	4b0c      	ldr	r3, [pc, #48]	@ (c0026c8 <HAL_PWREx_ConfigSupply+0x9c>)
 c002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c002698:	f003 0302 	and.w	r3, r3, #2
 c00269c:	2b00      	cmp	r3, #0
 c00269e:	d102      	bne.n	c0026a6 <HAL_PWREx_ConfigSupply+0x7a>
 c0026a0:	68fb      	ldr	r3, [r7, #12]
 c0026a2:	2b00      	cmp	r3, #0
 c0026a4:	d1f3      	bne.n	c00268e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c0026a6:	68fb      	ldr	r3, [r7, #12]
 c0026a8:	2b00      	cmp	r3, #0
 c0026aa:	d101      	bne.n	c0026b0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 c0026ac:	2303      	movs	r3, #3
 c0026ae:	e000      	b.n	c0026b2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 c0026b0:	2300      	movs	r3, #0
}
 c0026b2:	4618      	mov	r0, r3
 c0026b4:	3714      	adds	r7, #20
 c0026b6:	46bd      	mov	sp, r7
 c0026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0026bc:	4770      	bx	lr
 c0026be:	bf00      	nop
 c0026c0:	30000000 	.word	0x30000000
 c0026c4:	10624dd3 	.word	0x10624dd3
 c0026c8:	56020800 	.word	0x56020800

0c0026cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c0026cc:	b480      	push	{r7}
 c0026ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 c0026d0:	4b05      	ldr	r3, [pc, #20]	@ (c0026e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c0026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0026d4:	4a04      	ldr	r2, [pc, #16]	@ (c0026e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c0026d6:	f043 0301 	orr.w	r3, r3, #1
 c0026da:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 c0026dc:	bf00      	nop
 c0026de:	46bd      	mov	sp, r7
 c0026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0026e4:	4770      	bx	lr
 c0026e6:	bf00      	nop
 c0026e8:	56020800 	.word	0x56020800

0c0026ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 c0026ec:	b580      	push	{r7, lr}
 c0026ee:	b08e      	sub	sp, #56	@ 0x38
 c0026f0:	af00      	add	r7, sp, #0
 c0026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 c0026f4:	2300      	movs	r3, #0
 c0026f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 c0026fa:	687b      	ldr	r3, [r7, #4]
 c0026fc:	2b00      	cmp	r3, #0
 c0026fe:	d102      	bne.n	c002706 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 c002700:	2301      	movs	r3, #1
 c002702:	f000 bec8 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c002706:	4b99      	ldr	r3, [pc, #612]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002708:	69db      	ldr	r3, [r3, #28]
 c00270a:	f003 030c 	and.w	r3, r3, #12
 c00270e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002710:	4b96      	ldr	r3, [pc, #600]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002714:	f003 0303 	and.w	r3, r3, #3
 c002718:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c00271a:	687b      	ldr	r3, [r7, #4]
 c00271c:	681b      	ldr	r3, [r3, #0]
 c00271e:	f003 0310 	and.w	r3, r3, #16
 c002722:	2b00      	cmp	r3, #0
 c002724:	f000 816c 	beq.w	c002a00 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c002728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00272a:	2b00      	cmp	r3, #0
 c00272c:	d007      	beq.n	c00273e <HAL_RCC_OscConfig+0x52>
 c00272e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c002730:	2b0c      	cmp	r3, #12
 c002732:	f040 80de 	bne.w	c0028f2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c002736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c002738:	2b01      	cmp	r3, #1
 c00273a:	f040 80da 	bne.w	c0028f2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 c00273e:	687b      	ldr	r3, [r7, #4]
 c002740:	69db      	ldr	r3, [r3, #28]
 c002742:	2b00      	cmp	r3, #0
 c002744:	d102      	bne.n	c00274c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 c002746:	2301      	movs	r3, #1
 c002748:	f000 bea5 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c00274c:	687b      	ldr	r3, [r7, #4]
 c00274e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c002750:	4b86      	ldr	r3, [pc, #536]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002752:	689b      	ldr	r3, [r3, #8]
 c002754:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c002758:	2b00      	cmp	r3, #0
 c00275a:	d004      	beq.n	c002766 <HAL_RCC_OscConfig+0x7a>
 c00275c:	4b83      	ldr	r3, [pc, #524]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c00275e:	689b      	ldr	r3, [r3, #8]
 c002760:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c002764:	e005      	b.n	c002772 <HAL_RCC_OscConfig+0x86>
 c002766:	4b81      	ldr	r3, [pc, #516]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00276c:	041b      	lsls	r3, r3, #16
 c00276e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c002772:	4293      	cmp	r3, r2
 c002774:	d255      	bcs.n	c002822 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c002776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c002778:	2b00      	cmp	r3, #0
 c00277a:	d10a      	bne.n	c002792 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c00277c:	687b      	ldr	r3, [r7, #4]
 c00277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002780:	4618      	mov	r0, r3
 c002782:	f001 f99d 	bl	c003ac0 <RCC_SetFlashLatencyFromMSIRange>
 c002786:	4603      	mov	r3, r0
 c002788:	2b00      	cmp	r3, #0
 c00278a:	d002      	beq.n	c002792 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 c00278c:	2301      	movs	r3, #1
 c00278e:	f000 be82 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c002792:	4b76      	ldr	r3, [pc, #472]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002794:	689b      	ldr	r3, [r3, #8]
 c002796:	4a75      	ldr	r2, [pc, #468]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002798:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c00279c:	6093      	str	r3, [r2, #8]
 c00279e:	4b73      	ldr	r3, [pc, #460]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c0027a0:	689b      	ldr	r3, [r3, #8]
 c0027a2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c0027a6:	687b      	ldr	r3, [r7, #4]
 c0027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0027aa:	4970      	ldr	r1, [pc, #448]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c0027ac:	4313      	orrs	r3, r2
 c0027ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c0027b0:	687b      	ldr	r3, [r7, #4]
 c0027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0027b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c0027b8:	d309      	bcc.n	c0027ce <HAL_RCC_OscConfig+0xe2>
 c0027ba:	4b6c      	ldr	r3, [pc, #432]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c0027bc:	68db      	ldr	r3, [r3, #12]
 c0027be:	f023 021f 	bic.w	r2, r3, #31
 c0027c2:	687b      	ldr	r3, [r7, #4]
 c0027c4:	6a1b      	ldr	r3, [r3, #32]
 c0027c6:	4969      	ldr	r1, [pc, #420]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c0027c8:	4313      	orrs	r3, r2
 c0027ca:	60cb      	str	r3, [r1, #12]
 c0027cc:	e07e      	b.n	c0028cc <HAL_RCC_OscConfig+0x1e0>
 c0027ce:	687b      	ldr	r3, [r7, #4]
 c0027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0027d2:	2b00      	cmp	r3, #0
 c0027d4:	da0a      	bge.n	c0027ec <HAL_RCC_OscConfig+0x100>
 c0027d6:	4b65      	ldr	r3, [pc, #404]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c0027d8:	68db      	ldr	r3, [r3, #12]
 c0027da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c0027de:	687b      	ldr	r3, [r7, #4]
 c0027e0:	6a1b      	ldr	r3, [r3, #32]
 c0027e2:	015b      	lsls	r3, r3, #5
 c0027e4:	4961      	ldr	r1, [pc, #388]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c0027e6:	4313      	orrs	r3, r2
 c0027e8:	60cb      	str	r3, [r1, #12]
 c0027ea:	e06f      	b.n	c0028cc <HAL_RCC_OscConfig+0x1e0>
 c0027ec:	687b      	ldr	r3, [r7, #4]
 c0027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c0027f4:	d30a      	bcc.n	c00280c <HAL_RCC_OscConfig+0x120>
 c0027f6:	4b5d      	ldr	r3, [pc, #372]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c0027f8:	68db      	ldr	r3, [r3, #12]
 c0027fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c0027fe:	687b      	ldr	r3, [r7, #4]
 c002800:	6a1b      	ldr	r3, [r3, #32]
 c002802:	029b      	lsls	r3, r3, #10
 c002804:	4959      	ldr	r1, [pc, #356]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002806:	4313      	orrs	r3, r2
 c002808:	60cb      	str	r3, [r1, #12]
 c00280a:	e05f      	b.n	c0028cc <HAL_RCC_OscConfig+0x1e0>
 c00280c:	4b57      	ldr	r3, [pc, #348]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c00280e:	68db      	ldr	r3, [r3, #12]
 c002810:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c002814:	687b      	ldr	r3, [r7, #4]
 c002816:	6a1b      	ldr	r3, [r3, #32]
 c002818:	03db      	lsls	r3, r3, #15
 c00281a:	4954      	ldr	r1, [pc, #336]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c00281c:	4313      	orrs	r3, r2
 c00281e:	60cb      	str	r3, [r1, #12]
 c002820:	e054      	b.n	c0028cc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c002822:	4b52      	ldr	r3, [pc, #328]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002824:	689b      	ldr	r3, [r3, #8]
 c002826:	4a51      	ldr	r2, [pc, #324]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002828:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c00282c:	6093      	str	r3, [r2, #8]
 c00282e:	4b4f      	ldr	r3, [pc, #316]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002830:	689b      	ldr	r3, [r3, #8]
 c002832:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c002836:	687b      	ldr	r3, [r7, #4]
 c002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00283a:	494c      	ldr	r1, [pc, #304]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c00283c:	4313      	orrs	r3, r2
 c00283e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c002840:	687b      	ldr	r3, [r7, #4]
 c002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002844:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c002848:	d309      	bcc.n	c00285e <HAL_RCC_OscConfig+0x172>
 c00284a:	4b48      	ldr	r3, [pc, #288]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c00284c:	68db      	ldr	r3, [r3, #12]
 c00284e:	f023 021f 	bic.w	r2, r3, #31
 c002852:	687b      	ldr	r3, [r7, #4]
 c002854:	6a1b      	ldr	r3, [r3, #32]
 c002856:	4945      	ldr	r1, [pc, #276]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002858:	4313      	orrs	r3, r2
 c00285a:	60cb      	str	r3, [r1, #12]
 c00285c:	e028      	b.n	c0028b0 <HAL_RCC_OscConfig+0x1c4>
 c00285e:	687b      	ldr	r3, [r7, #4]
 c002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002862:	2b00      	cmp	r3, #0
 c002864:	da0a      	bge.n	c00287c <HAL_RCC_OscConfig+0x190>
 c002866:	4b41      	ldr	r3, [pc, #260]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002868:	68db      	ldr	r3, [r3, #12]
 c00286a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c00286e:	687b      	ldr	r3, [r7, #4]
 c002870:	6a1b      	ldr	r3, [r3, #32]
 c002872:	015b      	lsls	r3, r3, #5
 c002874:	493d      	ldr	r1, [pc, #244]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002876:	4313      	orrs	r3, r2
 c002878:	60cb      	str	r3, [r1, #12]
 c00287a:	e019      	b.n	c0028b0 <HAL_RCC_OscConfig+0x1c4>
 c00287c:	687b      	ldr	r3, [r7, #4]
 c00287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c002884:	d30a      	bcc.n	c00289c <HAL_RCC_OscConfig+0x1b0>
 c002886:	4b39      	ldr	r3, [pc, #228]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002888:	68db      	ldr	r3, [r3, #12]
 c00288a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c00288e:	687b      	ldr	r3, [r7, #4]
 c002890:	6a1b      	ldr	r3, [r3, #32]
 c002892:	029b      	lsls	r3, r3, #10
 c002894:	4935      	ldr	r1, [pc, #212]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002896:	4313      	orrs	r3, r2
 c002898:	60cb      	str	r3, [r1, #12]
 c00289a:	e009      	b.n	c0028b0 <HAL_RCC_OscConfig+0x1c4>
 c00289c:	4b33      	ldr	r3, [pc, #204]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c00289e:	68db      	ldr	r3, [r3, #12]
 c0028a0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c0028a4:	687b      	ldr	r3, [r7, #4]
 c0028a6:	6a1b      	ldr	r3, [r3, #32]
 c0028a8:	03db      	lsls	r3, r3, #15
 c0028aa:	4930      	ldr	r1, [pc, #192]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c0028ac:	4313      	orrs	r3, r2
 c0028ae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0028b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0028b2:	2b00      	cmp	r3, #0
 c0028b4:	d10a      	bne.n	c0028cc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0028b6:	687b      	ldr	r3, [r7, #4]
 c0028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0028ba:	4618      	mov	r0, r3
 c0028bc:	f001 f900 	bl	c003ac0 <RCC_SetFlashLatencyFromMSIRange>
 c0028c0:	4603      	mov	r3, r0
 c0028c2:	2b00      	cmp	r3, #0
 c0028c4:	d002      	beq.n	c0028cc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 c0028c6:	2301      	movs	r3, #1
 c0028c8:	f000 bde5 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 c0028cc:	f001 f8de 	bl	c003a8c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c0028d0:	4b27      	ldr	r3, [pc, #156]	@ (c002970 <HAL_RCC_OscConfig+0x284>)
 c0028d2:	681b      	ldr	r3, [r3, #0]
 c0028d4:	4618      	mov	r0, r3
 c0028d6:	f7fe fd1f 	bl	c001318 <HAL_InitTick>
 c0028da:	4603      	mov	r3, r0
 c0028dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 c0028e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 c0028e4:	2b00      	cmp	r3, #0
 c0028e6:	f000 808a 	beq.w	c0029fe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 c0028ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 c0028ee:	f000 bdd2 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c0028f2:	687b      	ldr	r3, [r7, #4]
 c0028f4:	69db      	ldr	r3, [r3, #28]
 c0028f6:	2b00      	cmp	r3, #0
 c0028f8:	d066      	beq.n	c0029c8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 c0028fa:	4b1c      	ldr	r3, [pc, #112]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c0028fc:	681b      	ldr	r3, [r3, #0]
 c0028fe:	4a1b      	ldr	r2, [pc, #108]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002900:	f043 0301 	orr.w	r3, r3, #1
 c002904:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c002906:	f7fe fd91 	bl	c00142c <HAL_GetTick>
 c00290a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c00290c:	e009      	b.n	c002922 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00290e:	f7fe fd8d 	bl	c00142c <HAL_GetTick>
 c002912:	4602      	mov	r2, r0
 c002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002916:	1ad3      	subs	r3, r2, r3
 c002918:	2b02      	cmp	r3, #2
 c00291a:	d902      	bls.n	c002922 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 c00291c:	2303      	movs	r3, #3
 c00291e:	f000 bdba 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c002922:	4b12      	ldr	r3, [pc, #72]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002924:	681b      	ldr	r3, [r3, #0]
 c002926:	f003 0304 	and.w	r3, r3, #4
 c00292a:	2b00      	cmp	r3, #0
 c00292c:	d0ef      	beq.n	c00290e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c00292e:	4b0f      	ldr	r3, [pc, #60]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002930:	689b      	ldr	r3, [r3, #8]
 c002932:	4a0e      	ldr	r2, [pc, #56]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002934:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c002938:	6093      	str	r3, [r2, #8]
 c00293a:	4b0c      	ldr	r3, [pc, #48]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c00293c:	689b      	ldr	r3, [r3, #8]
 c00293e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c002942:	687b      	ldr	r3, [r7, #4]
 c002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002946:	4909      	ldr	r1, [pc, #36]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002948:	4313      	orrs	r3, r2
 c00294a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c00294c:	687b      	ldr	r3, [r7, #4]
 c00294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002950:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c002954:	d30e      	bcc.n	c002974 <HAL_RCC_OscConfig+0x288>
 c002956:	4b05      	ldr	r3, [pc, #20]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002958:	68db      	ldr	r3, [r3, #12]
 c00295a:	f023 021f 	bic.w	r2, r3, #31
 c00295e:	687b      	ldr	r3, [r7, #4]
 c002960:	6a1b      	ldr	r3, [r3, #32]
 c002962:	4902      	ldr	r1, [pc, #8]	@ (c00296c <HAL_RCC_OscConfig+0x280>)
 c002964:	4313      	orrs	r3, r2
 c002966:	60cb      	str	r3, [r1, #12]
 c002968:	e04a      	b.n	c002a00 <HAL_RCC_OscConfig+0x314>
 c00296a:	bf00      	nop
 c00296c:	56020c00 	.word	0x56020c00
 c002970:	30000004 	.word	0x30000004
 c002974:	687b      	ldr	r3, [r7, #4]
 c002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002978:	2b00      	cmp	r3, #0
 c00297a:	da0a      	bge.n	c002992 <HAL_RCC_OscConfig+0x2a6>
 c00297c:	4b98      	ldr	r3, [pc, #608]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c00297e:	68db      	ldr	r3, [r3, #12]
 c002980:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c002984:	687b      	ldr	r3, [r7, #4]
 c002986:	6a1b      	ldr	r3, [r3, #32]
 c002988:	015b      	lsls	r3, r3, #5
 c00298a:	4995      	ldr	r1, [pc, #596]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c00298c:	4313      	orrs	r3, r2
 c00298e:	60cb      	str	r3, [r1, #12]
 c002990:	e036      	b.n	c002a00 <HAL_RCC_OscConfig+0x314>
 c002992:	687b      	ldr	r3, [r7, #4]
 c002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c00299a:	d30a      	bcc.n	c0029b2 <HAL_RCC_OscConfig+0x2c6>
 c00299c:	4b90      	ldr	r3, [pc, #576]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c00299e:	68db      	ldr	r3, [r3, #12]
 c0029a0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c0029a4:	687b      	ldr	r3, [r7, #4]
 c0029a6:	6a1b      	ldr	r3, [r3, #32]
 c0029a8:	029b      	lsls	r3, r3, #10
 c0029aa:	498d      	ldr	r1, [pc, #564]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c0029ac:	4313      	orrs	r3, r2
 c0029ae:	60cb      	str	r3, [r1, #12]
 c0029b0:	e026      	b.n	c002a00 <HAL_RCC_OscConfig+0x314>
 c0029b2:	4b8b      	ldr	r3, [pc, #556]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c0029b4:	68db      	ldr	r3, [r3, #12]
 c0029b6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c0029ba:	687b      	ldr	r3, [r7, #4]
 c0029bc:	6a1b      	ldr	r3, [r3, #32]
 c0029be:	03db      	lsls	r3, r3, #15
 c0029c0:	4987      	ldr	r1, [pc, #540]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c0029c2:	4313      	orrs	r3, r2
 c0029c4:	60cb      	str	r3, [r1, #12]
 c0029c6:	e01b      	b.n	c002a00 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 c0029c8:	4b85      	ldr	r3, [pc, #532]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c0029ca:	681b      	ldr	r3, [r3, #0]
 c0029cc:	4a84      	ldr	r2, [pc, #528]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c0029ce:	f023 0301 	bic.w	r3, r3, #1
 c0029d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c0029d4:	f7fe fd2a 	bl	c00142c <HAL_GetTick>
 c0029d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 c0029da:	e009      	b.n	c0029f0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c0029dc:	f7fe fd26 	bl	c00142c <HAL_GetTick>
 c0029e0:	4602      	mov	r2, r0
 c0029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0029e4:	1ad3      	subs	r3, r2, r3
 c0029e6:	2b02      	cmp	r3, #2
 c0029e8:	d902      	bls.n	c0029f0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 c0029ea:	2303      	movs	r3, #3
 c0029ec:	f000 bd53 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 c0029f0:	4b7b      	ldr	r3, [pc, #492]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c0029f2:	681b      	ldr	r3, [r3, #0]
 c0029f4:	f003 0304 	and.w	r3, r3, #4
 c0029f8:	2b00      	cmp	r3, #0
 c0029fa:	d1ef      	bne.n	c0029dc <HAL_RCC_OscConfig+0x2f0>
 c0029fc:	e000      	b.n	c002a00 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 c0029fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c002a00:	687b      	ldr	r3, [r7, #4]
 c002a02:	681b      	ldr	r3, [r3, #0]
 c002a04:	f003 0301 	and.w	r3, r3, #1
 c002a08:	2b00      	cmp	r3, #0
 c002a0a:	f000 808b 	beq.w	c002b24 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c002a10:	2b08      	cmp	r3, #8
 c002a12:	d005      	beq.n	c002a20 <HAL_RCC_OscConfig+0x334>
 c002a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c002a16:	2b0c      	cmp	r3, #12
 c002a18:	d109      	bne.n	c002a2e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c002a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c002a1c:	2b03      	cmp	r3, #3
 c002a1e:	d106      	bne.n	c002a2e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 c002a20:	687b      	ldr	r3, [r7, #4]
 c002a22:	685b      	ldr	r3, [r3, #4]
 c002a24:	2b00      	cmp	r3, #0
 c002a26:	d17d      	bne.n	c002b24 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 c002a28:	2301      	movs	r3, #1
 c002a2a:	f000 bd34 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 c002a2e:	687b      	ldr	r3, [r7, #4]
 c002a30:	685b      	ldr	r3, [r3, #4]
 c002a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c002a36:	d106      	bne.n	c002a46 <HAL_RCC_OscConfig+0x35a>
 c002a38:	4b69      	ldr	r3, [pc, #420]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a3a:	681b      	ldr	r3, [r3, #0]
 c002a3c:	4a68      	ldr	r2, [pc, #416]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c002a42:	6013      	str	r3, [r2, #0]
 c002a44:	e041      	b.n	c002aca <HAL_RCC_OscConfig+0x3de>
 c002a46:	687b      	ldr	r3, [r7, #4]
 c002a48:	685b      	ldr	r3, [r3, #4]
 c002a4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 c002a4e:	d112      	bne.n	c002a76 <HAL_RCC_OscConfig+0x38a>
 c002a50:	4b63      	ldr	r3, [pc, #396]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a52:	681b      	ldr	r3, [r3, #0]
 c002a54:	4a62      	ldr	r2, [pc, #392]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c002a5a:	6013      	str	r3, [r2, #0]
 c002a5c:	4b60      	ldr	r3, [pc, #384]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a5e:	681b      	ldr	r3, [r3, #0]
 c002a60:	4a5f      	ldr	r2, [pc, #380]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a62:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 c002a66:	6013      	str	r3, [r2, #0]
 c002a68:	4b5d      	ldr	r3, [pc, #372]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a6a:	681b      	ldr	r3, [r3, #0]
 c002a6c:	4a5c      	ldr	r2, [pc, #368]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c002a72:	6013      	str	r3, [r2, #0]
 c002a74:	e029      	b.n	c002aca <HAL_RCC_OscConfig+0x3de>
 c002a76:	687b      	ldr	r3, [r7, #4]
 c002a78:	685b      	ldr	r3, [r3, #4]
 c002a7a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 c002a7e:	d112      	bne.n	c002aa6 <HAL_RCC_OscConfig+0x3ba>
 c002a80:	4b57      	ldr	r3, [pc, #348]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a82:	681b      	ldr	r3, [r3, #0]
 c002a84:	4a56      	ldr	r2, [pc, #344]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c002a8a:	6013      	str	r3, [r2, #0]
 c002a8c:	4b54      	ldr	r3, [pc, #336]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a8e:	681b      	ldr	r3, [r3, #0]
 c002a90:	4a53      	ldr	r2, [pc, #332]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c002a96:	6013      	str	r3, [r2, #0]
 c002a98:	4b51      	ldr	r3, [pc, #324]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a9a:	681b      	ldr	r3, [r3, #0]
 c002a9c:	4a50      	ldr	r2, [pc, #320]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c002aa2:	6013      	str	r3, [r2, #0]
 c002aa4:	e011      	b.n	c002aca <HAL_RCC_OscConfig+0x3de>
 c002aa6:	4b4e      	ldr	r3, [pc, #312]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002aa8:	681b      	ldr	r3, [r3, #0]
 c002aaa:	4a4d      	ldr	r2, [pc, #308]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c002ab0:	6013      	str	r3, [r2, #0]
 c002ab2:	4b4b      	ldr	r3, [pc, #300]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002ab4:	681b      	ldr	r3, [r3, #0]
 c002ab6:	4a4a      	ldr	r2, [pc, #296]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c002abc:	6013      	str	r3, [r2, #0]
 c002abe:	4b48      	ldr	r3, [pc, #288]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002ac0:	681b      	ldr	r3, [r3, #0]
 c002ac2:	4a47      	ldr	r2, [pc, #284]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002ac4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 c002ac8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c002aca:	687b      	ldr	r3, [r7, #4]
 c002acc:	685b      	ldr	r3, [r3, #4]
 c002ace:	2b00      	cmp	r3, #0
 c002ad0:	d014      	beq.n	c002afc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 c002ad2:	f7fe fcab 	bl	c00142c <HAL_GetTick>
 c002ad6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002ad8:	e009      	b.n	c002aee <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002ada:	f7fe fca7 	bl	c00142c <HAL_GetTick>
 c002ade:	4602      	mov	r2, r0
 c002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002ae2:	1ad3      	subs	r3, r2, r3
 c002ae4:	2b64      	cmp	r3, #100	@ 0x64
 c002ae6:	d902      	bls.n	c002aee <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 c002ae8:	2303      	movs	r3, #3
 c002aea:	f000 bcd4 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002aee:	4b3c      	ldr	r3, [pc, #240]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002af0:	681b      	ldr	r3, [r3, #0]
 c002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c002af6:	2b00      	cmp	r3, #0
 c002af8:	d0ef      	beq.n	c002ada <HAL_RCC_OscConfig+0x3ee>
 c002afa:	e013      	b.n	c002b24 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 c002afc:	f7fe fc96 	bl	c00142c <HAL_GetTick>
 c002b00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002b02:	e009      	b.n	c002b18 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002b04:	f7fe fc92 	bl	c00142c <HAL_GetTick>
 c002b08:	4602      	mov	r2, r0
 c002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002b0c:	1ad3      	subs	r3, r2, r3
 c002b0e:	2b64      	cmp	r3, #100	@ 0x64
 c002b10:	d902      	bls.n	c002b18 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 c002b12:	2303      	movs	r3, #3
 c002b14:	f000 bcbf 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002b18:	4b31      	ldr	r3, [pc, #196]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002b1a:	681b      	ldr	r3, [r3, #0]
 c002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c002b20:	2b00      	cmp	r3, #0
 c002b22:	d1ef      	bne.n	c002b04 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c002b24:	687b      	ldr	r3, [r7, #4]
 c002b26:	681b      	ldr	r3, [r3, #0]
 c002b28:	f003 0302 	and.w	r3, r3, #2
 c002b2c:	2b00      	cmp	r3, #0
 c002b2e:	d05f      	beq.n	c002bf0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c002b32:	2b04      	cmp	r3, #4
 c002b34:	d005      	beq.n	c002b42 <HAL_RCC_OscConfig+0x456>
 c002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c002b38:	2b0c      	cmp	r3, #12
 c002b3a:	d114      	bne.n	c002b66 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c002b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c002b3e:	2b02      	cmp	r3, #2
 c002b40:	d111      	bne.n	c002b66 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 c002b42:	687b      	ldr	r3, [r7, #4]
 c002b44:	68db      	ldr	r3, [r3, #12]
 c002b46:	2b00      	cmp	r3, #0
 c002b48:	d102      	bne.n	c002b50 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 c002b4a:	2301      	movs	r3, #1
 c002b4c:	f000 bca3 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 c002b50:	4b23      	ldr	r3, [pc, #140]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002b52:	691b      	ldr	r3, [r3, #16]
 c002b54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 c002b58:	687b      	ldr	r3, [r7, #4]
 c002b5a:	691b      	ldr	r3, [r3, #16]
 c002b5c:	041b      	lsls	r3, r3, #16
 c002b5e:	4920      	ldr	r1, [pc, #128]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002b60:	4313      	orrs	r3, r2
 c002b62:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 c002b64:	e044      	b.n	c002bf0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c002b66:	687b      	ldr	r3, [r7, #4]
 c002b68:	68db      	ldr	r3, [r3, #12]
 c002b6a:	2b00      	cmp	r3, #0
 c002b6c:	d024      	beq.n	c002bb8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 c002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002b70:	681b      	ldr	r3, [r3, #0]
 c002b72:	4a1b      	ldr	r2, [pc, #108]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c002b78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c002b7a:	f7fe fc57 	bl	c00142c <HAL_GetTick>
 c002b7e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002b80:	e009      	b.n	c002b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002b82:	f7fe fc53 	bl	c00142c <HAL_GetTick>
 c002b86:	4602      	mov	r2, r0
 c002b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002b8a:	1ad3      	subs	r3, r2, r3
 c002b8c:	2b02      	cmp	r3, #2
 c002b8e:	d902      	bls.n	c002b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 c002b90:	2303      	movs	r3, #3
 c002b92:	f000 bc80 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002b96:	4b12      	ldr	r3, [pc, #72]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002b98:	681b      	ldr	r3, [r3, #0]
 c002b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c002b9e:	2b00      	cmp	r3, #0
 c002ba0:	d0ef      	beq.n	c002b82 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 c002ba2:	4b0f      	ldr	r3, [pc, #60]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002ba4:	691b      	ldr	r3, [r3, #16]
 c002ba6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 c002baa:	687b      	ldr	r3, [r7, #4]
 c002bac:	691b      	ldr	r3, [r3, #16]
 c002bae:	041b      	lsls	r3, r3, #16
 c002bb0:	490b      	ldr	r1, [pc, #44]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002bb2:	4313      	orrs	r3, r2
 c002bb4:	610b      	str	r3, [r1, #16]
 c002bb6:	e01b      	b.n	c002bf0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 c002bb8:	4b09      	ldr	r3, [pc, #36]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002bba:	681b      	ldr	r3, [r3, #0]
 c002bbc:	4a08      	ldr	r2, [pc, #32]	@ (c002be0 <HAL_RCC_OscConfig+0x4f4>)
 c002bbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 c002bc2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c002bc4:	f7fe fc32 	bl	c00142c <HAL_GetTick>
 c002bc8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002bca:	e00b      	b.n	c002be4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002bcc:	f7fe fc2e 	bl	c00142c <HAL_GetTick>
 c002bd0:	4602      	mov	r2, r0
 c002bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002bd4:	1ad3      	subs	r3, r2, r3
 c002bd6:	2b02      	cmp	r3, #2
 c002bd8:	d904      	bls.n	c002be4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 c002bda:	2303      	movs	r3, #3
 c002bdc:	f000 bc5b 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
 c002be0:	56020c00 	.word	0x56020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002be4:	4baf      	ldr	r3, [pc, #700]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002be6:	681b      	ldr	r3, [r3, #0]
 c002be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c002bec:	2b00      	cmp	r3, #0
 c002bee:	d1ed      	bne.n	c002bcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c002bf0:	687b      	ldr	r3, [r7, #4]
 c002bf2:	681b      	ldr	r3, [r3, #0]
 c002bf4:	f003 0308 	and.w	r3, r3, #8
 c002bf8:	2b00      	cmp	r3, #0
 c002bfa:	f000 80c8 	beq.w	c002d8e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 c002bfe:	2300      	movs	r3, #0
 c002c00:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c002c04:	4ba7      	ldr	r3, [pc, #668]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002c0a:	f003 0304 	and.w	r3, r3, #4
 c002c0e:	2b00      	cmp	r3, #0
 c002c10:	d111      	bne.n	c002c36 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c002c12:	4ba4      	ldr	r3, [pc, #656]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002c18:	4aa2      	ldr	r2, [pc, #648]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002c1a:	f043 0304 	orr.w	r3, r3, #4
 c002c1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c002c22:	4ba0      	ldr	r3, [pc, #640]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002c28:	f003 0304 	and.w	r3, r3, #4
 c002c2c:	617b      	str	r3, [r7, #20]
 c002c2e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 c002c30:	2301      	movs	r3, #1
 c002c32:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c002c36:	4b9c      	ldr	r3, [pc, #624]	@ (c002ea8 <HAL_RCC_OscConfig+0x7bc>)
 c002c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002c3a:	f003 0301 	and.w	r3, r3, #1
 c002c3e:	2b00      	cmp	r3, #0
 c002c40:	d119      	bne.n	c002c76 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c002c42:	4b99      	ldr	r3, [pc, #612]	@ (c002ea8 <HAL_RCC_OscConfig+0x7bc>)
 c002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002c46:	4a98      	ldr	r2, [pc, #608]	@ (c002ea8 <HAL_RCC_OscConfig+0x7bc>)
 c002c48:	f043 0301 	orr.w	r3, r3, #1
 c002c4c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c002c4e:	f7fe fbed 	bl	c00142c <HAL_GetTick>
 c002c52:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c002c54:	e009      	b.n	c002c6a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c002c56:	f7fe fbe9 	bl	c00142c <HAL_GetTick>
 c002c5a:	4602      	mov	r2, r0
 c002c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002c5e:	1ad3      	subs	r3, r2, r3
 c002c60:	2b02      	cmp	r3, #2
 c002c62:	d902      	bls.n	c002c6a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 c002c64:	2303      	movs	r3, #3
 c002c66:	f000 bc16 	b.w	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c002c6a:	4b8f      	ldr	r3, [pc, #572]	@ (c002ea8 <HAL_RCC_OscConfig+0x7bc>)
 c002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002c6e:	f003 0301 	and.w	r3, r3, #1
 c002c72:	2b00      	cmp	r3, #0
 c002c74:	d0ef      	beq.n	c002c56 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c002c76:	687b      	ldr	r3, [r7, #4]
 c002c78:	695b      	ldr	r3, [r3, #20]
 c002c7a:	2b00      	cmp	r3, #0
 c002c7c:	d05f      	beq.n	c002d3e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 c002c7e:	4b89      	ldr	r3, [pc, #548]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002c84:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 c002c86:	687b      	ldr	r3, [r7, #4]
 c002c88:	699a      	ldr	r2, [r3, #24]
 c002c8a:	6a3b      	ldr	r3, [r7, #32]
 c002c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c002c90:	429a      	cmp	r2, r3
 c002c92:	d037      	beq.n	c002d04 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 c002c94:	6a3b      	ldr	r3, [r7, #32]
 c002c96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c002c9a:	2b00      	cmp	r3, #0
 c002c9c:	d006      	beq.n	c002cac <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 c002c9e:	6a3b      	ldr	r3, [r7, #32]
 c002ca0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 c002ca4:	2b00      	cmp	r3, #0
 c002ca6:	d101      	bne.n	c002cac <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 c002ca8:	2301      	movs	r3, #1
 c002caa:	e3f4      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 c002cac:	6a3b      	ldr	r3, [r7, #32]
 c002cae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 c002cb2:	2b00      	cmp	r3, #0
 c002cb4:	d01b      	beq.n	c002cee <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 c002cb6:	4b7b      	ldr	r3, [pc, #492]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002cbc:	4a79      	ldr	r2, [pc, #484]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002cbe:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 c002cc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 c002cc6:	f7fe fbb1 	bl	c00142c <HAL_GetTick>
 c002cca:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c002ccc:	e008      	b.n	c002ce0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002cce:	f7fe fbad 	bl	c00142c <HAL_GetTick>
 c002cd2:	4602      	mov	r2, r0
 c002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002cd6:	1ad3      	subs	r3, r2, r3
 c002cd8:	2b05      	cmp	r3, #5
 c002cda:	d901      	bls.n	c002ce0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 c002cdc:	2303      	movs	r3, #3
 c002cde:	e3da      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c002ce0:	4b70      	ldr	r3, [pc, #448]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c002cea:	2b00      	cmp	r3, #0
 c002cec:	d1ef      	bne.n	c002cce <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 c002cee:	4b6d      	ldr	r3, [pc, #436]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002cf4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 c002cf8:	687b      	ldr	r3, [r7, #4]
 c002cfa:	699b      	ldr	r3, [r3, #24]
 c002cfc:	4969      	ldr	r1, [pc, #420]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002cfe:	4313      	orrs	r3, r2
 c002d00:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 c002d04:	4b67      	ldr	r3, [pc, #412]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002d0a:	4a66      	ldr	r2, [pc, #408]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002d0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c002d10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 c002d14:	f7fe fb8a 	bl	c00142c <HAL_GetTick>
 c002d18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c002d1a:	e008      	b.n	c002d2e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002d1c:	f7fe fb86 	bl	c00142c <HAL_GetTick>
 c002d20:	4602      	mov	r2, r0
 c002d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002d24:	1ad3      	subs	r3, r2, r3
 c002d26:	2b05      	cmp	r3, #5
 c002d28:	d901      	bls.n	c002d2e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 c002d2a:	2303      	movs	r3, #3
 c002d2c:	e3b3      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c002d2e:	4b5d      	ldr	r3, [pc, #372]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c002d38:	2b00      	cmp	r3, #0
 c002d3a:	d0ef      	beq.n	c002d1c <HAL_RCC_OscConfig+0x630>
 c002d3c:	e01b      	b.n	c002d76 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 c002d3e:	4b59      	ldr	r3, [pc, #356]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002d44:	4a57      	ldr	r2, [pc, #348]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002d46:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 c002d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 c002d4e:	f7fe fb6d 	bl	c00142c <HAL_GetTick>
 c002d52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c002d54:	e008      	b.n	c002d68 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002d56:	f7fe fb69 	bl	c00142c <HAL_GetTick>
 c002d5a:	4602      	mov	r2, r0
 c002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002d5e:	1ad3      	subs	r3, r2, r3
 c002d60:	2b05      	cmp	r3, #5
 c002d62:	d901      	bls.n	c002d68 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 c002d64:	2303      	movs	r3, #3
 c002d66:	e396      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c002d68:	4b4e      	ldr	r3, [pc, #312]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002d6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c002d72:	2b00      	cmp	r3, #0
 c002d74:	d1ef      	bne.n	c002d56 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c002d76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 c002d7a:	2b01      	cmp	r3, #1
 c002d7c:	d107      	bne.n	c002d8e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002d7e:	4b49      	ldr	r3, [pc, #292]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002d84:	4a47      	ldr	r2, [pc, #284]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002d86:	f023 0304 	bic.w	r3, r3, #4
 c002d8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c002d8e:	687b      	ldr	r3, [r7, #4]
 c002d90:	681b      	ldr	r3, [r3, #0]
 c002d92:	f003 0304 	and.w	r3, r3, #4
 c002d96:	2b00      	cmp	r3, #0
 c002d98:	f000 8111 	beq.w	c002fbe <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 c002d9c:	2300      	movs	r3, #0
 c002d9e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c002da2:	4b40      	ldr	r3, [pc, #256]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002da8:	f003 0304 	and.w	r3, r3, #4
 c002dac:	2b00      	cmp	r3, #0
 c002dae:	d111      	bne.n	c002dd4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c002db0:	4b3c      	ldr	r3, [pc, #240]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002db6:	4a3b      	ldr	r2, [pc, #236]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002db8:	f043 0304 	orr.w	r3, r3, #4
 c002dbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c002dc0:	4b38      	ldr	r3, [pc, #224]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002dc6:	f003 0304 	and.w	r3, r3, #4
 c002dca:	613b      	str	r3, [r7, #16]
 c002dcc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 c002dce:	2301      	movs	r3, #1
 c002dd0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c002dd4:	4b34      	ldr	r3, [pc, #208]	@ (c002ea8 <HAL_RCC_OscConfig+0x7bc>)
 c002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002dd8:	f003 0301 	and.w	r3, r3, #1
 c002ddc:	2b00      	cmp	r3, #0
 c002dde:	d118      	bne.n	c002e12 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c002de0:	4b31      	ldr	r3, [pc, #196]	@ (c002ea8 <HAL_RCC_OscConfig+0x7bc>)
 c002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002de4:	4a30      	ldr	r2, [pc, #192]	@ (c002ea8 <HAL_RCC_OscConfig+0x7bc>)
 c002de6:	f043 0301 	orr.w	r3, r3, #1
 c002dea:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c002dec:	f7fe fb1e 	bl	c00142c <HAL_GetTick>
 c002df0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c002df2:	e008      	b.n	c002e06 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c002df4:	f7fe fb1a 	bl	c00142c <HAL_GetTick>
 c002df8:	4602      	mov	r2, r0
 c002dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002dfc:	1ad3      	subs	r3, r2, r3
 c002dfe:	2b02      	cmp	r3, #2
 c002e00:	d901      	bls.n	c002e06 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 c002e02:	2303      	movs	r3, #3
 c002e04:	e347      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c002e06:	4b28      	ldr	r3, [pc, #160]	@ (c002ea8 <HAL_RCC_OscConfig+0x7bc>)
 c002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002e0a:	f003 0301 	and.w	r3, r3, #1
 c002e0e:	2b00      	cmp	r3, #0
 c002e10:	d0f0      	beq.n	c002df4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c002e12:	687b      	ldr	r3, [r7, #4]
 c002e14:	689b      	ldr	r3, [r3, #8]
 c002e16:	f003 0301 	and.w	r3, r3, #1
 c002e1a:	2b00      	cmp	r3, #0
 c002e1c:	d01f      	beq.n	c002e5e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c002e1e:	687b      	ldr	r3, [r7, #4]
 c002e20:	689b      	ldr	r3, [r3, #8]
 c002e22:	f003 0304 	and.w	r3, r3, #4
 c002e26:	2b00      	cmp	r3, #0
 c002e28:	d010      	beq.n	c002e4c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002e2a:	4b1e      	ldr	r3, [pc, #120]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002e30:	4a1c      	ldr	r2, [pc, #112]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e32:	f043 0304 	orr.w	r3, r3, #4
 c002e36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002e3a:	4b1a      	ldr	r3, [pc, #104]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002e40:	4a18      	ldr	r2, [pc, #96]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e42:	f043 0301 	orr.w	r3, r3, #1
 c002e46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c002e4a:	e018      	b.n	c002e7e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002e4c:	4b15      	ldr	r3, [pc, #84]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002e52:	4a14      	ldr	r2, [pc, #80]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e54:	f043 0301 	orr.w	r3, r3, #1
 c002e58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c002e5c:	e00f      	b.n	c002e7e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002e5e:	4b11      	ldr	r3, [pc, #68]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002e64:	4a0f      	ldr	r2, [pc, #60]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e66:	f023 0301 	bic.w	r3, r3, #1
 c002e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002e6e:	4b0d      	ldr	r3, [pc, #52]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002e74:	4a0b      	ldr	r2, [pc, #44]	@ (c002ea4 <HAL_RCC_OscConfig+0x7b8>)
 c002e76:	f023 0304 	bic.w	r3, r3, #4
 c002e7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c002e7e:	687b      	ldr	r3, [r7, #4]
 c002e80:	689b      	ldr	r3, [r3, #8]
 c002e82:	2b00      	cmp	r3, #0
 c002e84:	d057      	beq.n	c002f36 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 c002e86:	f7fe fad1 	bl	c00142c <HAL_GetTick>
 c002e8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002e8c:	e00e      	b.n	c002eac <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002e8e:	f7fe facd 	bl	c00142c <HAL_GetTick>
 c002e92:	4602      	mov	r2, r0
 c002e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002e96:	1ad3      	subs	r3, r2, r3
 c002e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002e9c:	4293      	cmp	r3, r2
 c002e9e:	d905      	bls.n	c002eac <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 c002ea0:	2303      	movs	r3, #3
 c002ea2:	e2f8      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
 c002ea4:	56020c00 	.word	0x56020c00
 c002ea8:	56020800 	.word	0x56020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002eac:	4b9c      	ldr	r3, [pc, #624]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002eb2:	f003 0302 	and.w	r3, r3, #2
 c002eb6:	2b00      	cmp	r3, #0
 c002eb8:	d0e9      	beq.n	c002e8e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c002eba:	687b      	ldr	r3, [r7, #4]
 c002ebc:	689b      	ldr	r3, [r3, #8]
 c002ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c002ec2:	2b00      	cmp	r3, #0
 c002ec4:	d01b      	beq.n	c002efe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002ec6:	4b96      	ldr	r3, [pc, #600]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002ecc:	4a94      	ldr	r2, [pc, #592]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c002ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c002ed6:	e00a      	b.n	c002eee <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002ed8:	f7fe faa8 	bl	c00142c <HAL_GetTick>
 c002edc:	4602      	mov	r2, r0
 c002ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002ee0:	1ad3      	subs	r3, r2, r3
 c002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002ee6:	4293      	cmp	r3, r2
 c002ee8:	d901      	bls.n	c002eee <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 c002eea:	2303      	movs	r3, #3
 c002eec:	e2d3      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c002eee:	4b8c      	ldr	r3, [pc, #560]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c002ef8:	2b00      	cmp	r3, #0
 c002efa:	d0ed      	beq.n	c002ed8 <HAL_RCC_OscConfig+0x7ec>
 c002efc:	e053      	b.n	c002fa6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002efe:	4b88      	ldr	r3, [pc, #544]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002f04:	4a86      	ldr	r2, [pc, #536]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c002f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002f0e:	e00a      	b.n	c002f26 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002f10:	f7fe fa8c 	bl	c00142c <HAL_GetTick>
 c002f14:	4602      	mov	r2, r0
 c002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002f18:	1ad3      	subs	r3, r2, r3
 c002f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002f1e:	4293      	cmp	r3, r2
 c002f20:	d901      	bls.n	c002f26 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 c002f22:	2303      	movs	r3, #3
 c002f24:	e2b7      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002f26:	4b7e      	ldr	r3, [pc, #504]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c002f30:	2b00      	cmp	r3, #0
 c002f32:	d1ed      	bne.n	c002f10 <HAL_RCC_OscConfig+0x824>
 c002f34:	e037      	b.n	c002fa6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 c002f36:	f7fe fa79 	bl	c00142c <HAL_GetTick>
 c002f3a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002f3c:	e00a      	b.n	c002f54 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002f3e:	f7fe fa75 	bl	c00142c <HAL_GetTick>
 c002f42:	4602      	mov	r2, r0
 c002f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002f46:	1ad3      	subs	r3, r2, r3
 c002f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002f4c:	4293      	cmp	r3, r2
 c002f4e:	d901      	bls.n	c002f54 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 c002f50:	2303      	movs	r3, #3
 c002f52:	e2a0      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002f54:	4b72      	ldr	r3, [pc, #456]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002f5a:	f003 0302 	and.w	r3, r3, #2
 c002f5e:	2b00      	cmp	r3, #0
 c002f60:	d1ed      	bne.n	c002f3e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c002f62:	4b6f      	ldr	r3, [pc, #444]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c002f6c:	2b00      	cmp	r3, #0
 c002f6e:	d01a      	beq.n	c002fa6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002f70:	4b6b      	ldr	r3, [pc, #428]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002f76:	4a6a      	ldr	r2, [pc, #424]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c002f7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002f80:	e00a      	b.n	c002f98 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002f82:	f7fe fa53 	bl	c00142c <HAL_GetTick>
 c002f86:	4602      	mov	r2, r0
 c002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002f8a:	1ad3      	subs	r3, r2, r3
 c002f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002f90:	4293      	cmp	r3, r2
 c002f92:	d901      	bls.n	c002f98 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 c002f94:	2303      	movs	r3, #3
 c002f96:	e27e      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002f98:	4b61      	ldr	r3, [pc, #388]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c002fa2:	2b00      	cmp	r3, #0
 c002fa4:	d1ed      	bne.n	c002f82 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c002fa6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 c002faa:	2b01      	cmp	r3, #1
 c002fac:	d107      	bne.n	c002fbe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002fae:	4b5c      	ldr	r3, [pc, #368]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002fb4:	4a5a      	ldr	r2, [pc, #360]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002fb6:	f023 0304 	bic.w	r3, r3, #4
 c002fba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c002fbe:	687b      	ldr	r3, [r7, #4]
 c002fc0:	681b      	ldr	r3, [r3, #0]
 c002fc2:	f003 0320 	and.w	r3, r3, #32
 c002fc6:	2b00      	cmp	r3, #0
 c002fc8:	d036      	beq.n	c003038 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c002fca:	687b      	ldr	r3, [r7, #4]
 c002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c002fce:	2b00      	cmp	r3, #0
 c002fd0:	d019      	beq.n	c003006 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 c002fd2:	4b53      	ldr	r3, [pc, #332]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002fd4:	681b      	ldr	r3, [r3, #0]
 c002fd6:	4a52      	ldr	r2, [pc, #328]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002fd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 c002fdc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c002fde:	f7fe fa25 	bl	c00142c <HAL_GetTick>
 c002fe2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c002fe4:	e008      	b.n	c002ff8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c002fe6:	f7fe fa21 	bl	c00142c <HAL_GetTick>
 c002fea:	4602      	mov	r2, r0
 c002fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002fee:	1ad3      	subs	r3, r2, r3
 c002ff0:	2b02      	cmp	r3, #2
 c002ff2:	d901      	bls.n	c002ff8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 c002ff4:	2303      	movs	r3, #3
 c002ff6:	e24e      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c002ff8:	4b49      	ldr	r3, [pc, #292]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c002ffa:	681b      	ldr	r3, [r3, #0]
 c002ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c003000:	2b00      	cmp	r3, #0
 c003002:	d0f0      	beq.n	c002fe6 <HAL_RCC_OscConfig+0x8fa>
 c003004:	e018      	b.n	c003038 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 c003006:	4b46      	ldr	r3, [pc, #280]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c003008:	681b      	ldr	r3, [r3, #0]
 c00300a:	4a45      	ldr	r2, [pc, #276]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c00300c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 c003010:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003012:	f7fe fa0b 	bl	c00142c <HAL_GetTick>
 c003016:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c003018:	e008      	b.n	c00302c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c00301a:	f7fe fa07 	bl	c00142c <HAL_GetTick>
 c00301e:	4602      	mov	r2, r0
 c003020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003022:	1ad3      	subs	r3, r2, r3
 c003024:	2b02      	cmp	r3, #2
 c003026:	d901      	bls.n	c00302c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 c003028:	2303      	movs	r3, #3
 c00302a:	e234      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c00302c:	4b3c      	ldr	r3, [pc, #240]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c00302e:	681b      	ldr	r3, [r3, #0]
 c003030:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c003034:	2b00      	cmp	r3, #0
 c003036:	d1f0      	bne.n	c00301a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 c003038:	687b      	ldr	r3, [r7, #4]
 c00303a:	681b      	ldr	r3, [r3, #0]
 c00303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c003040:	2b00      	cmp	r3, #0
 c003042:	d036      	beq.n	c0030b2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 c003044:	687b      	ldr	r3, [r7, #4]
 c003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c003048:	2b00      	cmp	r3, #0
 c00304a:	d019      	beq.n	c003080 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 c00304c:	4b34      	ldr	r3, [pc, #208]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c00304e:	681b      	ldr	r3, [r3, #0]
 c003050:	4a33      	ldr	r2, [pc, #204]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c003052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c003056:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003058:	f7fe f9e8 	bl	c00142c <HAL_GetTick>
 c00305c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 c00305e:	e008      	b.n	c003072 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 c003060:	f7fe f9e4 	bl	c00142c <HAL_GetTick>
 c003064:	4602      	mov	r2, r0
 c003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003068:	1ad3      	subs	r3, r2, r3
 c00306a:	2b02      	cmp	r3, #2
 c00306c:	d901      	bls.n	c003072 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 c00306e:	2303      	movs	r3, #3
 c003070:	e211      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 c003072:	4b2b      	ldr	r3, [pc, #172]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c003074:	681b      	ldr	r3, [r3, #0]
 c003076:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c00307a:	2b00      	cmp	r3, #0
 c00307c:	d0f0      	beq.n	c003060 <HAL_RCC_OscConfig+0x974>
 c00307e:	e018      	b.n	c0030b2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 c003080:	4b27      	ldr	r3, [pc, #156]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c003082:	681b      	ldr	r3, [r3, #0]
 c003084:	4a26      	ldr	r2, [pc, #152]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c003086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 c00308a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c00308c:	f7fe f9ce 	bl	c00142c <HAL_GetTick>
 c003090:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 c003092:	e008      	b.n	c0030a6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 c003094:	f7fe f9ca 	bl	c00142c <HAL_GetTick>
 c003098:	4602      	mov	r2, r0
 c00309a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00309c:	1ad3      	subs	r3, r2, r3
 c00309e:	2b02      	cmp	r3, #2
 c0030a0:	d901      	bls.n	c0030a6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 c0030a2:	2303      	movs	r3, #3
 c0030a4:	e1f7      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 c0030a6:	4b1e      	ldr	r3, [pc, #120]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c0030a8:	681b      	ldr	r3, [r3, #0]
 c0030aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c0030ae:	2b00      	cmp	r3, #0
 c0030b0:	d1f0      	bne.n	c003094 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 c0030b2:	687b      	ldr	r3, [r7, #4]
 c0030b4:	681b      	ldr	r3, [r3, #0]
 c0030b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c0030ba:	2b00      	cmp	r3, #0
 c0030bc:	d07f      	beq.n	c0031be <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 c0030be:	687b      	ldr	r3, [r7, #4]
 c0030c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0030c2:	2b00      	cmp	r3, #0
 c0030c4:	d062      	beq.n	c00318c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 c0030c6:	4b16      	ldr	r3, [pc, #88]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c0030c8:	689b      	ldr	r3, [r3, #8]
 c0030ca:	4a15      	ldr	r2, [pc, #84]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c0030cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c0030d0:	6093      	str	r3, [r2, #8]
 c0030d2:	4b13      	ldr	r3, [pc, #76]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c0030d4:	689b      	ldr	r3, [r3, #8]
 c0030d6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 c0030da:	687b      	ldr	r3, [r7, #4]
 c0030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0030de:	4910      	ldr	r1, [pc, #64]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c0030e0:	4313      	orrs	r3, r2
 c0030e2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c0030e4:	687b      	ldr	r3, [r7, #4]
 c0030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0030e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c0030ec:	d309      	bcc.n	c003102 <HAL_RCC_OscConfig+0xa16>
 c0030ee:	4b0c      	ldr	r3, [pc, #48]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c0030f0:	68db      	ldr	r3, [r3, #12]
 c0030f2:	f023 021f 	bic.w	r2, r3, #31
 c0030f6:	687b      	ldr	r3, [r7, #4]
 c0030f8:	6a1b      	ldr	r3, [r3, #32]
 c0030fa:	4909      	ldr	r1, [pc, #36]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c0030fc:	4313      	orrs	r3, r2
 c0030fe:	60cb      	str	r3, [r1, #12]
 c003100:	e02a      	b.n	c003158 <HAL_RCC_OscConfig+0xa6c>
 c003102:	687b      	ldr	r3, [r7, #4]
 c003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003106:	2b00      	cmp	r3, #0
 c003108:	da0c      	bge.n	c003124 <HAL_RCC_OscConfig+0xa38>
 c00310a:	4b05      	ldr	r3, [pc, #20]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c00310c:	68db      	ldr	r3, [r3, #12]
 c00310e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c003112:	687b      	ldr	r3, [r7, #4]
 c003114:	6a1b      	ldr	r3, [r3, #32]
 c003116:	015b      	lsls	r3, r3, #5
 c003118:	4901      	ldr	r1, [pc, #4]	@ (c003120 <HAL_RCC_OscConfig+0xa34>)
 c00311a:	4313      	orrs	r3, r2
 c00311c:	60cb      	str	r3, [r1, #12]
 c00311e:	e01b      	b.n	c003158 <HAL_RCC_OscConfig+0xa6c>
 c003120:	56020c00 	.word	0x56020c00
 c003124:	687b      	ldr	r3, [r7, #4]
 c003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c00312c:	d30a      	bcc.n	c003144 <HAL_RCC_OscConfig+0xa58>
 c00312e:	4ba1      	ldr	r3, [pc, #644]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003130:	68db      	ldr	r3, [r3, #12]
 c003132:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c003136:	687b      	ldr	r3, [r7, #4]
 c003138:	6a1b      	ldr	r3, [r3, #32]
 c00313a:	029b      	lsls	r3, r3, #10
 c00313c:	499d      	ldr	r1, [pc, #628]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c00313e:	4313      	orrs	r3, r2
 c003140:	60cb      	str	r3, [r1, #12]
 c003142:	e009      	b.n	c003158 <HAL_RCC_OscConfig+0xa6c>
 c003144:	4b9b      	ldr	r3, [pc, #620]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003146:	68db      	ldr	r3, [r3, #12]
 c003148:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c00314c:	687b      	ldr	r3, [r7, #4]
 c00314e:	6a1b      	ldr	r3, [r3, #32]
 c003150:	03db      	lsls	r3, r3, #15
 c003152:	4998      	ldr	r1, [pc, #608]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003154:	4313      	orrs	r3, r2
 c003156:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 c003158:	4b96      	ldr	r3, [pc, #600]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c00315a:	681b      	ldr	r3, [r3, #0]
 c00315c:	4a95      	ldr	r2, [pc, #596]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c00315e:	f043 0310 	orr.w	r3, r3, #16
 c003162:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003164:	f7fe f962 	bl	c00142c <HAL_GetTick>
 c003168:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 c00316a:	e008      	b.n	c00317e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 c00316c:	f7fe f95e 	bl	c00142c <HAL_GetTick>
 c003170:	4602      	mov	r2, r0
 c003172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003174:	1ad3      	subs	r3, r2, r3
 c003176:	2b02      	cmp	r3, #2
 c003178:	d901      	bls.n	c00317e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 c00317a:	2303      	movs	r3, #3
 c00317c:	e18b      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 c00317e:	4b8d      	ldr	r3, [pc, #564]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003180:	681b      	ldr	r3, [r3, #0]
 c003182:	f003 0320 	and.w	r3, r3, #32
 c003186:	2b00      	cmp	r3, #0
 c003188:	d0f0      	beq.n	c00316c <HAL_RCC_OscConfig+0xa80>
 c00318a:	e018      	b.n	c0031be <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 c00318c:	4b89      	ldr	r3, [pc, #548]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c00318e:	681b      	ldr	r3, [r3, #0]
 c003190:	4a88      	ldr	r2, [pc, #544]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003192:	f023 0310 	bic.w	r3, r3, #16
 c003196:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c003198:	f7fe f948 	bl	c00142c <HAL_GetTick>
 c00319c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 c00319e:	e008      	b.n	c0031b2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 c0031a0:	f7fe f944 	bl	c00142c <HAL_GetTick>
 c0031a4:	4602      	mov	r2, r0
 c0031a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0031a8:	1ad3      	subs	r3, r2, r3
 c0031aa:	2b02      	cmp	r3, #2
 c0031ac:	d901      	bls.n	c0031b2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 c0031ae:	2303      	movs	r3, #3
 c0031b0:	e171      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 c0031b2:	4b80      	ldr	r3, [pc, #512]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0031b4:	681b      	ldr	r3, [r3, #0]
 c0031b6:	f003 0320 	and.w	r3, r3, #32
 c0031ba:	2b00      	cmp	r3, #0
 c0031bc:	d1f0      	bne.n	c0031a0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 c0031be:	687b      	ldr	r3, [r7, #4]
 c0031c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0031c2:	2b00      	cmp	r3, #0
 c0031c4:	f000 8166 	beq.w	c003494 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 c0031c8:	2300      	movs	r3, #0
 c0031ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0031ce:	4b79      	ldr	r3, [pc, #484]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0031d0:	69db      	ldr	r3, [r3, #28]
 c0031d2:	f003 030c 	and.w	r3, r3, #12
 c0031d6:	2b0c      	cmp	r3, #12
 c0031d8:	f000 80f2 	beq.w	c0033c0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 c0031dc:	687b      	ldr	r3, [r7, #4]
 c0031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0031e0:	2b02      	cmp	r3, #2
 c0031e2:	f040 80c5 	bne.w	c003370 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 c0031e6:	4b73      	ldr	r3, [pc, #460]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0031e8:	681b      	ldr	r3, [r3, #0]
 c0031ea:	4a72      	ldr	r2, [pc, #456]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0031ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c0031f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c0031f2:	f7fe f91b 	bl	c00142c <HAL_GetTick>
 c0031f6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0031f8:	e008      	b.n	c00320c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0031fa:	f7fe f917 	bl	c00142c <HAL_GetTick>
 c0031fe:	4602      	mov	r2, r0
 c003200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c003202:	1ad3      	subs	r3, r2, r3
 c003204:	2b02      	cmp	r3, #2
 c003206:	d901      	bls.n	c00320c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 c003208:	2303      	movs	r3, #3
 c00320a:	e144      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c00320c:	4b69      	ldr	r3, [pc, #420]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c00320e:	681b      	ldr	r3, [r3, #0]
 c003210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c003214:	2b00      	cmp	r3, #0
 c003216:	d1f0      	bne.n	c0031fa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003218:	4b66      	ldr	r3, [pc, #408]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c00321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00321e:	f003 0304 	and.w	r3, r3, #4
 c003222:	2b00      	cmp	r3, #0
 c003224:	d111      	bne.n	c00324a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 c003226:	4b63      	ldr	r3, [pc, #396]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00322c:	4a61      	ldr	r2, [pc, #388]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c00322e:	f043 0304 	orr.w	r3, r3, #4
 c003232:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c003236:	4b5f      	ldr	r3, [pc, #380]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00323c:	f003 0304 	and.w	r3, r3, #4
 c003240:	60fb      	str	r3, [r7, #12]
 c003242:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 c003244:	2301      	movs	r3, #1
 c003246:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 c00324a:	4b5b      	ldr	r3, [pc, #364]	@ (c0033b8 <HAL_RCC_OscConfig+0xccc>)
 c00324c:	68db      	ldr	r3, [r3, #12]
 c00324e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c003252:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c003256:	d102      	bne.n	c00325e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 c003258:	2301      	movs	r3, #1
 c00325a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c00325e:	4b56      	ldr	r3, [pc, #344]	@ (c0033b8 <HAL_RCC_OscConfig+0xccc>)
 c003260:	68db      	ldr	r3, [r3, #12]
 c003262:	4a55      	ldr	r2, [pc, #340]	@ (c0033b8 <HAL_RCC_OscConfig+0xccc>)
 c003264:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c003268:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 c00326a:	4b52      	ldr	r3, [pc, #328]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c00326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00326e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c003272:	f023 0303 	bic.w	r3, r3, #3
 c003276:	687a      	ldr	r2, [r7, #4]
 c003278:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 c00327a:	687a      	ldr	r2, [r7, #4]
 c00327c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 c00327e:	3a01      	subs	r2, #1
 c003280:	0212      	lsls	r2, r2, #8
 c003282:	4311      	orrs	r1, r2
 c003284:	687a      	ldr	r2, [r7, #4]
 c003286:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 c003288:	430a      	orrs	r2, r1
 c00328a:	494a      	ldr	r1, [pc, #296]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c00328c:	4313      	orrs	r3, r2
 c00328e:	628b      	str	r3, [r1, #40]	@ 0x28
 c003290:	4b48      	ldr	r3, [pc, #288]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c003294:	4b49      	ldr	r3, [pc, #292]	@ (c0033bc <HAL_RCC_OscConfig+0xcd0>)
 c003296:	4013      	ands	r3, r2
 c003298:	687a      	ldr	r2, [r7, #4]
 c00329a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 c00329c:	3a01      	subs	r2, #1
 c00329e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c0032a2:	687a      	ldr	r2, [r7, #4]
 c0032a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 c0032a6:	3a01      	subs	r2, #1
 c0032a8:	0252      	lsls	r2, r2, #9
 c0032aa:	b292      	uxth	r2, r2
 c0032ac:	4311      	orrs	r1, r2
 c0032ae:	687a      	ldr	r2, [r7, #4]
 c0032b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 c0032b2:	3a01      	subs	r2, #1
 c0032b4:	0412      	lsls	r2, r2, #16
 c0032b6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c0032ba:	4311      	orrs	r1, r2
 c0032bc:	687a      	ldr	r2, [r7, #4]
 c0032be:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 c0032c0:	3a01      	subs	r2, #1
 c0032c2:	0612      	lsls	r2, r2, #24
 c0032c4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c0032c8:	430a      	orrs	r2, r1
 c0032ca:	493a      	ldr	r1, [pc, #232]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0032cc:	4313      	orrs	r3, r2
 c0032ce:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 c0032d0:	4b38      	ldr	r3, [pc, #224]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0032d4:	4a37      	ldr	r2, [pc, #220]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0032d6:	f023 0310 	bic.w	r3, r3, #16
 c0032da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 c0032dc:	687b      	ldr	r3, [r7, #4]
 c0032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c0032e0:	4a34      	ldr	r2, [pc, #208]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0032e2:	00db      	lsls	r3, r3, #3
 c0032e4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 c0032e6:	4b33      	ldr	r3, [pc, #204]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0032ea:	4a32      	ldr	r2, [pc, #200]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0032ec:	f043 0310 	orr.w	r3, r3, #16
 c0032f0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 c0032f2:	4b30      	ldr	r3, [pc, #192]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0032f6:	f023 020c 	bic.w	r2, r3, #12
 c0032fa:	687b      	ldr	r3, [r7, #4]
 c0032fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c0032fe:	492d      	ldr	r1, [pc, #180]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003300:	4313      	orrs	r3, r2
 c003302:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 c003304:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 c003308:	2b01      	cmp	r3, #1
 c00330a:	d105      	bne.n	c003318 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c00330c:	4b2a      	ldr	r3, [pc, #168]	@ (c0033b8 <HAL_RCC_OscConfig+0xccc>)
 c00330e:	68db      	ldr	r3, [r3, #12]
 c003310:	4a29      	ldr	r2, [pc, #164]	@ (c0033b8 <HAL_RCC_OscConfig+0xccc>)
 c003312:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c003316:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 c003318:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 c00331c:	2b01      	cmp	r3, #1
 c00331e:	d107      	bne.n	c003330 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 c003320:	4b24      	ldr	r3, [pc, #144]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003326:	4a23      	ldr	r2, [pc, #140]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003328:	f023 0304 	bic.w	r3, r3, #4
 c00332c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 c003330:	4b20      	ldr	r3, [pc, #128]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003332:	681b      	ldr	r3, [r3, #0]
 c003334:	4a1f      	ldr	r2, [pc, #124]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c00333a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c00333c:	f7fe f876 	bl	c00142c <HAL_GetTick>
 c003340:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003342:	e008      	b.n	c003356 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003344:	f7fe f872 	bl	c00142c <HAL_GetTick>
 c003348:	4602      	mov	r2, r0
 c00334a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00334c:	1ad3      	subs	r3, r2, r3
 c00334e:	2b02      	cmp	r3, #2
 c003350:	d901      	bls.n	c003356 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 c003352:	2303      	movs	r3, #3
 c003354:	e09f      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003356:	4b17      	ldr	r3, [pc, #92]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003358:	681b      	ldr	r3, [r3, #0]
 c00335a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c00335e:	2b00      	cmp	r3, #0
 c003360:	d0f0      	beq.n	c003344 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 c003362:	4b14      	ldr	r3, [pc, #80]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003366:	4a13      	ldr	r2, [pc, #76]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c00336c:	6293      	str	r3, [r2, #40]	@ 0x28
 c00336e:	e091      	b.n	c003494 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 c003370:	4b10      	ldr	r3, [pc, #64]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003372:	681b      	ldr	r3, [r3, #0]
 c003374:	4a0f      	ldr	r2, [pc, #60]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c00337a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c00337c:	f7fe f856 	bl	c00142c <HAL_GetTick>
 c003380:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003382:	e008      	b.n	c003396 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003384:	f7fe f852 	bl	c00142c <HAL_GetTick>
 c003388:	4602      	mov	r2, r0
 c00338a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00338c:	1ad3      	subs	r3, r2, r3
 c00338e:	2b02      	cmp	r3, #2
 c003390:	d901      	bls.n	c003396 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 c003392:	2303      	movs	r3, #3
 c003394:	e07f      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c003396:	4b07      	ldr	r3, [pc, #28]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c003398:	681b      	ldr	r3, [r3, #0]
 c00339a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c00339e:	2b00      	cmp	r3, #0
 c0033a0:	d1f0      	bne.n	c003384 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 c0033a2:	4b04      	ldr	r3, [pc, #16]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0033a6:	4a03      	ldr	r2, [pc, #12]	@ (c0033b4 <HAL_RCC_OscConfig+0xcc8>)
 c0033a8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 c0033ac:	f023 0303 	bic.w	r3, r3, #3
 c0033b0:	6293      	str	r3, [r2, #40]	@ 0x28
 c0033b2:	e06f      	b.n	c003494 <HAL_RCC_OscConfig+0xda8>
 c0033b4:	56020c00 	.word	0x56020c00
 c0033b8:	56020800 	.word	0x56020800
 c0033bc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 c0033c0:	4b37      	ldr	r3, [pc, #220]	@ (c0034a0 <HAL_RCC_OscConfig+0xdb4>)
 c0033c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0033c4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 c0033c6:	4b36      	ldr	r3, [pc, #216]	@ (c0034a0 <HAL_RCC_OscConfig+0xdb4>)
 c0033c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0033ca:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c0033cc:	687b      	ldr	r3, [r7, #4]
 c0033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0033d0:	2b01      	cmp	r3, #1
 c0033d2:	d039      	beq.n	c003448 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 c0033d4:	69fb      	ldr	r3, [r7, #28]
 c0033d6:	f003 0203 	and.w	r2, r3, #3
 c0033da:	687b      	ldr	r3, [r7, #4]
 c0033dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c0033de:	429a      	cmp	r2, r3
 c0033e0:	d132      	bne.n	c003448 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 c0033e2:	69fb      	ldr	r3, [r7, #28]
 c0033e4:	0a1b      	lsrs	r3, r3, #8
 c0033e6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 c0033ea:	687b      	ldr	r3, [r7, #4]
 c0033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c0033ee:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 c0033f0:	429a      	cmp	r2, r3
 c0033f2:	d129      	bne.n	c003448 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 c0033f4:	69fb      	ldr	r3, [r7, #28]
 c0033f6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 c0033fa:	687b      	ldr	r3, [r7, #4]
 c0033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 c0033fe:	429a      	cmp	r2, r3
 c003400:	d122      	bne.n	c003448 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 c003402:	69bb      	ldr	r3, [r7, #24]
 c003404:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c003408:	687b      	ldr	r3, [r7, #4]
 c00340a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c00340c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 c00340e:	429a      	cmp	r2, r3
 c003410:	d11a      	bne.n	c003448 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 c003412:	69bb      	ldr	r3, [r7, #24]
 c003414:	0a5b      	lsrs	r3, r3, #9
 c003416:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 c00341a:	687b      	ldr	r3, [r7, #4]
 c00341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c00341e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 c003420:	429a      	cmp	r2, r3
 c003422:	d111      	bne.n	c003448 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 c003424:	69bb      	ldr	r3, [r7, #24]
 c003426:	0c1b      	lsrs	r3, r3, #16
 c003428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 c00342c:	687b      	ldr	r3, [r7, #4]
 c00342e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c003430:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 c003432:	429a      	cmp	r2, r3
 c003434:	d108      	bne.n	c003448 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 c003436:	69bb      	ldr	r3, [r7, #24]
 c003438:	0e1b      	lsrs	r3, r3, #24
 c00343a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 c00343e:	687b      	ldr	r3, [r7, #4]
 c003440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c003442:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 c003444:	429a      	cmp	r2, r3
 c003446:	d001      	beq.n	c00344c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 c003448:	2301      	movs	r3, #1
 c00344a:	e024      	b.n	c003496 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c00344c:	4b14      	ldr	r3, [pc, #80]	@ (c0034a0 <HAL_RCC_OscConfig+0xdb4>)
 c00344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c003450:	08db      	lsrs	r3, r3, #3
 c003452:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 c003456:	687b      	ldr	r3, [r7, #4]
 c003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c00345a:	429a      	cmp	r2, r3
 c00345c:	d01a      	beq.n	c003494 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 c00345e:	4b10      	ldr	r3, [pc, #64]	@ (c0034a0 <HAL_RCC_OscConfig+0xdb4>)
 c003460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003462:	4a0f      	ldr	r2, [pc, #60]	@ (c0034a0 <HAL_RCC_OscConfig+0xdb4>)
 c003464:	f023 0310 	bic.w	r3, r3, #16
 c003468:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00346a:	f7fd ffdf 	bl	c00142c <HAL_GetTick>
 c00346e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 c003470:	bf00      	nop
 c003472:	f7fd ffdb 	bl	c00142c <HAL_GetTick>
 c003476:	4602      	mov	r2, r0
 c003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00347a:	4293      	cmp	r3, r2
 c00347c:	d0f9      	beq.n	c003472 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 c00347e:	687b      	ldr	r3, [r7, #4]
 c003480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c003482:	4a07      	ldr	r2, [pc, #28]	@ (c0034a0 <HAL_RCC_OscConfig+0xdb4>)
 c003484:	00db      	lsls	r3, r3, #3
 c003486:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 c003488:	4b05      	ldr	r3, [pc, #20]	@ (c0034a0 <HAL_RCC_OscConfig+0xdb4>)
 c00348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00348c:	4a04      	ldr	r2, [pc, #16]	@ (c0034a0 <HAL_RCC_OscConfig+0xdb4>)
 c00348e:	f043 0310 	orr.w	r3, r3, #16
 c003492:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 c003494:	2300      	movs	r3, #0
}
 c003496:	4618      	mov	r0, r3
 c003498:	3738      	adds	r7, #56	@ 0x38
 c00349a:	46bd      	mov	sp, r7
 c00349c:	bd80      	pop	{r7, pc}
 c00349e:	bf00      	nop
 c0034a0:	56020c00 	.word	0x56020c00

0c0034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 c0034a4:	b580      	push	{r7, lr}
 c0034a6:	b086      	sub	sp, #24
 c0034a8:	af00      	add	r7, sp, #0
 c0034aa:	6078      	str	r0, [r7, #4]
 c0034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 c0034ae:	687b      	ldr	r3, [r7, #4]
 c0034b0:	2b00      	cmp	r3, #0
 c0034b2:	d101      	bne.n	c0034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 c0034b4:	2301      	movs	r3, #1
 c0034b6:	e1d9      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c0034b8:	4b9b      	ldr	r3, [pc, #620]	@ (c003728 <HAL_RCC_ClockConfig+0x284>)
 c0034ba:	681b      	ldr	r3, [r3, #0]
 c0034bc:	f003 030f 	and.w	r3, r3, #15
 c0034c0:	683a      	ldr	r2, [r7, #0]
 c0034c2:	429a      	cmp	r2, r3
 c0034c4:	d910      	bls.n	c0034e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0034c6:	4b98      	ldr	r3, [pc, #608]	@ (c003728 <HAL_RCC_ClockConfig+0x284>)
 c0034c8:	681b      	ldr	r3, [r3, #0]
 c0034ca:	f023 020f 	bic.w	r2, r3, #15
 c0034ce:	4996      	ldr	r1, [pc, #600]	@ (c003728 <HAL_RCC_ClockConfig+0x284>)
 c0034d0:	683b      	ldr	r3, [r7, #0]
 c0034d2:	4313      	orrs	r3, r2
 c0034d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0034d6:	4b94      	ldr	r3, [pc, #592]	@ (c003728 <HAL_RCC_ClockConfig+0x284>)
 c0034d8:	681b      	ldr	r3, [r3, #0]
 c0034da:	f003 030f 	and.w	r3, r3, #15
 c0034de:	683a      	ldr	r2, [r7, #0]
 c0034e0:	429a      	cmp	r2, r3
 c0034e2:	d001      	beq.n	c0034e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 c0034e4:	2301      	movs	r3, #1
 c0034e6:	e1c1      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c0034e8:	687b      	ldr	r3, [r7, #4]
 c0034ea:	681b      	ldr	r3, [r3, #0]
 c0034ec:	f003 0310 	and.w	r3, r3, #16
 c0034f0:	2b00      	cmp	r3, #0
 c0034f2:	d010      	beq.n	c003516 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 c0034f4:	687b      	ldr	r3, [r7, #4]
 c0034f6:	695a      	ldr	r2, [r3, #20]
 c0034f8:	4b8c      	ldr	r3, [pc, #560]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c0034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0034fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003500:	429a      	cmp	r2, r3
 c003502:	d908      	bls.n	c003516 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 c003504:	4b89      	ldr	r3, [pc, #548]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003508:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c00350c:	687b      	ldr	r3, [r7, #4]
 c00350e:	695b      	ldr	r3, [r3, #20]
 c003510:	4986      	ldr	r1, [pc, #536]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003512:	4313      	orrs	r3, r2
 c003514:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c003516:	687b      	ldr	r3, [r7, #4]
 c003518:	681b      	ldr	r3, [r3, #0]
 c00351a:	f003 0308 	and.w	r3, r3, #8
 c00351e:	2b00      	cmp	r3, #0
 c003520:	d012      	beq.n	c003548 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c003522:	687b      	ldr	r3, [r7, #4]
 c003524:	691a      	ldr	r2, [r3, #16]
 c003526:	4b81      	ldr	r3, [pc, #516]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003528:	6a1b      	ldr	r3, [r3, #32]
 c00352a:	091b      	lsrs	r3, r3, #4
 c00352c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003530:	429a      	cmp	r2, r3
 c003532:	d909      	bls.n	c003548 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 c003534:	4b7d      	ldr	r3, [pc, #500]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003536:	6a1b      	ldr	r3, [r3, #32]
 c003538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c00353c:	687b      	ldr	r3, [r7, #4]
 c00353e:	691b      	ldr	r3, [r3, #16]
 c003540:	011b      	lsls	r3, r3, #4
 c003542:	497a      	ldr	r1, [pc, #488]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003544:	4313      	orrs	r3, r2
 c003546:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c003548:	687b      	ldr	r3, [r7, #4]
 c00354a:	681b      	ldr	r3, [r3, #0]
 c00354c:	f003 0304 	and.w	r3, r3, #4
 c003550:	2b00      	cmp	r3, #0
 c003552:	d010      	beq.n	c003576 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c003554:	687b      	ldr	r3, [r7, #4]
 c003556:	68da      	ldr	r2, [r3, #12]
 c003558:	4b74      	ldr	r3, [pc, #464]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c00355a:	6a1b      	ldr	r3, [r3, #32]
 c00355c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003560:	429a      	cmp	r2, r3
 c003562:	d908      	bls.n	c003576 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 c003564:	4b71      	ldr	r3, [pc, #452]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003566:	6a1b      	ldr	r3, [r3, #32]
 c003568:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c00356c:	687b      	ldr	r3, [r7, #4]
 c00356e:	68db      	ldr	r3, [r3, #12]
 c003570:	496e      	ldr	r1, [pc, #440]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003572:	4313      	orrs	r3, r2
 c003574:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003576:	687b      	ldr	r3, [r7, #4]
 c003578:	681b      	ldr	r3, [r3, #0]
 c00357a:	f003 0302 	and.w	r3, r3, #2
 c00357e:	2b00      	cmp	r3, #0
 c003580:	d010      	beq.n	c0035a4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c003582:	687b      	ldr	r3, [r7, #4]
 c003584:	689a      	ldr	r2, [r3, #8]
 c003586:	4b69      	ldr	r3, [pc, #420]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003588:	6a1b      	ldr	r3, [r3, #32]
 c00358a:	f003 030f 	and.w	r3, r3, #15
 c00358e:	429a      	cmp	r2, r3
 c003590:	d908      	bls.n	c0035a4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 c003592:	4b66      	ldr	r3, [pc, #408]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003594:	6a1b      	ldr	r3, [r3, #32]
 c003596:	f023 020f 	bic.w	r2, r3, #15
 c00359a:	687b      	ldr	r3, [r7, #4]
 c00359c:	689b      	ldr	r3, [r3, #8]
 c00359e:	4963      	ldr	r1, [pc, #396]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c0035a0:	4313      	orrs	r3, r2
 c0035a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c0035a4:	687b      	ldr	r3, [r7, #4]
 c0035a6:	681b      	ldr	r3, [r3, #0]
 c0035a8:	f003 0301 	and.w	r3, r3, #1
 c0035ac:	2b00      	cmp	r3, #0
 c0035ae:	f000 80d2 	beq.w	c003756 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 c0035b2:	2300      	movs	r3, #0
 c0035b4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c0035b6:	687b      	ldr	r3, [r7, #4]
 c0035b8:	685b      	ldr	r3, [r3, #4]
 c0035ba:	2b03      	cmp	r3, #3
 c0035bc:	d143      	bne.n	c003646 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c0035be:	4b5b      	ldr	r3, [pc, #364]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c0035c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0035c4:	f003 0304 	and.w	r3, r3, #4
 c0035c8:	2b00      	cmp	r3, #0
 c0035ca:	d110      	bne.n	c0035ee <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 c0035cc:	4b57      	ldr	r3, [pc, #348]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c0035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0035d2:	4a56      	ldr	r2, [pc, #344]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c0035d4:	f043 0304 	orr.w	r3, r3, #4
 c0035d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c0035dc:	4b53      	ldr	r3, [pc, #332]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c0035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0035e2:	f003 0304 	and.w	r3, r3, #4
 c0035e6:	60bb      	str	r3, [r7, #8]
 c0035e8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 c0035ea:	2301      	movs	r3, #1
 c0035ec:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 c0035ee:	f7fd ff1d 	bl	c00142c <HAL_GetTick>
 c0035f2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 c0035f4:	4b4e      	ldr	r3, [pc, #312]	@ (c003730 <HAL_RCC_ClockConfig+0x28c>)
 c0035f6:	68db      	ldr	r3, [r3, #12]
 c0035f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c0035fc:	2b00      	cmp	r3, #0
 c0035fe:	d00f      	beq.n	c003620 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 c003600:	e008      	b.n	c003614 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 c003602:	f7fd ff13 	bl	c00142c <HAL_GetTick>
 c003606:	4602      	mov	r2, r0
 c003608:	693b      	ldr	r3, [r7, #16]
 c00360a:	1ad3      	subs	r3, r2, r3
 c00360c:	2b02      	cmp	r3, #2
 c00360e:	d901      	bls.n	c003614 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 c003610:	2303      	movs	r3, #3
 c003612:	e12b      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 c003614:	4b46      	ldr	r3, [pc, #280]	@ (c003730 <HAL_RCC_ClockConfig+0x28c>)
 c003616:	68db      	ldr	r3, [r3, #12]
 c003618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c00361c:	2b00      	cmp	r3, #0
 c00361e:	d0f0      	beq.n	c003602 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 c003620:	7dfb      	ldrb	r3, [r7, #23]
 c003622:	2b01      	cmp	r3, #1
 c003624:	d107      	bne.n	c003636 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 c003626:	4b41      	ldr	r3, [pc, #260]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00362c:	4a3f      	ldr	r2, [pc, #252]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c00362e:	f023 0304 	bic.w	r3, r3, #4
 c003632:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c003636:	4b3d      	ldr	r3, [pc, #244]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003638:	681b      	ldr	r3, [r3, #0]
 c00363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c00363e:	2b00      	cmp	r3, #0
 c003640:	d121      	bne.n	c003686 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 c003642:	2301      	movs	r3, #1
 c003644:	e112      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003646:	687b      	ldr	r3, [r7, #4]
 c003648:	685b      	ldr	r3, [r3, #4]
 c00364a:	2b02      	cmp	r3, #2
 c00364c:	d107      	bne.n	c00365e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00364e:	4b37      	ldr	r3, [pc, #220]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003650:	681b      	ldr	r3, [r3, #0]
 c003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c003656:	2b00      	cmp	r3, #0
 c003658:	d115      	bne.n	c003686 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c00365a:	2301      	movs	r3, #1
 c00365c:	e106      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c00365e:	687b      	ldr	r3, [r7, #4]
 c003660:	685b      	ldr	r3, [r3, #4]
 c003662:	2b00      	cmp	r3, #0
 c003664:	d107      	bne.n	c003676 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c003666:	4b31      	ldr	r3, [pc, #196]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003668:	681b      	ldr	r3, [r3, #0]
 c00366a:	f003 0304 	and.w	r3, r3, #4
 c00366e:	2b00      	cmp	r3, #0
 c003670:	d109      	bne.n	c003686 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c003672:	2301      	movs	r3, #1
 c003674:	e0fa      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003676:	4b2d      	ldr	r3, [pc, #180]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003678:	681b      	ldr	r3, [r3, #0]
 c00367a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00367e:	2b00      	cmp	r3, #0
 c003680:	d101      	bne.n	c003686 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c003682:	2301      	movs	r3, #1
 c003684:	e0f2      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 c003686:	4b29      	ldr	r3, [pc, #164]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003688:	69db      	ldr	r3, [r3, #28]
 c00368a:	f023 0203 	bic.w	r2, r3, #3
 c00368e:	687b      	ldr	r3, [r7, #4]
 c003690:	685b      	ldr	r3, [r3, #4]
 c003692:	4926      	ldr	r1, [pc, #152]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c003694:	4313      	orrs	r3, r2
 c003696:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 c003698:	f7fd fec8 	bl	c00142c <HAL_GetTick>
 c00369c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c00369e:	687b      	ldr	r3, [r7, #4]
 c0036a0:	685b      	ldr	r3, [r3, #4]
 c0036a2:	2b03      	cmp	r3, #3
 c0036a4:	d112      	bne.n	c0036cc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0036a6:	e00a      	b.n	c0036be <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0036a8:	f7fd fec0 	bl	c00142c <HAL_GetTick>
 c0036ac:	4602      	mov	r2, r0
 c0036ae:	693b      	ldr	r3, [r7, #16]
 c0036b0:	1ad3      	subs	r3, r2, r3
 c0036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 c0036b6:	4293      	cmp	r3, r2
 c0036b8:	d901      	bls.n	c0036be <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 c0036ba:	2303      	movs	r3, #3
 c0036bc:	e0d6      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0036be:	4b1b      	ldr	r3, [pc, #108]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c0036c0:	69db      	ldr	r3, [r3, #28]
 c0036c2:	f003 030c 	and.w	r3, r3, #12
 c0036c6:	2b0c      	cmp	r3, #12
 c0036c8:	d1ee      	bne.n	c0036a8 <HAL_RCC_ClockConfig+0x204>
 c0036ca:	e044      	b.n	c003756 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c0036cc:	687b      	ldr	r3, [r7, #4]
 c0036ce:	685b      	ldr	r3, [r3, #4]
 c0036d0:	2b02      	cmp	r3, #2
 c0036d2:	d112      	bne.n	c0036fa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c0036d4:	e00a      	b.n	c0036ec <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0036d6:	f7fd fea9 	bl	c00142c <HAL_GetTick>
 c0036da:	4602      	mov	r2, r0
 c0036dc:	693b      	ldr	r3, [r7, #16]
 c0036de:	1ad3      	subs	r3, r2, r3
 c0036e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 c0036e4:	4293      	cmp	r3, r2
 c0036e6:	d901      	bls.n	c0036ec <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 c0036e8:	2303      	movs	r3, #3
 c0036ea:	e0bf      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c0036ec:	4b0f      	ldr	r3, [pc, #60]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c0036ee:	69db      	ldr	r3, [r3, #28]
 c0036f0:	f003 030c 	and.w	r3, r3, #12
 c0036f4:	2b08      	cmp	r3, #8
 c0036f6:	d1ee      	bne.n	c0036d6 <HAL_RCC_ClockConfig+0x232>
 c0036f8:	e02d      	b.n	c003756 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0036fa:	687b      	ldr	r3, [r7, #4]
 c0036fc:	685b      	ldr	r3, [r3, #4]
 c0036fe:	2b00      	cmp	r3, #0
 c003700:	d123      	bne.n	c00374a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 c003702:	e00a      	b.n	c00371a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c003704:	f7fd fe92 	bl	c00142c <HAL_GetTick>
 c003708:	4602      	mov	r2, r0
 c00370a:	693b      	ldr	r3, [r7, #16]
 c00370c:	1ad3      	subs	r3, r2, r3
 c00370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 c003712:	4293      	cmp	r3, r2
 c003714:	d901      	bls.n	c00371a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 c003716:	2303      	movs	r3, #3
 c003718:	e0a8      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 c00371a:	4b04      	ldr	r3, [pc, #16]	@ (c00372c <HAL_RCC_ClockConfig+0x288>)
 c00371c:	69db      	ldr	r3, [r3, #28]
 c00371e:	f003 030c 	and.w	r3, r3, #12
 c003722:	2b00      	cmp	r3, #0
 c003724:	d1ee      	bne.n	c003704 <HAL_RCC_ClockConfig+0x260>
 c003726:	e016      	b.n	c003756 <HAL_RCC_ClockConfig+0x2b2>
 c003728:	50022000 	.word	0x50022000
 c00372c:	56020c00 	.word	0x56020c00
 c003730:	56020800 	.word	0x56020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c003734:	f7fd fe7a 	bl	c00142c <HAL_GetTick>
 c003738:	4602      	mov	r2, r0
 c00373a:	693b      	ldr	r3, [r7, #16]
 c00373c:	1ad3      	subs	r3, r2, r3
 c00373e:	f241 3288 	movw	r2, #5000	@ 0x1388
 c003742:	4293      	cmp	r3, r2
 c003744:	d901      	bls.n	c00374a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 c003746:	2303      	movs	r3, #3
 c003748:	e090      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 c00374a:	4b4a      	ldr	r3, [pc, #296]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c00374c:	69db      	ldr	r3, [r3, #28]
 c00374e:	f003 030c 	and.w	r3, r3, #12
 c003752:	2b04      	cmp	r3, #4
 c003754:	d1ee      	bne.n	c003734 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003756:	687b      	ldr	r3, [r7, #4]
 c003758:	681b      	ldr	r3, [r3, #0]
 c00375a:	f003 0302 	and.w	r3, r3, #2
 c00375e:	2b00      	cmp	r3, #0
 c003760:	d010      	beq.n	c003784 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c003762:	687b      	ldr	r3, [r7, #4]
 c003764:	689a      	ldr	r2, [r3, #8]
 c003766:	4b43      	ldr	r3, [pc, #268]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c003768:	6a1b      	ldr	r3, [r3, #32]
 c00376a:	f003 030f 	and.w	r3, r3, #15
 c00376e:	429a      	cmp	r2, r3
 c003770:	d208      	bcs.n	c003784 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 c003772:	4b40      	ldr	r3, [pc, #256]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c003774:	6a1b      	ldr	r3, [r3, #32]
 c003776:	f023 020f 	bic.w	r2, r3, #15
 c00377a:	687b      	ldr	r3, [r7, #4]
 c00377c:	689b      	ldr	r3, [r3, #8]
 c00377e:	493d      	ldr	r1, [pc, #244]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c003780:	4313      	orrs	r3, r2
 c003782:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c003784:	4b3c      	ldr	r3, [pc, #240]	@ (c003878 <HAL_RCC_ClockConfig+0x3d4>)
 c003786:	681b      	ldr	r3, [r3, #0]
 c003788:	f003 030f 	and.w	r3, r3, #15
 c00378c:	683a      	ldr	r2, [r7, #0]
 c00378e:	429a      	cmp	r2, r3
 c003790:	d210      	bcs.n	c0037b4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003792:	4b39      	ldr	r3, [pc, #228]	@ (c003878 <HAL_RCC_ClockConfig+0x3d4>)
 c003794:	681b      	ldr	r3, [r3, #0]
 c003796:	f023 020f 	bic.w	r2, r3, #15
 c00379a:	4937      	ldr	r1, [pc, #220]	@ (c003878 <HAL_RCC_ClockConfig+0x3d4>)
 c00379c:	683b      	ldr	r3, [r7, #0]
 c00379e:	4313      	orrs	r3, r2
 c0037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0037a2:	4b35      	ldr	r3, [pc, #212]	@ (c003878 <HAL_RCC_ClockConfig+0x3d4>)
 c0037a4:	681b      	ldr	r3, [r3, #0]
 c0037a6:	f003 030f 	and.w	r3, r3, #15
 c0037aa:	683a      	ldr	r2, [r7, #0]
 c0037ac:	429a      	cmp	r2, r3
 c0037ae:	d001      	beq.n	c0037b4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 c0037b0:	2301      	movs	r3, #1
 c0037b2:	e05b      	b.n	c00386c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c0037b4:	687b      	ldr	r3, [r7, #4]
 c0037b6:	681b      	ldr	r3, [r3, #0]
 c0037b8:	f003 0304 	and.w	r3, r3, #4
 c0037bc:	2b00      	cmp	r3, #0
 c0037be:	d010      	beq.n	c0037e2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c0037c0:	687b      	ldr	r3, [r7, #4]
 c0037c2:	68da      	ldr	r2, [r3, #12]
 c0037c4:	4b2b      	ldr	r3, [pc, #172]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c0037c6:	6a1b      	ldr	r3, [r3, #32]
 c0037c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c0037cc:	429a      	cmp	r2, r3
 c0037ce:	d208      	bcs.n	c0037e2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 c0037d0:	4b28      	ldr	r3, [pc, #160]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c0037d2:	6a1b      	ldr	r3, [r3, #32]
 c0037d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c0037d8:	687b      	ldr	r3, [r7, #4]
 c0037da:	68db      	ldr	r3, [r3, #12]
 c0037dc:	4925      	ldr	r1, [pc, #148]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c0037de:	4313      	orrs	r3, r2
 c0037e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c0037e2:	687b      	ldr	r3, [r7, #4]
 c0037e4:	681b      	ldr	r3, [r3, #0]
 c0037e6:	f003 0308 	and.w	r3, r3, #8
 c0037ea:	2b00      	cmp	r3, #0
 c0037ec:	d012      	beq.n	c003814 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c0037ee:	687b      	ldr	r3, [r7, #4]
 c0037f0:	691a      	ldr	r2, [r3, #16]
 c0037f2:	4b20      	ldr	r3, [pc, #128]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c0037f4:	6a1b      	ldr	r3, [r3, #32]
 c0037f6:	091b      	lsrs	r3, r3, #4
 c0037f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c0037fc:	429a      	cmp	r2, r3
 c0037fe:	d209      	bcs.n	c003814 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 c003800:	4b1c      	ldr	r3, [pc, #112]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c003802:	6a1b      	ldr	r3, [r3, #32]
 c003804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c003808:	687b      	ldr	r3, [r7, #4]
 c00380a:	691b      	ldr	r3, [r3, #16]
 c00380c:	011b      	lsls	r3, r3, #4
 c00380e:	4919      	ldr	r1, [pc, #100]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c003810:	4313      	orrs	r3, r2
 c003812:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c003814:	687b      	ldr	r3, [r7, #4]
 c003816:	681b      	ldr	r3, [r3, #0]
 c003818:	f003 0310 	and.w	r3, r3, #16
 c00381c:	2b00      	cmp	r3, #0
 c00381e:	d010      	beq.n	c003842 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 c003820:	687b      	ldr	r3, [r7, #4]
 c003822:	695a      	ldr	r2, [r3, #20]
 c003824:	4b13      	ldr	r3, [pc, #76]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c00382c:	429a      	cmp	r2, r3
 c00382e:	d208      	bcs.n	c003842 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 c003830:	4b10      	ldr	r3, [pc, #64]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003834:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c003838:	687b      	ldr	r3, [r7, #4]
 c00383a:	695b      	ldr	r3, [r3, #20]
 c00383c:	490d      	ldr	r1, [pc, #52]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c00383e:	4313      	orrs	r3, r2
 c003840:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c003842:	f000 f821 	bl	c003888 <HAL_RCC_GetSysClockFreq>
 c003846:	4602      	mov	r2, r0
 c003848:	4b0a      	ldr	r3, [pc, #40]	@ (c003874 <HAL_RCC_ClockConfig+0x3d0>)
 c00384a:	6a1b      	ldr	r3, [r3, #32]
 c00384c:	f003 030f 	and.w	r3, r3, #15
 c003850:	490a      	ldr	r1, [pc, #40]	@ (c00387c <HAL_RCC_ClockConfig+0x3d8>)
 c003852:	5ccb      	ldrb	r3, [r1, r3]
 c003854:	fa22 f303 	lsr.w	r3, r2, r3
 c003858:	4a09      	ldr	r2, [pc, #36]	@ (c003880 <HAL_RCC_ClockConfig+0x3dc>)
 c00385a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 c00385c:	4b09      	ldr	r3, [pc, #36]	@ (c003884 <HAL_RCC_ClockConfig+0x3e0>)
 c00385e:	681b      	ldr	r3, [r3, #0]
 c003860:	4618      	mov	r0, r3
 c003862:	f7fd fd59 	bl	c001318 <HAL_InitTick>
 c003866:	4603      	mov	r3, r0
 c003868:	73fb      	strb	r3, [r7, #15]

  return status;
 c00386a:	7bfb      	ldrb	r3, [r7, #15]
}
 c00386c:	4618      	mov	r0, r3
 c00386e:	3718      	adds	r7, #24
 c003870:	46bd      	mov	sp, r7
 c003872:	bd80      	pop	{r7, pc}
 c003874:	56020c00 	.word	0x56020c00
 c003878:	50022000 	.word	0x50022000
 c00387c:	0c004a5c 	.word	0x0c004a5c
 c003880:	30000000 	.word	0x30000000
 c003884:	30000004 	.word	0x30000004

0c003888 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c003888:	b480      	push	{r7}
 c00388a:	b08b      	sub	sp, #44	@ 0x2c
 c00388c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c00388e:	2300      	movs	r3, #0
 c003890:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 c003892:	2300      	movs	r3, #0
 c003894:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003896:	4b78      	ldr	r3, [pc, #480]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003898:	69db      	ldr	r3, [r3, #28]
 c00389a:	f003 030c 	and.w	r3, r3, #12
 c00389e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0038a0:	4b75      	ldr	r3, [pc, #468]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0038a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0038a4:	f003 0303 	and.w	r3, r3, #3
 c0038a8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0038aa:	69bb      	ldr	r3, [r7, #24]
 c0038ac:	2b00      	cmp	r3, #0
 c0038ae:	d005      	beq.n	c0038bc <HAL_RCC_GetSysClockFreq+0x34>
 c0038b0:	69bb      	ldr	r3, [r7, #24]
 c0038b2:	2b0c      	cmp	r3, #12
 c0038b4:	d121      	bne.n	c0038fa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c0038b6:	697b      	ldr	r3, [r7, #20]
 c0038b8:	2b01      	cmp	r3, #1
 c0038ba:	d11e      	bne.n	c0038fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c0038bc:	4b6e      	ldr	r3, [pc, #440]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0038be:	689b      	ldr	r3, [r3, #8]
 c0038c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0038c4:	2b00      	cmp	r3, #0
 c0038c6:	d107      	bne.n	c0038d8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c0038c8:	4b6b      	ldr	r3, [pc, #428]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0038ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0038ce:	0b1b      	lsrs	r3, r3, #12
 c0038d0:	f003 030f 	and.w	r3, r3, #15
 c0038d4:	627b      	str	r3, [r7, #36]	@ 0x24
 c0038d6:	e005      	b.n	c0038e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c0038d8:	4b67      	ldr	r3, [pc, #412]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0038da:	689b      	ldr	r3, [r3, #8]
 c0038dc:	0f1b      	lsrs	r3, r3, #28
 c0038de:	f003 030f 	and.w	r3, r3, #15
 c0038e2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 c0038e4:	4a65      	ldr	r2, [pc, #404]	@ (c003a7c <HAL_RCC_GetSysClockFreq+0x1f4>)
 c0038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0038e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0038ec:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0038ee:	69bb      	ldr	r3, [r7, #24]
 c0038f0:	2b00      	cmp	r3, #0
 c0038f2:	d110      	bne.n	c003916 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c0038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0038f6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0038f8:	e00d      	b.n	c003916 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c0038fa:	4b5f      	ldr	r3, [pc, #380]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0038fc:	69db      	ldr	r3, [r3, #28]
 c0038fe:	f003 030c 	and.w	r3, r3, #12
 c003902:	2b04      	cmp	r3, #4
 c003904:	d102      	bne.n	c00390c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c003906:	4b5e      	ldr	r3, [pc, #376]	@ (c003a80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c003908:	623b      	str	r3, [r7, #32]
 c00390a:	e004      	b.n	c003916 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00390c:	69bb      	ldr	r3, [r7, #24]
 c00390e:	2b08      	cmp	r3, #8
 c003910:	d101      	bne.n	c003916 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c003912:	4b5b      	ldr	r3, [pc, #364]	@ (c003a80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c003914:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003916:	69bb      	ldr	r3, [r7, #24]
 c003918:	2b0c      	cmp	r3, #12
 c00391a:	f040 80a5 	bne.w	c003a68 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c00391e:	4b56      	ldr	r3, [pc, #344]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003922:	f003 0303 	and.w	r3, r3, #3
 c003926:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c003928:	4b53      	ldr	r3, [pc, #332]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c00392a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00392c:	0a1b      	lsrs	r3, r3, #8
 c00392e:	f003 030f 	and.w	r3, r3, #15
 c003932:	3301      	adds	r3, #1
 c003934:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c003936:	4b50      	ldr	r3, [pc, #320]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00393a:	091b      	lsrs	r3, r3, #4
 c00393c:	f003 0301 	and.w	r3, r3, #1
 c003940:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 c003942:	4b4d      	ldr	r3, [pc, #308]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c003946:	08db      	lsrs	r3, r3, #3
 c003948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c00394c:	68ba      	ldr	r2, [r7, #8]
 c00394e:	fb02 f303 	mul.w	r3, r2, r3
 c003952:	ee07 3a90 	vmov	s15, r3
 c003956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00395a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 c00395e:	693b      	ldr	r3, [r7, #16]
 c003960:	2b02      	cmp	r3, #2
 c003962:	d003      	beq.n	c00396c <HAL_RCC_GetSysClockFreq+0xe4>
 c003964:	693b      	ldr	r3, [r7, #16]
 c003966:	2b03      	cmp	r3, #3
 c003968:	d022      	beq.n	c0039b0 <HAL_RCC_GetSysClockFreq+0x128>
 c00396a:	e043      	b.n	c0039f4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00396c:	68fb      	ldr	r3, [r7, #12]
 c00396e:	ee07 3a90 	vmov	s15, r3
 c003972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c003976:	eddf 6a43 	vldr	s13, [pc, #268]	@ c003a84 <HAL_RCC_GetSysClockFreq+0x1fc>
 c00397a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00397e:	4b3e      	ldr	r3, [pc, #248]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c003982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c003986:	ee07 3a90 	vmov	s15, r3
 c00398a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c00398e:	ed97 6a01 	vldr	s12, [r7, #4]
 c003992:	eddf 5a3d 	vldr	s11, [pc, #244]	@ c003a88 <HAL_RCC_GetSysClockFreq+0x200>
 c003996:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00399a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c00399e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0039a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0039aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c0039ae:	e046      	b.n	c003a3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0039b0:	68fb      	ldr	r3, [r7, #12]
 c0039b2:	ee07 3a90 	vmov	s15, r3
 c0039b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0039ba:	eddf 6a32 	vldr	s13, [pc, #200]	@ c003a84 <HAL_RCC_GetSysClockFreq+0x1fc>
 c0039be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0039c2:	4b2d      	ldr	r3, [pc, #180]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0039c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0039c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0039ca:	ee07 3a90 	vmov	s15, r3
 c0039ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c0039d2:	ed97 6a01 	vldr	s12, [r7, #4]
 c0039d6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ c003a88 <HAL_RCC_GetSysClockFreq+0x200>
 c0039da:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0039de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c0039e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0039e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0039ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0039ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c0039f2:	e024      	b.n	c003a3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0039f6:	ee07 3a90 	vmov	s15, r3
 c0039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0039fe:	68fb      	ldr	r3, [r7, #12]
 c003a00:	ee07 3a90 	vmov	s15, r3
 c003a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c003a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c003a0c:	4b1a      	ldr	r3, [pc, #104]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c003a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c003a14:	ee07 3a90 	vmov	s15, r3
 c003a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c003a1c:	ed97 6a01 	vldr	s12, [r7, #4]
 c003a20:	eddf 5a19 	vldr	s11, [pc, #100]	@ c003a88 <HAL_RCC_GetSysClockFreq+0x200>
 c003a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c003a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c003a2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c003a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c003a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 c003a38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c003a3c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 c003a3e:	4b0e      	ldr	r3, [pc, #56]	@ (c003a78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c003a42:	0e1b      	lsrs	r3, r3, #24
 c003a44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c003a48:	3301      	adds	r3, #1
 c003a4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 c003a4c:	683b      	ldr	r3, [r7, #0]
 c003a4e:	ee07 3a90 	vmov	s15, r3
 c003a52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c003a56:	edd7 6a07 	vldr	s13, [r7, #28]
 c003a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c003a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c003a62:	ee17 3a90 	vmov	r3, s15
 c003a66:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 c003a68:	6a3b      	ldr	r3, [r7, #32]
}
 c003a6a:	4618      	mov	r0, r3
 c003a6c:	372c      	adds	r7, #44	@ 0x2c
 c003a6e:	46bd      	mov	sp, r7
 c003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003a74:	4770      	bx	lr
 c003a76:	bf00      	nop
 c003a78:	56020c00 	.word	0x56020c00
 c003a7c:	0c004a6c 	.word	0x0c004a6c
 c003a80:	00f42400 	.word	0x00f42400
 c003a84:	4b742400 	.word	0x4b742400
 c003a88:	46000000 	.word	0x46000000

0c003a8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c003a8c:	b580      	push	{r7, lr}
 c003a8e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c003a90:	f7ff fefa 	bl	c003888 <HAL_RCC_GetSysClockFreq>
 c003a94:	4602      	mov	r2, r0
 c003a96:	4b07      	ldr	r3, [pc, #28]	@ (c003ab4 <HAL_RCC_GetHCLKFreq+0x28>)
 c003a98:	6a1b      	ldr	r3, [r3, #32]
 c003a9a:	f003 030f 	and.w	r3, r3, #15
 c003a9e:	4906      	ldr	r1, [pc, #24]	@ (c003ab8 <HAL_RCC_GetHCLKFreq+0x2c>)
 c003aa0:	5ccb      	ldrb	r3, [r1, r3]
 c003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 c003aa6:	4a05      	ldr	r2, [pc, #20]	@ (c003abc <HAL_RCC_GetHCLKFreq+0x30>)
 c003aa8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 c003aaa:	4b04      	ldr	r3, [pc, #16]	@ (c003abc <HAL_RCC_GetHCLKFreq+0x30>)
 c003aac:	681b      	ldr	r3, [r3, #0]
}
 c003aae:	4618      	mov	r0, r3
 c003ab0:	bd80      	pop	{r7, pc}
 c003ab2:	bf00      	nop
 c003ab4:	56020c00 	.word	0x56020c00
 c003ab8:	0c004a5c 	.word	0x0c004a5c
 c003abc:	30000000 	.word	0x30000000

0c003ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c003ac0:	b580      	push	{r7, lr}
 c003ac2:	b086      	sub	sp, #24
 c003ac4:	af00      	add	r7, sp, #0
 c003ac6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c003ac8:	4b3e      	ldr	r3, [pc, #248]	@ (c003bc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c003aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003ace:	f003 0304 	and.w	r3, r3, #4
 c003ad2:	2b00      	cmp	r3, #0
 c003ad4:	d003      	beq.n	c003ade <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c003ad6:	f7fe fd9b 	bl	c002610 <HAL_PWREx_GetVoltageRange>
 c003ada:	6178      	str	r0, [r7, #20]
 c003adc:	e019      	b.n	c003b12 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c003ade:	4b39      	ldr	r3, [pc, #228]	@ (c003bc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c003ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003ae4:	4a37      	ldr	r2, [pc, #220]	@ (c003bc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c003ae6:	f043 0304 	orr.w	r3, r3, #4
 c003aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c003aee:	4b35      	ldr	r3, [pc, #212]	@ (c003bc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c003af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003af4:	f003 0304 	and.w	r3, r3, #4
 c003af8:	60fb      	str	r3, [r7, #12]
 c003afa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c003afc:	f7fe fd88 	bl	c002610 <HAL_PWREx_GetVoltageRange>
 c003b00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 c003b02:	4b30      	ldr	r3, [pc, #192]	@ (c003bc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c003b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003b08:	4a2e      	ldr	r2, [pc, #184]	@ (c003bc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c003b0a:	f023 0304 	bic.w	r3, r3, #4
 c003b0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 c003b12:	697b      	ldr	r3, [r7, #20]
 c003b14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c003b18:	d003      	beq.n	c003b22 <RCC_SetFlashLatencyFromMSIRange+0x62>
 c003b1a:	697b      	ldr	r3, [r7, #20]
 c003b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c003b20:	d109      	bne.n	c003b36 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 c003b22:	687b      	ldr	r3, [r7, #4]
 c003b24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c003b28:	d202      	bcs.n	c003b30 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 c003b2a:	2301      	movs	r3, #1
 c003b2c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 c003b2e:	e033      	b.n	c003b98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 c003b30:	2300      	movs	r3, #0
 c003b32:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 c003b34:	e030      	b.n	c003b98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 c003b36:	687b      	ldr	r3, [r7, #4]
 c003b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c003b3c:	d208      	bcs.n	c003b50 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 c003b3e:	697b      	ldr	r3, [r7, #20]
 c003b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c003b44:	d102      	bne.n	c003b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 c003b46:	2303      	movs	r3, #3
 c003b48:	613b      	str	r3, [r7, #16]
 c003b4a:	e025      	b.n	c003b98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 c003b4c:	2301      	movs	r3, #1
 c003b4e:	e035      	b.n	c003bbc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 c003b50:	687b      	ldr	r3, [r7, #4]
 c003b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c003b56:	d90f      	bls.n	c003b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 c003b58:	697b      	ldr	r3, [r7, #20]
 c003b5a:	2b00      	cmp	r3, #0
 c003b5c:	d109      	bne.n	c003b72 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 c003b5e:	687b      	ldr	r3, [r7, #4]
 c003b60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c003b64:	d902      	bls.n	c003b6c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 c003b66:	2300      	movs	r3, #0
 c003b68:	613b      	str	r3, [r7, #16]
 c003b6a:	e015      	b.n	c003b98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 c003b6c:	2301      	movs	r3, #1
 c003b6e:	613b      	str	r3, [r7, #16]
 c003b70:	e012      	b.n	c003b98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 c003b72:	2300      	movs	r3, #0
 c003b74:	613b      	str	r3, [r7, #16]
 c003b76:	e00f      	b.n	c003b98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 c003b78:	687b      	ldr	r3, [r7, #4]
 c003b7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c003b7e:	d109      	bne.n	c003b94 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 c003b80:	697b      	ldr	r3, [r7, #20]
 c003b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c003b86:	d102      	bne.n	c003b8e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 c003b88:	2301      	movs	r3, #1
 c003b8a:	613b      	str	r3, [r7, #16]
 c003b8c:	e004      	b.n	c003b98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 c003b8e:	2302      	movs	r3, #2
 c003b90:	613b      	str	r3, [r7, #16]
 c003b92:	e001      	b.n	c003b98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 c003b94:	2301      	movs	r3, #1
 c003b96:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c003b98:	4b0b      	ldr	r3, [pc, #44]	@ (c003bc8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c003b9a:	681b      	ldr	r3, [r3, #0]
 c003b9c:	f023 020f 	bic.w	r2, r3, #15
 c003ba0:	4909      	ldr	r1, [pc, #36]	@ (c003bc8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c003ba2:	693b      	ldr	r3, [r7, #16]
 c003ba4:	4313      	orrs	r3, r2
 c003ba6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c003ba8:	4b07      	ldr	r3, [pc, #28]	@ (c003bc8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c003baa:	681b      	ldr	r3, [r3, #0]
 c003bac:	f003 030f 	and.w	r3, r3, #15
 c003bb0:	693a      	ldr	r2, [r7, #16]
 c003bb2:	429a      	cmp	r2, r3
 c003bb4:	d001      	beq.n	c003bba <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 c003bb6:	2301      	movs	r3, #1
 c003bb8:	e000      	b.n	c003bbc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 c003bba:	2300      	movs	r3, #0
}
 c003bbc:	4618      	mov	r0, r3
 c003bbe:	3718      	adds	r7, #24
 c003bc0:	46bd      	mov	sp, r7
 c003bc2:	bd80      	pop	{r7, pc}
 c003bc4:	56020c00 	.word	0x56020c00
 c003bc8:	50022000 	.word	0x50022000

0c003bcc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 c003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c003bd0:	b0ba      	sub	sp, #232	@ 0xe8
 c003bd2:	af00      	add	r7, sp, #0
 c003bd4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c003bd8:	2300      	movs	r3, #0
 c003bda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c003bde:	2300      	movs	r3, #0
 c003be0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c003be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003bec:	f002 0401 	and.w	r4, r2, #1
 c003bf0:	2500      	movs	r5, #0
 c003bf2:	ea54 0305 	orrs.w	r3, r4, r5
 c003bf6:	d00b      	beq.n	c003c10 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 c003bf8:	4bcb      	ldr	r3, [pc, #812]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003bfe:	f023 0103 	bic.w	r1, r3, #3
 c003c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c003c08:	4ac7      	ldr	r2, [pc, #796]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c0a:	430b      	orrs	r3, r1
 c003c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c003c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003c18:	f002 0802 	and.w	r8, r2, #2
 c003c1c:	f04f 0900 	mov.w	r9, #0
 c003c20:	ea58 0309 	orrs.w	r3, r8, r9
 c003c24:	d00b      	beq.n	c003c3e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 c003c26:	4bc0      	ldr	r3, [pc, #768]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003c2c:	f023 010c 	bic.w	r1, r3, #12
 c003c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c003c36:	4abc      	ldr	r2, [pc, #752]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c38:	430b      	orrs	r3, r1
 c003c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c003c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003c46:	f002 0a04 	and.w	sl, r2, #4
 c003c4a:	f04f 0b00 	mov.w	fp, #0
 c003c4e:	ea5a 030b 	orrs.w	r3, sl, fp
 c003c52:	d00b      	beq.n	c003c6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 c003c54:	4bb4      	ldr	r3, [pc, #720]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003c5a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 c003c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c003c64:	4ab0      	ldr	r2, [pc, #704]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c66:	430b      	orrs	r3, r1
 c003c68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c003c6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003c74:	f002 0308 	and.w	r3, r2, #8
 c003c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 c003c7c:	2300      	movs	r3, #0
 c003c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 c003c82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 c003c86:	460b      	mov	r3, r1
 c003c88:	4313      	orrs	r3, r2
 c003c8a:	d00b      	beq.n	c003ca4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 c003c8c:	4ba6      	ldr	r3, [pc, #664]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003c92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 c003c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c003c9c:	4aa2      	ldr	r2, [pc, #648]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c9e:	430b      	orrs	r3, r1
 c003ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c003ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003cac:	f002 0310 	and.w	r3, r2, #16
 c003cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 c003cb4:	2300      	movs	r3, #0
 c003cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 c003cba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 c003cbe:	460b      	mov	r3, r1
 c003cc0:	4313      	orrs	r3, r2
 c003cc2:	d00b      	beq.n	c003cdc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 c003cc4:	4b98      	ldr	r3, [pc, #608]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003cca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c003cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 c003cd4:	4a94      	ldr	r2, [pc, #592]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003cd6:	430b      	orrs	r3, r1
 c003cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c003cdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003ce4:	f002 0320 	and.w	r3, r2, #32
 c003ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 c003cec:	2300      	movs	r3, #0
 c003cee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 c003cf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 c003cf6:	460b      	mov	r3, r1
 c003cf8:	4313      	orrs	r3, r2
 c003cfa:	d00b      	beq.n	c003d14 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 c003cfc:	4b8a      	ldr	r3, [pc, #552]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003d02:	f023 0107 	bic.w	r1, r3, #7
 c003d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 c003d0c:	4a86      	ldr	r2, [pc, #536]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003d0e:	430b      	orrs	r3, r1
 c003d10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c003d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003d1c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 c003d20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 c003d24:	2300      	movs	r3, #0
 c003d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 c003d2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 c003d2e:	460b      	mov	r3, r1
 c003d30:	4313      	orrs	r3, r2
 c003d32:	d00b      	beq.n	c003d4c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 c003d34:	4b7c      	ldr	r3, [pc, #496]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003d3a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 c003d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 c003d44:	4a78      	ldr	r2, [pc, #480]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003d46:	430b      	orrs	r3, r1
 c003d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c003d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003d54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 c003d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 c003d5c:	2300      	movs	r3, #0
 c003d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 c003d62:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 c003d66:	460b      	mov	r3, r1
 c003d68:	4313      	orrs	r3, r2
 c003d6a:	d00b      	beq.n	c003d84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 c003d6c:	4b6e      	ldr	r3, [pc, #440]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003d72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 c003d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c003d7c:	4a6a      	ldr	r2, [pc, #424]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003d7e:	430b      	orrs	r3, r1
 c003d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c003d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003d8c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 c003d90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 c003d94:	2300      	movs	r3, #0
 c003d96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 c003d9a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 c003d9e:	460b      	mov	r3, r1
 c003da0:	4313      	orrs	r3, r2
 c003da2:	d00b      	beq.n	c003dbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 c003da4:	4b60      	ldr	r3, [pc, #384]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003daa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 c003dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 c003db4:	4a5c      	ldr	r2, [pc, #368]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003db6:	430b      	orrs	r3, r1
 c003db8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c003dbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003dc4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 c003dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 c003dcc:	2300      	movs	r3, #0
 c003dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 c003dd2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 c003dd6:	460b      	mov	r3, r1
 c003dd8:	4313      	orrs	r3, r2
 c003dda:	d00b      	beq.n	c003df4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 c003ddc:	4b52      	ldr	r3, [pc, #328]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003de2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 c003de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c003dec:	4a4e      	ldr	r2, [pc, #312]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003dee:	430b      	orrs	r3, r1
 c003df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c003df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003dfc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 c003e00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 c003e04:	2300      	movs	r3, #0
 c003e06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 c003e0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 c003e0e:	460b      	mov	r3, r1
 c003e10:	4313      	orrs	r3, r2
 c003e12:	d00b      	beq.n	c003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 c003e14:	4b44      	ldr	r3, [pc, #272]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003e1a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 c003e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003e22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c003e24:	4a40      	ldr	r2, [pc, #256]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003e26:	430b      	orrs	r3, r1
 c003e28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c003e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003e34:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 c003e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 c003e3c:	2300      	movs	r3, #0
 c003e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 c003e42:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 c003e46:	460b      	mov	r3, r1
 c003e48:	4313      	orrs	r3, r2
 c003e4a:	d00b      	beq.n	c003e64 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 c003e4c:	4b36      	ldr	r3, [pc, #216]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003e52:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 c003e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003e5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c003e5c:	4a32      	ldr	r2, [pc, #200]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003e5e:	430b      	orrs	r3, r1
 c003e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 c003e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003e6c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 c003e70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 c003e74:	2300      	movs	r3, #0
 c003e76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 c003e7a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 c003e7e:	460b      	mov	r3, r1
 c003e80:	4313      	orrs	r3, r2
 c003e82:	d00c      	beq.n	c003e9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 c003e84:	4b28      	ldr	r3, [pc, #160]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003e8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c003e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c003e96:	4a24      	ldr	r2, [pc, #144]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003e98:	430b      	orrs	r3, r1
 c003e9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c003e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003ea6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 c003eaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 c003eac:	2300      	movs	r3, #0
 c003eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 c003eb0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 c003eb4:	460b      	mov	r3, r1
 c003eb6:	4313      	orrs	r3, r2
 c003eb8:	d04f      	beq.n	c003f5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 c003eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c003ec2:	2b80      	cmp	r3, #128	@ 0x80
 c003ec4:	d02d      	beq.n	c003f22 <HAL_RCCEx_PeriphCLKConfig+0x356>
 c003ec6:	2b80      	cmp	r3, #128	@ 0x80
 c003ec8:	d827      	bhi.n	c003f1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c003eca:	2b60      	cmp	r3, #96	@ 0x60
 c003ecc:	d02e      	beq.n	c003f2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 c003ece:	2b60      	cmp	r3, #96	@ 0x60
 c003ed0:	d823      	bhi.n	c003f1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c003ed2:	2b40      	cmp	r3, #64	@ 0x40
 c003ed4:	d006      	beq.n	c003ee4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 c003ed6:	2b40      	cmp	r3, #64	@ 0x40
 c003ed8:	d81f      	bhi.n	c003f1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c003eda:	2b00      	cmp	r3, #0
 c003edc:	d009      	beq.n	c003ef2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 c003ede:	2b20      	cmp	r3, #32
 c003ee0:	d011      	beq.n	c003f06 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 c003ee2:	e01a      	b.n	c003f1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c003ee4:	4b10      	ldr	r3, [pc, #64]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003ee8:	4a0f      	ldr	r2, [pc, #60]	@ (c003f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c003eee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003ef0:	e01d      	b.n	c003f2e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c003ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003ef6:	3308      	adds	r3, #8
 c003ef8:	4618      	mov	r0, r3
 c003efa:	f000 fc27 	bl	c00474c <RCCEx_PLL2_Config>
 c003efe:	4603      	mov	r3, r0
 c003f00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003f04:	e013      	b.n	c003f2e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c003f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003f0a:	332c      	adds	r3, #44	@ 0x2c
 c003f0c:	4618      	mov	r0, r3
 c003f0e:	f000 fcb5 	bl	c00487c <RCCEx_PLL3_Config>
 c003f12:	4603      	mov	r3, r0
 c003f14:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003f18:	e009      	b.n	c003f2e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003f1a:	2301      	movs	r3, #1
 c003f1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003f20:	e005      	b.n	c003f2e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 c003f22:	bf00      	nop
 c003f24:	e003      	b.n	c003f2e <HAL_RCCEx_PeriphCLKConfig+0x362>
 c003f26:	bf00      	nop
 c003f28:	56020c00 	.word	0x56020c00
        break;
 c003f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003f2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003f32:	2b00      	cmp	r3, #0
 c003f34:	d10d      	bne.n	c003f52 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 c003f36:	4bb6      	ldr	r3, [pc, #728]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003f38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c003f3c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 c003f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c003f48:	4ab1      	ldr	r2, [pc, #708]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003f4a:	430b      	orrs	r3, r1
 c003f4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c003f50:	e003      	b.n	c003f5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003f52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003f56:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c003f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003f62:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 c003f66:	673b      	str	r3, [r7, #112]	@ 0x70
 c003f68:	2300      	movs	r3, #0
 c003f6a:	677b      	str	r3, [r7, #116]	@ 0x74
 c003f6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 c003f70:	460b      	mov	r3, r1
 c003f72:	4313      	orrs	r3, r2
 c003f74:	d053      	beq.n	c00401e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 c003f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c003f82:	d033      	beq.n	c003fec <HAL_RCCEx_PeriphCLKConfig+0x420>
 c003f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c003f88:	d82c      	bhi.n	c003fe4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 c003f8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c003f8e:	d02f      	beq.n	c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 c003f90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c003f94:	d826      	bhi.n	c003fe4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 c003f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c003f9a:	d008      	beq.n	c003fae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 c003f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c003fa0:	d820      	bhi.n	c003fe4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 c003fa2:	2b00      	cmp	r3, #0
 c003fa4:	d00a      	beq.n	c003fbc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 c003fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c003faa:	d011      	beq.n	c003fd0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c003fac:	e01a      	b.n	c003fe4 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c003fae:	4b98      	ldr	r3, [pc, #608]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003fb2:	4a97      	ldr	r2, [pc, #604]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c003fb8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003fba:	e01a      	b.n	c003ff2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c003fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003fc0:	3308      	adds	r3, #8
 c003fc2:	4618      	mov	r0, r3
 c003fc4:	f000 fbc2 	bl	c00474c <RCCEx_PLL2_Config>
 c003fc8:	4603      	mov	r3, r0
 c003fca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003fce:	e010      	b.n	c003ff2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c003fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003fd4:	332c      	adds	r3, #44	@ 0x2c
 c003fd6:	4618      	mov	r0, r3
 c003fd8:	f000 fc50 	bl	c00487c <RCCEx_PLL3_Config>
 c003fdc:	4603      	mov	r3, r0
 c003fde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003fe2:	e006      	b.n	c003ff2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003fe4:	2301      	movs	r3, #1
 c003fe6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003fea:	e002      	b.n	c003ff2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 c003fec:	bf00      	nop
 c003fee:	e000      	b.n	c003ff2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 c003ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003ff2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003ff6:	2b00      	cmp	r3, #0
 c003ff8:	d10d      	bne.n	c004016 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 c003ffa:	4b85      	ldr	r3, [pc, #532]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003ffc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004000:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 c004004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00400c:	4a80      	ldr	r2, [pc, #512]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00400e:	430b      	orrs	r3, r1
 c004010:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c004014:	e003      	b.n	c00401e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004016:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00401a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 c00401e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004026:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 c00402a:	66bb      	str	r3, [r7, #104]	@ 0x68
 c00402c:	2300      	movs	r3, #0
 c00402e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 c004030:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 c004034:	460b      	mov	r3, r1
 c004036:	4313      	orrs	r3, r2
 c004038:	d046      	beq.n	c0040c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 c00403a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00403e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 c004042:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c004046:	d028      	beq.n	c00409a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c004048:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c00404c:	d821      	bhi.n	c004092 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c00404e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c004052:	d022      	beq.n	c00409a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c004054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c004058:	d81b      	bhi.n	c004092 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c00405a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c00405e:	d01c      	beq.n	c00409a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c004060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c004064:	d815      	bhi.n	c004092 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c004066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00406a:	d008      	beq.n	c00407e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 c00406c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c004070:	d80f      	bhi.n	c004092 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c004072:	2b00      	cmp	r3, #0
 c004074:	d011      	beq.n	c00409a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c004076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00407a:	d00e      	beq.n	c00409a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c00407c:	e009      	b.n	c004092 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00407e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004082:	3308      	adds	r3, #8
 c004084:	4618      	mov	r0, r3
 c004086:	f000 fb61 	bl	c00474c <RCCEx_PLL2_Config>
 c00408a:	4603      	mov	r3, r0
 c00408c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c004090:	e004      	b.n	c00409c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c004092:	2301      	movs	r3, #1
 c004094:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c004098:	e000      	b.n	c00409c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 c00409a:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00409c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0040a0:	2b00      	cmp	r3, #0
 c0040a2:	d10d      	bne.n	c0040c0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 c0040a4:	4b5a      	ldr	r3, [pc, #360]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c0040a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c0040aa:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 c0040ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0040b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 c0040b6:	4a56      	ldr	r2, [pc, #344]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c0040b8:	430b      	orrs	r3, r1
 c0040ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 c0040be:	e003      	b.n	c0040c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0040c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0040c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 c0040c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0040d0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 c0040d4:	663b      	str	r3, [r7, #96]	@ 0x60
 c0040d6:	2300      	movs	r3, #0
 c0040d8:	667b      	str	r3, [r7, #100]	@ 0x64
 c0040da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 c0040de:	460b      	mov	r3, r1
 c0040e0:	4313      	orrs	r3, r2
 c0040e2:	d03f      	beq.n	c004164 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 c0040e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0040ec:	2b04      	cmp	r3, #4
 c0040ee:	d81e      	bhi.n	c00412e <HAL_RCCEx_PeriphCLKConfig+0x562>
 c0040f0:	a201      	add	r2, pc, #4	@ (adr r2, c0040f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 c0040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0040f6:	bf00      	nop
 c0040f8:	0c004137 	.word	0x0c004137
 c0040fc:	0c00410d 	.word	0x0c00410d
 c004100:	0c00411b 	.word	0x0c00411b
 c004104:	0c004137 	.word	0x0c004137
 c004108:	0c004137 	.word	0x0c004137
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c00410c:	4b40      	ldr	r3, [pc, #256]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004110:	4a3f      	ldr	r2, [pc, #252]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c004112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c004116:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c004118:	e00e      	b.n	c004138 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00411a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00411e:	332c      	adds	r3, #44	@ 0x2c
 c004120:	4618      	mov	r0, r3
 c004122:	f000 fbab 	bl	c00487c <RCCEx_PLL3_Config>
 c004126:	4603      	mov	r3, r0
 c004128:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00412c:	e004      	b.n	c004138 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c00412e:	2301      	movs	r3, #1
 c004130:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c004134:	e000      	b.n	c004138 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 c004136:	bf00      	nop
    }
    if (ret == HAL_OK)
 c004138:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00413c:	2b00      	cmp	r3, #0
 c00413e:	d10d      	bne.n	c00415c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 c004140:	4b33      	ldr	r3, [pc, #204]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c004142:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004146:	f023 0107 	bic.w	r1, r3, #7
 c00414a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c004152:	4a2f      	ldr	r2, [pc, #188]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c004154:	430b      	orrs	r3, r1
 c004156:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c00415a:	e003      	b.n	c004164 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00415c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004160:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 c004164:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00416c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 c004170:	65bb      	str	r3, [r7, #88]	@ 0x58
 c004172:	2300      	movs	r3, #0
 c004174:	65fb      	str	r3, [r7, #92]	@ 0x5c
 c004176:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 c00417a:	460b      	mov	r3, r1
 c00417c:	4313      	orrs	r3, r2
 c00417e:	d04d      	beq.n	c00421c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 c004180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c004188:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c00418c:	d028      	beq.n	c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 c00418e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c004192:	d821      	bhi.n	c0041d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 c004194:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c004198:	d024      	beq.n	c0041e4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 c00419a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c00419e:	d81b      	bhi.n	c0041d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 c0041a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c0041a4:	d00e      	beq.n	c0041c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 c0041a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c0041aa:	d815      	bhi.n	c0041d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 c0041ac:	2b00      	cmp	r3, #0
 c0041ae:	d01b      	beq.n	c0041e8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 c0041b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c0041b4:	d110      	bne.n	c0041d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c0041b6:	4b16      	ldr	r3, [pc, #88]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c0041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0041ba:	4a15      	ldr	r2, [pc, #84]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c0041bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c0041c0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c0041c2:	e012      	b.n	c0041ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c0041c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0041c8:	332c      	adds	r3, #44	@ 0x2c
 c0041ca:	4618      	mov	r0, r3
 c0041cc:	f000 fb56 	bl	c00487c <RCCEx_PLL3_Config>
 c0041d0:	4603      	mov	r3, r0
 c0041d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c0041d6:	e008      	b.n	c0041ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c0041d8:	2301      	movs	r3, #1
 c0041da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c0041de:	e004      	b.n	c0041ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 c0041e0:	bf00      	nop
 c0041e2:	e002      	b.n	c0041ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 c0041e4:	bf00      	nop
 c0041e6:	e000      	b.n	c0041ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 c0041e8:	bf00      	nop
    }
    if (ret == HAL_OK)
 c0041ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0041ee:	2b00      	cmp	r3, #0
 c0041f0:	d110      	bne.n	c004214 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 c0041f2:	4b07      	ldr	r3, [pc, #28]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c0041f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c0041f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 c0041fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c004204:	4a02      	ldr	r2, [pc, #8]	@ (c004210 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c004206:	430b      	orrs	r3, r1
 c004208:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 c00420c:	e006      	b.n	c00421c <HAL_RCCEx_PeriphCLKConfig+0x650>
 c00420e:	bf00      	nop
 c004210:	56020c00 	.word	0x56020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004214:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004218:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c00421c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004224:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 c004228:	653b      	str	r3, [r7, #80]	@ 0x50
 c00422a:	2300      	movs	r3, #0
 c00422c:	657b      	str	r3, [r7, #84]	@ 0x54
 c00422e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 c004232:	460b      	mov	r3, r1
 c004234:	4313      	orrs	r3, r2
 c004236:	f000 80b5 	beq.w	c0043a4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00423a:	2300      	movs	r3, #0
 c00423c:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c004240:	4b9d      	ldr	r3, [pc, #628]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004246:	f003 0304 	and.w	r3, r3, #4
 c00424a:	2b00      	cmp	r3, #0
 c00424c:	d113      	bne.n	c004276 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00424e:	4b9a      	ldr	r3, [pc, #616]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004254:	4a98      	ldr	r2, [pc, #608]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004256:	f043 0304 	orr.w	r3, r3, #4
 c00425a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c00425e:	4b96      	ldr	r3, [pc, #600]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004264:	f003 0304 	and.w	r3, r3, #4
 c004268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 c00426c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 c004270:	2301      	movs	r3, #1
 c004272:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c004276:	4b91      	ldr	r3, [pc, #580]	@ (c0044bc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 c004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00427a:	4a90      	ldr	r2, [pc, #576]	@ (c0044bc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 c00427c:	f043 0301 	orr.w	r3, r3, #1
 c004280:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c004282:	f7fd f8d3 	bl	c00142c <HAL_GetTick>
 c004286:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c00428a:	e00b      	b.n	c0042a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c00428c:	f7fd f8ce 	bl	c00142c <HAL_GetTick>
 c004290:	4602      	mov	r2, r0
 c004292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c004296:	1ad3      	subs	r3, r2, r3
 c004298:	2b02      	cmp	r3, #2
 c00429a:	d903      	bls.n	c0042a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 c00429c:	2303      	movs	r3, #3
 c00429e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c0042a2:	e005      	b.n	c0042b0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c0042a4:	4b85      	ldr	r3, [pc, #532]	@ (c0044bc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 c0042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0042a8:	f003 0301 	and.w	r3, r3, #1
 c0042ac:	2b00      	cmp	r3, #0
 c0042ae:	d0ed      	beq.n	c00428c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 c0042b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0042b4:	2b00      	cmp	r3, #0
 c0042b6:	d165      	bne.n	c004384 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c0042b8:	4b7f      	ldr	r3, [pc, #508]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0042ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0042be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c0042c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 c0042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c0042ca:	2b00      	cmp	r3, #0
 c0042cc:	d023      	beq.n	c004316 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 c0042ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0042d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 c0042d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c0042da:	4293      	cmp	r3, r2
 c0042dc:	d01b      	beq.n	c004316 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c0042de:	4b76      	ldr	r3, [pc, #472]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0042e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0042e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 c0042e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c0042ec:	4b72      	ldr	r3, [pc, #456]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0042ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0042f2:	4a71      	ldr	r2, [pc, #452]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c0042f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 c0042fc:	4b6e      	ldr	r3, [pc, #440]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0042fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004302:	4a6d      	ldr	r2, [pc, #436]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c004308:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c00430c:	4a6a      	ldr	r2, [pc, #424]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c004312:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c00431a:	f003 0301 	and.w	r3, r3, #1
 c00431e:	2b00      	cmp	r3, #0
 c004320:	d019      	beq.n	c004356 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c004322:	f7fd f883 	bl	c00142c <HAL_GetTick>
 c004326:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00432a:	e00d      	b.n	c004348 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00432c:	f7fd f87e 	bl	c00142c <HAL_GetTick>
 c004330:	4602      	mov	r2, r0
 c004332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c004336:	1ad2      	subs	r2, r2, r3
 c004338:	f241 3388 	movw	r3, #5000	@ 0x1388
 c00433c:	429a      	cmp	r2, r3
 c00433e:	d903      	bls.n	c004348 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 c004340:	2303      	movs	r3, #3
 c004342:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 c004346:	e006      	b.n	c004356 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004348:	4b5b      	ldr	r3, [pc, #364]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00434a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00434e:	f003 0302 	and.w	r3, r3, #2
 c004352:	2b00      	cmp	r3, #0
 c004354:	d0ea      	beq.n	c00432c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 c004356:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00435a:	2b00      	cmp	r3, #0
 c00435c:	d10d      	bne.n	c00437a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 c00435e:	4b56      	ldr	r3, [pc, #344]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004364:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c004368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00436c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 c004370:	4a51      	ldr	r2, [pc, #324]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004372:	430b      	orrs	r3, r1
 c004374:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c004378:	e008      	b.n	c00438c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c00437a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00437e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 c004382:	e003      	b.n	c00438c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004384:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004388:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c00438c:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 c004390:	2b01      	cmp	r3, #1
 c004392:	d107      	bne.n	c0043a4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c004394:	4b48      	ldr	r3, [pc, #288]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00439a:	4a47      	ldr	r2, [pc, #284]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00439c:	f023 0304 	bic.w	r3, r3, #4
 c0043a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 c0043a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0043ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 c0043b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 c0043b2:	2300      	movs	r3, #0
 c0043b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c0043b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 c0043ba:	460b      	mov	r3, r1
 c0043bc:	4313      	orrs	r3, r2
 c0043be:	d042      	beq.n	c004446 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 c0043c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0043c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 c0043c8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c0043cc:	d022      	beq.n	c004414 <HAL_RCCEx_PeriphCLKConfig+0x848>
 c0043ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c0043d2:	d81b      	bhi.n	c00440c <HAL_RCCEx_PeriphCLKConfig+0x840>
 c0043d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c0043d8:	d011      	beq.n	c0043fe <HAL_RCCEx_PeriphCLKConfig+0x832>
 c0043da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c0043de:	d815      	bhi.n	c00440c <HAL_RCCEx_PeriphCLKConfig+0x840>
 c0043e0:	2b00      	cmp	r3, #0
 c0043e2:	d019      	beq.n	c004418 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 c0043e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c0043e8:	d110      	bne.n	c00440c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0043ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0043ee:	3308      	adds	r3, #8
 c0043f0:	4618      	mov	r0, r3
 c0043f2:	f000 f9ab 	bl	c00474c <RCCEx_PLL2_Config>
 c0043f6:	4603      	mov	r3, r0
 c0043f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c0043fc:	e00d      	b.n	c00441a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c0043fe:	4b2e      	ldr	r3, [pc, #184]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004402:	4a2d      	ldr	r2, [pc, #180]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c004408:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c00440a:	e006      	b.n	c00441a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c00440c:	2301      	movs	r3, #1
 c00440e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c004412:	e002      	b.n	c00441a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 c004414:	bf00      	nop
 c004416:	e000      	b.n	c00441a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 c004418:	bf00      	nop
    }
    if (ret == HAL_OK)
 c00441a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00441e:	2b00      	cmp	r3, #0
 c004420:	d10d      	bne.n	c00443e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 c004422:	4b25      	ldr	r3, [pc, #148]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004428:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 c00442c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004430:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 c004434:	4a20      	ldr	r2, [pc, #128]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004436:	430b      	orrs	r3, r1
 c004438:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 c00443c:	e003      	b.n	c004446 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00443e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004442:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 c004446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00444e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 c004452:	643b      	str	r3, [r7, #64]	@ 0x40
 c004454:	2300      	movs	r3, #0
 c004456:	647b      	str	r3, [r7, #68]	@ 0x44
 c004458:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 c00445c:	460b      	mov	r3, r1
 c00445e:	4313      	orrs	r3, r2
 c004460:	d032      	beq.n	c0044c8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 c004462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004466:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c00446a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00446e:	d00b      	beq.n	c004488 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 c004470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c004474:	d804      	bhi.n	c004480 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 c004476:	2b00      	cmp	r3, #0
 c004478:	d008      	beq.n	c00448c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 c00447a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00447e:	d007      	beq.n	c004490 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 c004480:	2301      	movs	r3, #1
 c004482:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c004486:	e004      	b.n	c004492 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 c004488:	bf00      	nop
 c00448a:	e002      	b.n	c004492 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 c00448c:	bf00      	nop
 c00448e:	e000      	b.n	c004492 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 c004490:	bf00      	nop
    }
    if (ret == HAL_OK)
 c004492:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004496:	2b00      	cmp	r3, #0
 c004498:	d112      	bne.n	c0044c0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 c00449a:	4b07      	ldr	r3, [pc, #28]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00449c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c0044a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 c0044a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0044a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c0044ac:	4a02      	ldr	r2, [pc, #8]	@ (c0044b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0044ae:	430b      	orrs	r3, r1
 c0044b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c0044b4:	e008      	b.n	c0044c8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 c0044b6:	bf00      	nop
 c0044b8:	56020c00 	.word	0x56020c00
 c0044bc:	56020800 	.word	0x56020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0044c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0044c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 c0044c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0044d0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 c0044d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 c0044d6:	2300      	movs	r3, #0
 c0044d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 c0044da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 c0044de:	460b      	mov	r3, r1
 c0044e0:	4313      	orrs	r3, r2
 c0044e2:	d00c      	beq.n	c0044fe <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 c0044e4:	4b98      	ldr	r3, [pc, #608]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0044e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c0044ea:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 c0044ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0044f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c0044f6:	4a94      	ldr	r2, [pc, #592]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0044f8:	430b      	orrs	r3, r1
 c0044fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 c0044fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004506:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 c00450a:	633b      	str	r3, [r7, #48]	@ 0x30
 c00450c:	2300      	movs	r3, #0
 c00450e:	637b      	str	r3, [r7, #52]	@ 0x34
 c004510:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 c004514:	460b      	mov	r3, r1
 c004516:	4313      	orrs	r3, r2
 c004518:	d019      	beq.n	c00454e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 c00451a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00451e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c004522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c004526:	d105      	bne.n	c004534 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c004528:	4b87      	ldr	r3, [pc, #540]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00452c:	4a86      	ldr	r2, [pc, #536]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00452e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c004532:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 c004534:	4b84      	ldr	r3, [pc, #528]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004536:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00453a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 c00453e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c004546:	4a80      	ldr	r2, [pc, #512]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004548:	430b      	orrs	r3, r1
 c00454a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 c00454e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004556:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 c00455a:	62bb      	str	r3, [r7, #40]	@ 0x28
 c00455c:	2300      	movs	r3, #0
 c00455e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c004560:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 c004564:	460b      	mov	r3, r1
 c004566:	4313      	orrs	r3, r2
 c004568:	d00c      	beq.n	c004584 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 c00456a:	4b77      	ldr	r3, [pc, #476]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00456c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004570:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c004574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 c00457c:	4972      	ldr	r1, [pc, #456]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00457e:	4313      	orrs	r3, r2
 c004580:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 c004584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00458c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 c004590:	623b      	str	r3, [r7, #32]
 c004592:	2300      	movs	r3, #0
 c004594:	627b      	str	r3, [r7, #36]	@ 0x24
 c004596:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 c00459a:	460b      	mov	r3, r1
 c00459c:	4313      	orrs	r3, r2
 c00459e:	d00c      	beq.n	c0045ba <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 c0045a0:	4b69      	ldr	r3, [pc, #420]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0045a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0045a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 c0045aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0045ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 c0045b2:	4965      	ldr	r1, [pc, #404]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0045b4:	4313      	orrs	r3, r2
 c0045b6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 c0045ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0045c2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 c0045c6:	61bb      	str	r3, [r7, #24]
 c0045c8:	2300      	movs	r3, #0
 c0045ca:	61fb      	str	r3, [r7, #28]
 c0045cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 c0045d0:	460b      	mov	r3, r1
 c0045d2:	4313      	orrs	r3, r2
 c0045d4:	d00c      	beq.n	c0045f0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 c0045d6:	4b5c      	ldr	r3, [pc, #368]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0045d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c0045dc:	f023 0218 	bic.w	r2, r3, #24
 c0045e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0045e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 c0045e8:	4957      	ldr	r1, [pc, #348]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0045ea:	4313      	orrs	r3, r2
 c0045ec:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c0045f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0045f8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 c0045fc:	613b      	str	r3, [r7, #16]
 c0045fe:	2300      	movs	r3, #0
 c004600:	617b      	str	r3, [r7, #20]
 c004602:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 c004606:	460b      	mov	r3, r1
 c004608:	4313      	orrs	r3, r2
 c00460a:	d032      	beq.n	c004672 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 c00460c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004610:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c004614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c004618:	d105      	bne.n	c004626 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00461a:	4b4b      	ldr	r3, [pc, #300]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00461c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00461e:	4a4a      	ldr	r2, [pc, #296]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c004624:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 c004626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00462a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c00462e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c004632:	d108      	bne.n	c004646 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004634:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004638:	3308      	adds	r3, #8
 c00463a:	4618      	mov	r0, r3
 c00463c:	f000 f886 	bl	c00474c <RCCEx_PLL2_Config>
 c004640:	4603      	mov	r3, r0
 c004642:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 c004646:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00464a:	2b00      	cmp	r3, #0
 c00464c:	d10d      	bne.n	c00466a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 c00464e:	4b3e      	ldr	r3, [pc, #248]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004650:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004654:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c004658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00465c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c004660:	4939      	ldr	r1, [pc, #228]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004662:	4313      	orrs	r3, r2
 c004664:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 c004668:	e003      	b.n	c004672 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00466a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00466e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 c004672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00467a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 c00467e:	60bb      	str	r3, [r7, #8]
 c004680:	2300      	movs	r3, #0
 c004682:	60fb      	str	r3, [r7, #12]
 c004684:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 c004688:	460b      	mov	r3, r1
 c00468a:	4313      	orrs	r3, r2
 c00468c:	d03a      	beq.n	c004704 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 c00468e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c004696:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c00469a:	d00e      	beq.n	c0046ba <HAL_RCCEx_PeriphCLKConfig+0xaee>
 c00469c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c0046a0:	d815      	bhi.n	c0046ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
 c0046a2:	2b00      	cmp	r3, #0
 c0046a4:	d017      	beq.n	c0046d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 c0046a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c0046aa:	d110      	bne.n	c0046ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c0046ac:	4b26      	ldr	r3, [pc, #152]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0046b0:	4a25      	ldr	r2, [pc, #148]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0046b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c0046b6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 c0046b8:	e00e      	b.n	c0046d8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0046ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0046be:	3308      	adds	r3, #8
 c0046c0:	4618      	mov	r0, r3
 c0046c2:	f000 f843 	bl	c00474c <RCCEx_PLL2_Config>
 c0046c6:	4603      	mov	r3, r0
 c0046c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 c0046cc:	e004      	b.n	c0046d8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 c0046ce:	2301      	movs	r3, #1
 c0046d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c0046d4:	e000      	b.n	c0046d8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 c0046d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 c0046d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0046dc:	2b00      	cmp	r3, #0
 c0046de:	d10d      	bne.n	c0046fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 c0046e0:	4b19      	ldr	r3, [pc, #100]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0046e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0046e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 c0046ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0046ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c0046f2:	4915      	ldr	r1, [pc, #84]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0046f4:	4313      	orrs	r3, r2
 c0046f6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 c0046fa:	e003      	b.n	c004704 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0046fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004700:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 c004704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00470c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 c004710:	603b      	str	r3, [r7, #0]
 c004712:	2300      	movs	r3, #0
 c004714:	607b      	str	r3, [r7, #4]
 c004716:	e9d7 1200 	ldrd	r1, r2, [r7]
 c00471a:	460b      	mov	r3, r1
 c00471c:	4313      	orrs	r3, r2
 c00471e:	d00c      	beq.n	c00473a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 c004720:	4b09      	ldr	r3, [pc, #36]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c004726:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 c00472a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00472e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 c004732:	4905      	ldr	r1, [pc, #20]	@ (c004748 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004734:	4313      	orrs	r3, r2
 c004736:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 c00473a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 c00473e:	4618      	mov	r0, r3
 c004740:	37e8      	adds	r7, #232	@ 0xe8
 c004742:	46bd      	mov	sp, r7
 c004744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 c004748:	56020c00 	.word	0x56020c00

0c00474c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 c00474c:	b580      	push	{r7, lr}
 c00474e:	b084      	sub	sp, #16
 c004750:	af00      	add	r7, sp, #0
 c004752:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 c004754:	4b47      	ldr	r3, [pc, #284]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c004756:	681b      	ldr	r3, [r3, #0]
 c004758:	4a46      	ldr	r2, [pc, #280]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c00475a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 c00475e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c004760:	f7fc fe64 	bl	c00142c <HAL_GetTick>
 c004764:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c004766:	e008      	b.n	c00477a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c004768:	f7fc fe60 	bl	c00142c <HAL_GetTick>
 c00476c:	4602      	mov	r2, r0
 c00476e:	68fb      	ldr	r3, [r7, #12]
 c004770:	1ad3      	subs	r3, r2, r3
 c004772:	2b02      	cmp	r3, #2
 c004774:	d901      	bls.n	c00477a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c004776:	2303      	movs	r3, #3
 c004778:	e077      	b.n	c00486a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c00477a:	4b3e      	ldr	r3, [pc, #248]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c00477c:	681b      	ldr	r3, [r3, #0]
 c00477e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c004782:	2b00      	cmp	r3, #0
 c004784:	d1f0      	bne.n	c004768 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 c004786:	4b3b      	ldr	r3, [pc, #236]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c004788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00478a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 c00478e:	f023 0303 	bic.w	r3, r3, #3
 c004792:	687a      	ldr	r2, [r7, #4]
 c004794:	6811      	ldr	r1, [r2, #0]
 c004796:	687a      	ldr	r2, [r7, #4]
 c004798:	6852      	ldr	r2, [r2, #4]
 c00479a:	3a01      	subs	r2, #1
 c00479c:	0212      	lsls	r2, r2, #8
 c00479e:	430a      	orrs	r2, r1
 c0047a0:	4934      	ldr	r1, [pc, #208]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c0047a2:	4313      	orrs	r3, r2
 c0047a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 c0047a6:	4b33      	ldr	r3, [pc, #204]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c0047a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 c0047aa:	4b33      	ldr	r3, [pc, #204]	@ (c004878 <RCCEx_PLL2_Config+0x12c>)
 c0047ac:	4013      	ands	r3, r2
 c0047ae:	687a      	ldr	r2, [r7, #4]
 c0047b0:	6892      	ldr	r2, [r2, #8]
 c0047b2:	3a01      	subs	r2, #1
 c0047b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c0047b8:	687a      	ldr	r2, [r7, #4]
 c0047ba:	68d2      	ldr	r2, [r2, #12]
 c0047bc:	3a01      	subs	r2, #1
 c0047be:	0252      	lsls	r2, r2, #9
 c0047c0:	b292      	uxth	r2, r2
 c0047c2:	4311      	orrs	r1, r2
 c0047c4:	687a      	ldr	r2, [r7, #4]
 c0047c6:	6912      	ldr	r2, [r2, #16]
 c0047c8:	3a01      	subs	r2, #1
 c0047ca:	0412      	lsls	r2, r2, #16
 c0047cc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c0047d0:	4311      	orrs	r1, r2
 c0047d2:	687a      	ldr	r2, [r7, #4]
 c0047d4:	6952      	ldr	r2, [r2, #20]
 c0047d6:	3a01      	subs	r2, #1
 c0047d8:	0612      	lsls	r2, r2, #24
 c0047da:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c0047de:	430a      	orrs	r2, r1
 c0047e0:	4924      	ldr	r1, [pc, #144]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c0047e2:	4313      	orrs	r3, r2
 c0047e4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 c0047e6:	4b23      	ldr	r3, [pc, #140]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c0047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0047ea:	f023 020c 	bic.w	r2, r3, #12
 c0047ee:	687b      	ldr	r3, [r7, #4]
 c0047f0:	699b      	ldr	r3, [r3, #24]
 c0047f2:	4920      	ldr	r1, [pc, #128]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c0047f4:	4313      	orrs	r3, r2
 c0047f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 c0047f8:	4b1e      	ldr	r3, [pc, #120]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c0047fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 c0047fc:	687b      	ldr	r3, [r7, #4]
 c0047fe:	6a1b      	ldr	r3, [r3, #32]
 c004800:	491c      	ldr	r1, [pc, #112]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c004802:	4313      	orrs	r3, r2
 c004804:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 c004806:	4b1b      	ldr	r3, [pc, #108]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c004808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00480a:	4a1a      	ldr	r2, [pc, #104]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c00480c:	f023 0310 	bic.w	r3, r3, #16
 c004810:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 c004812:	4b18      	ldr	r3, [pc, #96]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c004816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c00481a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 c00481e:	687a      	ldr	r2, [r7, #4]
 c004820:	69d2      	ldr	r2, [r2, #28]
 c004822:	00d2      	lsls	r2, r2, #3
 c004824:	4913      	ldr	r1, [pc, #76]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c004826:	4313      	orrs	r3, r2
 c004828:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 c00482a:	4b12      	ldr	r3, [pc, #72]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c00482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00482e:	4a11      	ldr	r2, [pc, #68]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c004830:	f043 0310 	orr.w	r3, r3, #16
 c004834:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 c004836:	4b0f      	ldr	r3, [pc, #60]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c004838:	681b      	ldr	r3, [r3, #0]
 c00483a:	4a0e      	ldr	r2, [pc, #56]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c00483c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c004840:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c004842:	f7fc fdf3 	bl	c00142c <HAL_GetTick>
 c004846:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c004848:	e008      	b.n	c00485c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c00484a:	f7fc fdef 	bl	c00142c <HAL_GetTick>
 c00484e:	4602      	mov	r2, r0
 c004850:	68fb      	ldr	r3, [r7, #12]
 c004852:	1ad3      	subs	r3, r2, r3
 c004854:	2b02      	cmp	r3, #2
 c004856:	d901      	bls.n	c00485c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 c004858:	2303      	movs	r3, #3
 c00485a:	e006      	b.n	c00486a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c00485c:	4b05      	ldr	r3, [pc, #20]	@ (c004874 <RCCEx_PLL2_Config+0x128>)
 c00485e:	681b      	ldr	r3, [r3, #0]
 c004860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c004864:	2b00      	cmp	r3, #0
 c004866:	d0f0      	beq.n	c00484a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 c004868:	2300      	movs	r3, #0

}
 c00486a:	4618      	mov	r0, r3
 c00486c:	3710      	adds	r7, #16
 c00486e:	46bd      	mov	sp, r7
 c004870:	bd80      	pop	{r7, pc}
 c004872:	bf00      	nop
 c004874:	56020c00 	.word	0x56020c00
 c004878:	80800000 	.word	0x80800000

0c00487c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 c00487c:	b580      	push	{r7, lr}
 c00487e:	b084      	sub	sp, #16
 c004880:	af00      	add	r7, sp, #0
 c004882:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 c004884:	4b47      	ldr	r3, [pc, #284]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004886:	681b      	ldr	r3, [r3, #0]
 c004888:	4a46      	ldr	r2, [pc, #280]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c00488a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c00488e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c004890:	f7fc fdcc 	bl	c00142c <HAL_GetTick>
 c004894:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c004896:	e008      	b.n	c0048aa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c004898:	f7fc fdc8 	bl	c00142c <HAL_GetTick>
 c00489c:	4602      	mov	r2, r0
 c00489e:	68fb      	ldr	r3, [r7, #12]
 c0048a0:	1ad3      	subs	r3, r2, r3
 c0048a2:	2b02      	cmp	r3, #2
 c0048a4:	d901      	bls.n	c0048aa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c0048a6:	2303      	movs	r3, #3
 c0048a8:	e077      	b.n	c00499a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c0048aa:	4b3e      	ldr	r3, [pc, #248]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c0048ac:	681b      	ldr	r3, [r3, #0]
 c0048ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c0048b2:	2b00      	cmp	r3, #0
 c0048b4:	d1f0      	bne.n	c004898 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 c0048b6:	4b3b      	ldr	r3, [pc, #236]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c0048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c0048ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 c0048be:	f023 0303 	bic.w	r3, r3, #3
 c0048c2:	687a      	ldr	r2, [r7, #4]
 c0048c4:	6811      	ldr	r1, [r2, #0]
 c0048c6:	687a      	ldr	r2, [r7, #4]
 c0048c8:	6852      	ldr	r2, [r2, #4]
 c0048ca:	3a01      	subs	r2, #1
 c0048cc:	0212      	lsls	r2, r2, #8
 c0048ce:	430a      	orrs	r2, r1
 c0048d0:	4934      	ldr	r1, [pc, #208]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c0048d2:	4313      	orrs	r3, r2
 c0048d4:	630b      	str	r3, [r1, #48]	@ 0x30
 c0048d6:	4b33      	ldr	r3, [pc, #204]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c0048d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 c0048da:	4b33      	ldr	r3, [pc, #204]	@ (c0049a8 <RCCEx_PLL3_Config+0x12c>)
 c0048dc:	4013      	ands	r3, r2
 c0048de:	687a      	ldr	r2, [r7, #4]
 c0048e0:	6892      	ldr	r2, [r2, #8]
 c0048e2:	3a01      	subs	r2, #1
 c0048e4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c0048e8:	687a      	ldr	r2, [r7, #4]
 c0048ea:	68d2      	ldr	r2, [r2, #12]
 c0048ec:	3a01      	subs	r2, #1
 c0048ee:	0252      	lsls	r2, r2, #9
 c0048f0:	b292      	uxth	r2, r2
 c0048f2:	4311      	orrs	r1, r2
 c0048f4:	687a      	ldr	r2, [r7, #4]
 c0048f6:	6912      	ldr	r2, [r2, #16]
 c0048f8:	3a01      	subs	r2, #1
 c0048fa:	0412      	lsls	r2, r2, #16
 c0048fc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c004900:	4311      	orrs	r1, r2
 c004902:	687a      	ldr	r2, [r7, #4]
 c004904:	6952      	ldr	r2, [r2, #20]
 c004906:	3a01      	subs	r2, #1
 c004908:	0612      	lsls	r2, r2, #24
 c00490a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c00490e:	430a      	orrs	r2, r1
 c004910:	4924      	ldr	r1, [pc, #144]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004912:	4313      	orrs	r3, r2
 c004914:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 c004916:	4b23      	ldr	r3, [pc, #140]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00491a:	f023 020c 	bic.w	r2, r3, #12
 c00491e:	687b      	ldr	r3, [r7, #4]
 c004920:	699b      	ldr	r3, [r3, #24]
 c004922:	4920      	ldr	r1, [pc, #128]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004924:	4313      	orrs	r3, r2
 c004926:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 c004928:	4b1e      	ldr	r3, [pc, #120]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c00492a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c00492c:	687b      	ldr	r3, [r7, #4]
 c00492e:	6a1b      	ldr	r3, [r3, #32]
 c004930:	491c      	ldr	r1, [pc, #112]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004932:	4313      	orrs	r3, r2
 c004934:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 c004936:	4b1b      	ldr	r3, [pc, #108]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00493a:	4a1a      	ldr	r2, [pc, #104]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c00493c:	f023 0310 	bic.w	r3, r3, #16
 c004940:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 c004942:	4b18      	ldr	r3, [pc, #96]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c004946:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c00494a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 c00494e:	687a      	ldr	r2, [r7, #4]
 c004950:	69d2      	ldr	r2, [r2, #28]
 c004952:	00d2      	lsls	r2, r2, #3
 c004954:	4913      	ldr	r1, [pc, #76]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004956:	4313      	orrs	r3, r2
 c004958:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 c00495a:	4b12      	ldr	r3, [pc, #72]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c00495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00495e:	4a11      	ldr	r2, [pc, #68]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004960:	f043 0310 	orr.w	r3, r3, #16
 c004964:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 c004966:	4b0f      	ldr	r3, [pc, #60]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c004968:	681b      	ldr	r3, [r3, #0]
 c00496a:	4a0e      	ldr	r2, [pc, #56]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c00496c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c004970:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c004972:	f7fc fd5b 	bl	c00142c <HAL_GetTick>
 c004976:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c004978:	e008      	b.n	c00498c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c00497a:	f7fc fd57 	bl	c00142c <HAL_GetTick>
 c00497e:	4602      	mov	r2, r0
 c004980:	68fb      	ldr	r3, [r7, #12]
 c004982:	1ad3      	subs	r3, r2, r3
 c004984:	2b02      	cmp	r3, #2
 c004986:	d901      	bls.n	c00498c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 c004988:	2303      	movs	r3, #3
 c00498a:	e006      	b.n	c00499a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c00498c:	4b05      	ldr	r3, [pc, #20]	@ (c0049a4 <RCCEx_PLL3_Config+0x128>)
 c00498e:	681b      	ldr	r3, [r3, #0]
 c004990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c004994:	2b00      	cmp	r3, #0
 c004996:	d0f0      	beq.n	c00497a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 c004998:	2300      	movs	r3, #0
}
 c00499a:	4618      	mov	r0, r3
 c00499c:	3710      	adds	r7, #16
 c00499e:	46bd      	mov	sp, r7
 c0049a0:	bd80      	pop	{r7, pc}
 c0049a2:	bf00      	nop
 c0049a4:	56020c00 	.word	0x56020c00
 c0049a8:	80800000 	.word	0x80800000

0c0049ac <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, const LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 c0049ac:	b480      	push	{r7}
 c0049ae:	b083      	sub	sp, #12
 c0049b0:	af00      	add	r7, sp, #0
 c0049b2:	6078      	str	r0, [r7, #4]
 c0049b4:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 c0049b6:	687b      	ldr	r3, [r7, #4]
 c0049b8:	681b      	ldr	r3, [r3, #0]
 c0049ba:	f043 0202 	orr.w	r2, r3, #2
 c0049be:	687b      	ldr	r3, [r7, #4]
 c0049c0:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 c0049c2:	683b      	ldr	r3, [r7, #0]
 c0049c4:	685a      	ldr	r2, [r3, #4]
 c0049c6:	683b      	ldr	r3, [r7, #0]
 c0049c8:	681b      	ldr	r3, [r3, #0]
 c0049ca:	021b      	lsls	r3, r3, #8
 c0049cc:	431a      	orrs	r2, r3
 c0049ce:	687b      	ldr	r3, [r7, #4]
 c0049d0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 c0049d2:	687b      	ldr	r3, [r7, #4]
 c0049d4:	681b      	ldr	r3, [r3, #0]
 c0049d6:	f023 0202 	bic.w	r2, r3, #2
 c0049da:	687b      	ldr	r3, [r7, #4]
 c0049dc:	601a      	str	r2, [r3, #0]
}
 c0049de:	bf00      	nop
 c0049e0:	370c      	adds	r7, #12
 c0049e2:	46bd      	mov	sp, r7
 c0049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0049e8:	4770      	bx	lr

0c0049ea <memset>:
 c0049ea:	4402      	add	r2, r0
 c0049ec:	4603      	mov	r3, r0
 c0049ee:	4293      	cmp	r3, r2
 c0049f0:	d100      	bne.n	c0049f4 <memset+0xa>
 c0049f2:	4770      	bx	lr
 c0049f4:	f803 1b01 	strb.w	r1, [r3], #1
 c0049f8:	e7f9      	b.n	c0049ee <memset+0x4>
	...

0c0049fc <__libc_init_array>:
 c0049fc:	b570      	push	{r4, r5, r6, lr}
 c0049fe:	4d0d      	ldr	r5, [pc, #52]	@ (c004a34 <__libc_init_array+0x38>)
 c004a00:	2600      	movs	r6, #0
 c004a02:	4c0d      	ldr	r4, [pc, #52]	@ (c004a38 <__libc_init_array+0x3c>)
 c004a04:	1b64      	subs	r4, r4, r5
 c004a06:	10a4      	asrs	r4, r4, #2
 c004a08:	42a6      	cmp	r6, r4
 c004a0a:	d109      	bne.n	c004a20 <__libc_init_array+0x24>
 c004a0c:	4d0b      	ldr	r5, [pc, #44]	@ (c004a3c <__libc_init_array+0x40>)
 c004a0e:	2600      	movs	r6, #0
 c004a10:	4c0b      	ldr	r4, [pc, #44]	@ (c004a40 <__libc_init_array+0x44>)
 c004a12:	f000 f817 	bl	c004a44 <_init>
 c004a16:	1b64      	subs	r4, r4, r5
 c004a18:	10a4      	asrs	r4, r4, #2
 c004a1a:	42a6      	cmp	r6, r4
 c004a1c:	d105      	bne.n	c004a2a <__libc_init_array+0x2e>
 c004a1e:	bd70      	pop	{r4, r5, r6, pc}
 c004a20:	f855 3b04 	ldr.w	r3, [r5], #4
 c004a24:	3601      	adds	r6, #1
 c004a26:	4798      	blx	r3
 c004a28:	e7ee      	b.n	c004a08 <__libc_init_array+0xc>
 c004a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 c004a2e:	3601      	adds	r6, #1
 c004a30:	4798      	blx	r3
 c004a32:	e7f2      	b.n	c004a1a <__libc_init_array+0x1e>
 c004a34:	0c004b2c 	.word	0x0c004b2c
 c004a38:	0c004b2c 	.word	0x0c004b2c
 c004a3c:	0c004b2c 	.word	0x0c004b2c
 c004a40:	0c004b30 	.word	0x0c004b30

0c004a44 <_init>:
 c004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c004a46:	bf00      	nop
 c004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c004a4a:	bc08      	pop	{r3}
 c004a4c:	469e      	mov	lr, r3
 c004a4e:	4770      	bx	lr

0c004a50 <_fini>:
 c004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c004a52:	bf00      	nop
 c004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c004a56:	bc08      	pop	{r3}
 c004a58:	469e      	mov	lr, r3
 c004a5a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c0fe000 <SECURE_SystemCoreClockUpdate>:
 c0fe000:	e97f e97f 	sg
 c0fe004:	f703 b8ee 	b.w	c0011e4 <__acle_se_SECURE_SystemCoreClockUpdate>

0c0fe008 <Secure_led_control>:
 c0fe008:	e97f e97f 	sg
 c0fe00c:	f702 be3c 	b.w	c000c88 <__acle_se_Secure_led_control>

0c0fe010 <SECURE_RegisterCallback>:
 c0fe010:	e97f e97f 	sg
 c0fe014:	f702 bde2 	b.w	c000bdc <__acle_se_SECURE_RegisterCallback>
	...
